/*
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.TrialResponse;
import io.swagger.client.model.TrialsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrialsApi {
    private ApiClient apiClient;

    public TrialsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrialsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for trialsGet
     * @param commonCropName Common name for the crop associated with this trial (optional)
     * @param programDbId Program filter to only return trials associated with given program id. (optional)
     * @param locationDbId Filter by location (optional)
     * @param active Filter active status true/false. (optional)
     * @param sortBy Sort order. Name of the field to sorty by. (optional)
     * @param sortOrder Sort order direction: asc/desc (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call trialsGetCall(String commonCropName, String programDbId, String locationDbId, Boolean active, String sortBy, String sortOrder, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (commonCropName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commonCropName", commonCropName));
        if (programDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("programDbId", programDbId));
        if (locationDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locationDbId", locationDbId));
        if (active != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active", active));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trialsGetValidateBeforeCall(String commonCropName, String programDbId, String locationDbId, Boolean active, String sortBy, String sortOrder, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = trialsGetCall(commonCropName, programDbId, locationDbId, active, sortBy, sortOrder, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the breeding Trials
     * Retrieve a filtered list of Trials. A Trial is a collection of studies
     * @param commonCropName Common name for the crop associated with this trial (optional)
     * @param programDbId Program filter to only return trials associated with given program id. (optional)
     * @param locationDbId Filter by location (optional)
     * @param active Filter active status true/false. (optional)
     * @param sortBy Sort order. Name of the field to sorty by. (optional)
     * @param sortOrder Sort order direction: asc/desc (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return TrialsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrialsResponse trialsGet(String commonCropName, String programDbId, String locationDbId, Boolean active, String sortBy, String sortOrder, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<TrialsResponse> resp = trialsGetWithHttpInfo(commonCropName, programDbId, locationDbId, active, sortBy, sortOrder, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the breeding Trials
     * Retrieve a filtered list of Trials. A Trial is a collection of studies
     * @param commonCropName Common name for the crop associated with this trial (optional)
     * @param programDbId Program filter to only return trials associated with given program id. (optional)
     * @param locationDbId Filter by location (optional)
     * @param active Filter active status true/false. (optional)
     * @param sortBy Sort order. Name of the field to sorty by. (optional)
     * @param sortOrder Sort order direction: asc/desc (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;TrialsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrialsResponse> trialsGetWithHttpInfo(String commonCropName, String programDbId, String locationDbId, Boolean active, String sortBy, String sortOrder, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = trialsGetValidateBeforeCall(commonCropName, programDbId, locationDbId, active, sortBy, sortOrder, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<TrialsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the breeding Trials (asynchronously)
     * Retrieve a filtered list of Trials. A Trial is a collection of studies
     * @param commonCropName Common name for the crop associated with this trial (optional)
     * @param programDbId Program filter to only return trials associated with given program id. (optional)
     * @param locationDbId Filter by location (optional)
     * @param active Filter active status true/false. (optional)
     * @param sortBy Sort order. Name of the field to sorty by. (optional)
     * @param sortOrder Sort order direction: asc/desc (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trialsGetAsync(String commonCropName, String programDbId, String locationDbId, Boolean active, String sortBy, String sortOrder, Integer page, Integer pageSize, String authorization, final ApiCallback<TrialsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trialsGetValidateBeforeCall(commonCropName, programDbId, locationDbId, active, sortBy, sortOrder, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrialsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for trialsTrialDbIdGet
     * @param trialDbId The internal trialDbId (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call trialsTrialDbIdGetCall(String trialDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trials/{trialDbId}"
            .replaceAll("\\{" + "trialDbId" + "\\}", apiClient.escapeString(trialDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trialsTrialDbIdGetValidateBeforeCall(String trialDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'trialDbId' is set
        if (trialDbId == null) {
            throw new ApiException("Missing the required parameter 'trialDbId' when calling trialsTrialDbIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = trialsTrialDbIdGetCall(trialDbId, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the details of a specific Trial
     * Get trial by id.
     * @param trialDbId The internal trialDbId (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return TrialResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrialResponse trialsTrialDbIdGet(String trialDbId, String authorization) throws ApiException {
        ApiResponse<TrialResponse> resp = trialsTrialDbIdGetWithHttpInfo(trialDbId, authorization);
        return resp.getData();
    }

    /**
     * Get the details of a specific Trial
     * Get trial by id.
     * @param trialDbId The internal trialDbId (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;TrialResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrialResponse> trialsTrialDbIdGetWithHttpInfo(String trialDbId, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = trialsTrialDbIdGetValidateBeforeCall(trialDbId, authorization, null, null);
        Type localVarReturnType = new TypeToken<TrialResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the details of a specific Trial (asynchronously)
     * Get trial by id.
     * @param trialDbId The internal trialDbId (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trialsTrialDbIdGetAsync(String trialDbId, String authorization, final ApiCallback<TrialResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trialsTrialDbIdGetValidateBeforeCall(trialDbId, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrialResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

/*
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.GermplasmSummaryListResponse;
import io.swagger.client.model.NewObservationDbIdsResponse;
import io.swagger.client.model.NewObservationUnitDbIdsResponse;
import io.swagger.client.model.NewObservationUnitRequest;
import io.swagger.client.model.NewObservationsRequest;
import io.swagger.client.model.NewObservationsRequestWrapperDeprecated;
import io.swagger.client.model.NewObservationsTableRequest;
import io.swagger.client.model.ObservationUnitPositionsResponse;
import io.swagger.client.model.ObservationUnitPositionsResponse1;
import io.swagger.client.model.ObservationUnitsResponse2;
import io.swagger.client.model.ObservationsResponse;
import io.swagger.client.model.SeasonsResponse;
import io.swagger.client.model.StudiesResponse;
import io.swagger.client.model.StudiesResponse1;
import io.swagger.client.model.StudyLayoutRequest;
import io.swagger.client.model.StudyObservationVariablesResponse;
import io.swagger.client.model.StudyObservationVariablesResponse1;
import io.swagger.client.model.StudyResponse;
import io.swagger.client.model.StudySearchRequest;
import io.swagger.client.model.StudySearchRequestDep;
import io.swagger.client.model.StudyTypesResponse;
import io.swagger.client.model.StudyTypesResponse1;
import io.swagger.client.model.SuccessfulSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StudiesApi {
    private ApiClient apiClient;

    public StudiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StudiesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for searchStudiesPost
     * @param body Study Search request (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchStudiesPostCall(StudySearchRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/search/studies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchStudiesPostValidateBeforeCall(StudySearchRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = searchStudiesPostCall(body, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Submit a search request for Studies
     * Get list of studies StartDate and endDate should be ISO8601 format for dates See Search Services for additional implementation details.
     * @param body Study Search request (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return SuccessfulSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessfulSearchResponse searchStudiesPost(StudySearchRequest body, String authorization) throws ApiException {
        ApiResponse<SuccessfulSearchResponse> resp = searchStudiesPostWithHttpInfo(body, authorization);
        return resp.getData();
    }

    /**
     * Submit a search request for Studies
     * Get list of studies StartDate and endDate should be ISO8601 format for dates See Search Services for additional implementation details.
     * @param body Study Search request (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;SuccessfulSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessfulSearchResponse> searchStudiesPostWithHttpInfo(StudySearchRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = searchStudiesPostValidateBeforeCall(body, authorization, null, null);
        Type localVarReturnType = new TypeToken<SuccessfulSearchResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submit a search request for Studies (asynchronously)
     * Get list of studies StartDate and endDate should be ISO8601 format for dates See Search Services for additional implementation details.
     * @param body Study Search request (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchStudiesPostAsync(StudySearchRequest body, String authorization, final ApiCallback<SuccessfulSearchResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchStudiesPostValidateBeforeCall(body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessfulSearchResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchStudiesSearchResultsDbIdGet
     * @param searchResultsDbId Permanent unique identifier which references the search results (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchStudiesSearchResultsDbIdGetCall(String searchResultsDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/search/studies/{searchResultsDbId}"
            .replaceAll("\\{" + "searchResultsDbId" + "\\}", apiClient.escapeString(searchResultsDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchStudiesSearchResultsDbIdGetValidateBeforeCall(String searchResultsDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'searchResultsDbId' is set
        if (searchResultsDbId == null) {
            throw new ApiException("Missing the required parameter 'searchResultsDbId' when calling searchStudiesSearchResultsDbIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = searchStudiesSearchResultsDbIdGetCall(searchResultsDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the results of a Studies search request
     * Get list of studies  StartDate and endDate should be ISO8601 format for dates  See Search Services for additional implementation details.
     * @param searchResultsDbId Permanent unique identifier which references the search results (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return StudiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StudiesResponse searchStudiesSearchResultsDbIdGet(String searchResultsDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<StudiesResponse> resp = searchStudiesSearchResultsDbIdGetWithHttpInfo(searchResultsDbId, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the results of a Studies search request
     * Get list of studies  StartDate and endDate should be ISO8601 format for dates  See Search Services for additional implementation details.
     * @param searchResultsDbId Permanent unique identifier which references the search results (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;StudiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StudiesResponse> searchStudiesSearchResultsDbIdGetWithHttpInfo(String searchResultsDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = searchStudiesSearchResultsDbIdGetValidateBeforeCall(searchResultsDbId, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<StudiesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the results of a Studies search request (asynchronously)
     * Get list of studies  StartDate and endDate should be ISO8601 format for dates  See Search Services for additional implementation details.
     * @param searchResultsDbId Permanent unique identifier which references the search results (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchStudiesSearchResultsDbIdGetAsync(String searchResultsDbId, Integer page, Integer pageSize, String authorization, final ApiCallback<StudiesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchStudiesSearchResultsDbIdGetValidateBeforeCall(searchResultsDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StudiesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for seasonsGet
     * @param seasonDbId The unique identifier for a season (optional)
     * @param season The term to describe a given season. Example \&quot;Spring\&quot; OR \&quot;May\&quot; OR \&quot;PlantingTime7\&quot; (optional)
     * @param year The 4 digit year of a season. Example \&quot;2017\&quot; (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seasonsGetCall(String seasonDbId, String season, String year, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/seasons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (seasonDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("seasonDbId", seasonDbId));
        if (season != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("season", season));
        if (year != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("year", year));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seasonsGetValidateBeforeCall(String seasonDbId, String season, String year, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = seasonsGetCall(seasonDbId, season, year, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Seasons
     * Call to retrive all seasons in the database.  A season is made of 2 parts  - The primary year   - A term which defines a segment of the year.  This could be a traditional season, like \&quot;Spring\&quot; or \&quot;Summer\&quot;;  this could be a month, like \&quot;May\&quot; or \&quot;June\&quot;;  or this could be an arbitrary season name which is meaningful to the breeding program like \&quot;PlantingTime_3\&quot; or \&quot;Season E\&quot;
     * @param seasonDbId The unique identifier for a season (optional)
     * @param season The term to describe a given season. Example \&quot;Spring\&quot; OR \&quot;May\&quot; OR \&quot;PlantingTime7\&quot; (optional)
     * @param year The 4 digit year of a season. Example \&quot;2017\&quot; (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return SeasonsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SeasonsResponse seasonsGet(String seasonDbId, String season, String year, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<SeasonsResponse> resp = seasonsGetWithHttpInfo(seasonDbId, season, year, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the Seasons
     * Call to retrive all seasons in the database.  A season is made of 2 parts  - The primary year   - A term which defines a segment of the year.  This could be a traditional season, like \&quot;Spring\&quot; or \&quot;Summer\&quot;;  this could be a month, like \&quot;May\&quot; or \&quot;June\&quot;;  or this could be an arbitrary season name which is meaningful to the breeding program like \&quot;PlantingTime_3\&quot; or \&quot;Season E\&quot;
     * @param seasonDbId The unique identifier for a season (optional)
     * @param season The term to describe a given season. Example \&quot;Spring\&quot; OR \&quot;May\&quot; OR \&quot;PlantingTime7\&quot; (optional)
     * @param year The 4 digit year of a season. Example \&quot;2017\&quot; (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;SeasonsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SeasonsResponse> seasonsGetWithHttpInfo(String seasonDbId, String season, String year, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = seasonsGetValidateBeforeCall(seasonDbId, season, year, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<SeasonsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Seasons (asynchronously)
     * Call to retrive all seasons in the database.  A season is made of 2 parts  - The primary year   - A term which defines a segment of the year.  This could be a traditional season, like \&quot;Spring\&quot; or \&quot;Summer\&quot;;  this could be a month, like \&quot;May\&quot; or \&quot;June\&quot;;  or this could be an arbitrary season name which is meaningful to the breeding program like \&quot;PlantingTime_3\&quot; or \&quot;Season E\&quot;
     * @param seasonDbId The unique identifier for a season (optional)
     * @param season The term to describe a given season. Example \&quot;Spring\&quot; OR \&quot;May\&quot; OR \&quot;PlantingTime7\&quot; (optional)
     * @param year The 4 digit year of a season. Example \&quot;2017\&quot; (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seasonsGetAsync(String seasonDbId, String season, String year, Integer page, Integer pageSize, String authorization, final ApiCallback<SeasonsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seasonsGetValidateBeforeCall(seasonDbId, season, year, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SeasonsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesGet
     * @param commonCropName Common name for the crop associated with this study (optional)
     * @param studyType DEPRECATED in v1.3 - see \&quot;studyTypeDbId\&quot; (optional)
     * @param studyTypeDbId Filter based on study type unique identifier (optional)
     * @param programDbId Program filter to only return studies associated with given program id. (optional)
     * @param locationDbId Filter by location (optional)
     * @param seasonDbId Filter by season or year (optional)
     * @param trialDbId Filter by trial (optional)
     * @param studyDbId Filter by study DbId (optional)
     * @param germplasmDbIds DEPRECATED in v1.3 - see /search/studies (optional)
     * @param observationVariableDbIds DEPRECATED in v1.3 - see /search/studies (optional)
     * @param active Filter active status true/false. (optional)
     * @param sortBy Name of the field to sort by. (optional)
     * @param sortOrder Sort order direction. Ascending/Descending. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesGetCall(String commonCropName, String studyType, String studyTypeDbId, String programDbId, String locationDbId, String seasonDbId, String trialDbId, String studyDbId, List<String> germplasmDbIds, List<String> observationVariableDbIds, Boolean active, String sortBy, String sortOrder, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/studies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (commonCropName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commonCropName", commonCropName));
        if (studyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("studyType", studyType));
        if (studyTypeDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("studyTypeDbId", studyTypeDbId));
        if (programDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("programDbId", programDbId));
        if (locationDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locationDbId", locationDbId));
        if (seasonDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("seasonDbId", seasonDbId));
        if (trialDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trialDbId", trialDbId));
        if (studyDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("studyDbId", studyDbId));
        if (germplasmDbIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "germplasmDbIds", germplasmDbIds));
        if (observationVariableDbIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "observationVariableDbIds", observationVariableDbIds));
        if (active != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active", active));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesGetValidateBeforeCall(String commonCropName, String studyType, String studyTypeDbId, String programDbId, String locationDbId, String seasonDbId, String trialDbId, String studyDbId, List<String> germplasmDbIds, List<String> observationVariableDbIds, Boolean active, String sortBy, String sortOrder, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = studiesGetCall(commonCropName, studyType, studyTypeDbId, programDbId, locationDbId, seasonDbId, trialDbId, studyDbId, germplasmDbIds, observationVariableDbIds, active, sortBy, sortOrder, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Studies
     * Get list of studies  Implementation Notes  StartDate and endDate should be ISO8601 format for dates  See Search Services for additional implementation details.
     * @param commonCropName Common name for the crop associated with this study (optional)
     * @param studyType DEPRECATED in v1.3 - see \&quot;studyTypeDbId\&quot; (optional)
     * @param studyTypeDbId Filter based on study type unique identifier (optional)
     * @param programDbId Program filter to only return studies associated with given program id. (optional)
     * @param locationDbId Filter by location (optional)
     * @param seasonDbId Filter by season or year (optional)
     * @param trialDbId Filter by trial (optional)
     * @param studyDbId Filter by study DbId (optional)
     * @param germplasmDbIds DEPRECATED in v1.3 - see /search/studies (optional)
     * @param observationVariableDbIds DEPRECATED in v1.3 - see /search/studies (optional)
     * @param active Filter active status true/false. (optional)
     * @param sortBy Name of the field to sort by. (optional)
     * @param sortOrder Sort order direction. Ascending/Descending. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return StudiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StudiesResponse studiesGet(String commonCropName, String studyType, String studyTypeDbId, String programDbId, String locationDbId, String seasonDbId, String trialDbId, String studyDbId, List<String> germplasmDbIds, List<String> observationVariableDbIds, Boolean active, String sortBy, String sortOrder, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<StudiesResponse> resp = studiesGetWithHttpInfo(commonCropName, studyType, studyTypeDbId, programDbId, locationDbId, seasonDbId, trialDbId, studyDbId, germplasmDbIds, observationVariableDbIds, active, sortBy, sortOrder, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the Studies
     * Get list of studies  Implementation Notes  StartDate and endDate should be ISO8601 format for dates  See Search Services for additional implementation details.
     * @param commonCropName Common name for the crop associated with this study (optional)
     * @param studyType DEPRECATED in v1.3 - see \&quot;studyTypeDbId\&quot; (optional)
     * @param studyTypeDbId Filter based on study type unique identifier (optional)
     * @param programDbId Program filter to only return studies associated with given program id. (optional)
     * @param locationDbId Filter by location (optional)
     * @param seasonDbId Filter by season or year (optional)
     * @param trialDbId Filter by trial (optional)
     * @param studyDbId Filter by study DbId (optional)
     * @param germplasmDbIds DEPRECATED in v1.3 - see /search/studies (optional)
     * @param observationVariableDbIds DEPRECATED in v1.3 - see /search/studies (optional)
     * @param active Filter active status true/false. (optional)
     * @param sortBy Name of the field to sort by. (optional)
     * @param sortOrder Sort order direction. Ascending/Descending. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;StudiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StudiesResponse> studiesGetWithHttpInfo(String commonCropName, String studyType, String studyTypeDbId, String programDbId, String locationDbId, String seasonDbId, String trialDbId, String studyDbId, List<String> germplasmDbIds, List<String> observationVariableDbIds, Boolean active, String sortBy, String sortOrder, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = studiesGetValidateBeforeCall(commonCropName, studyType, studyTypeDbId, programDbId, locationDbId, seasonDbId, trialDbId, studyDbId, germplasmDbIds, observationVariableDbIds, active, sortBy, sortOrder, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<StudiesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Studies (asynchronously)
     * Get list of studies  Implementation Notes  StartDate and endDate should be ISO8601 format for dates  See Search Services for additional implementation details.
     * @param commonCropName Common name for the crop associated with this study (optional)
     * @param studyType DEPRECATED in v1.3 - see \&quot;studyTypeDbId\&quot; (optional)
     * @param studyTypeDbId Filter based on study type unique identifier (optional)
     * @param programDbId Program filter to only return studies associated with given program id. (optional)
     * @param locationDbId Filter by location (optional)
     * @param seasonDbId Filter by season or year (optional)
     * @param trialDbId Filter by trial (optional)
     * @param studyDbId Filter by study DbId (optional)
     * @param germplasmDbIds DEPRECATED in v1.3 - see /search/studies (optional)
     * @param observationVariableDbIds DEPRECATED in v1.3 - see /search/studies (optional)
     * @param active Filter active status true/false. (optional)
     * @param sortBy Name of the field to sort by. (optional)
     * @param sortOrder Sort order direction. Ascending/Descending. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesGetAsync(String commonCropName, String studyType, String studyTypeDbId, String programDbId, String locationDbId, String seasonDbId, String trialDbId, String studyDbId, List<String> germplasmDbIds, List<String> observationVariableDbIds, Boolean active, String sortBy, String sortOrder, Integer page, Integer pageSize, String authorization, final ApiCallback<StudiesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesGetValidateBeforeCall(commonCropName, studyType, studyTypeDbId, programDbId, locationDbId, seasonDbId, trialDbId, studyDbId, germplasmDbIds, observationVariableDbIds, active, sortBy, sortOrder, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StudiesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesSearchGet
     * @param studyType Filter based on study type e.g. Nursery, Trial or Genotype. (optional)
     * @param programDbId Program filter to only return studies associated with given program id. (optional)
     * @param locationDbId Filter by location (optional)
     * @param seasonDbId Filter by season or year (optional)
     * @param trialDbId Filter by trial (optional)
     * @param studyDbId Filter by study DbId (optional)
     * @param germplasmDbIds Filter studies where specified germplasm have been used/tested (optional)
     * @param observationVariableDbIds Filter studies where specified observation variables have been measured (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param active Filter active status true/false. (optional)
     * @param sortBy Sort order. Name of the field to sort by. (optional)
     * @param sortOrder Sort order direction. Ascending/Descending. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesSearchGetCall(String studyType, String programDbId, String locationDbId, String seasonDbId, String trialDbId, String studyDbId, List<String> germplasmDbIds, List<String> observationVariableDbIds, Integer page, Integer pageSize, Boolean active, String sortBy, String sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/studies-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (studyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("studyType", studyType));
        if (programDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("programDbId", programDbId));
        if (locationDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locationDbId", locationDbId));
        if (seasonDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("seasonDbId", seasonDbId));
        if (trialDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trialDbId", trialDbId));
        if (studyDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("studyDbId", studyDbId));
        if (germplasmDbIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "germplasmDbIds", germplasmDbIds));
        if (observationVariableDbIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "observationVariableDbIds", observationVariableDbIds));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (active != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active", active));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesSearchGetValidateBeforeCall(String studyType, String programDbId, String locationDbId, String seasonDbId, String trialDbId, String studyDbId, List<String> germplasmDbIds, List<String> observationVariableDbIds, Integer page, Integer pageSize, Boolean active, String sortBy, String sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = studiesSearchGetCall(studyType, programDbId, locationDbId, seasonDbId, trialDbId, studyDbId, germplasmDbIds, observationVariableDbIds, page, pageSize, active, sortBy, sortOrder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search Studies (GET)
     * DEPRECATED in v1.3 - see GET /studies
     * @param studyType Filter based on study type e.g. Nursery, Trial or Genotype. (optional)
     * @param programDbId Program filter to only return studies associated with given program id. (optional)
     * @param locationDbId Filter by location (optional)
     * @param seasonDbId Filter by season or year (optional)
     * @param trialDbId Filter by trial (optional)
     * @param studyDbId Filter by study DbId (optional)
     * @param germplasmDbIds Filter studies where specified germplasm have been used/tested (optional)
     * @param observationVariableDbIds Filter studies where specified observation variables have been measured (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param active Filter active status true/false. (optional)
     * @param sortBy Sort order. Name of the field to sort by. (optional)
     * @param sortOrder Sort order direction. Ascending/Descending. (optional)
     * @return StudiesResponse1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StudiesResponse1 studiesSearchGet(String studyType, String programDbId, String locationDbId, String seasonDbId, String trialDbId, String studyDbId, List<String> germplasmDbIds, List<String> observationVariableDbIds, Integer page, Integer pageSize, Boolean active, String sortBy, String sortOrder) throws ApiException {
        ApiResponse<StudiesResponse1> resp = studiesSearchGetWithHttpInfo(studyType, programDbId, locationDbId, seasonDbId, trialDbId, studyDbId, germplasmDbIds, observationVariableDbIds, page, pageSize, active, sortBy, sortOrder);
        return resp.getData();
    }

    /**
     * Search Studies (GET)
     * DEPRECATED in v1.3 - see GET /studies
     * @param studyType Filter based on study type e.g. Nursery, Trial or Genotype. (optional)
     * @param programDbId Program filter to only return studies associated with given program id. (optional)
     * @param locationDbId Filter by location (optional)
     * @param seasonDbId Filter by season or year (optional)
     * @param trialDbId Filter by trial (optional)
     * @param studyDbId Filter by study DbId (optional)
     * @param germplasmDbIds Filter studies where specified germplasm have been used/tested (optional)
     * @param observationVariableDbIds Filter studies where specified observation variables have been measured (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param active Filter active status true/false. (optional)
     * @param sortBy Sort order. Name of the field to sort by. (optional)
     * @param sortOrder Sort order direction. Ascending/Descending. (optional)
     * @return ApiResponse&lt;StudiesResponse1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StudiesResponse1> studiesSearchGetWithHttpInfo(String studyType, String programDbId, String locationDbId, String seasonDbId, String trialDbId, String studyDbId, List<String> germplasmDbIds, List<String> observationVariableDbIds, Integer page, Integer pageSize, Boolean active, String sortBy, String sortOrder) throws ApiException {
        com.squareup.okhttp.Call call = studiesSearchGetValidateBeforeCall(studyType, programDbId, locationDbId, seasonDbId, trialDbId, studyDbId, germplasmDbIds, observationVariableDbIds, page, pageSize, active, sortBy, sortOrder, null, null);
        Type localVarReturnType = new TypeToken<StudiesResponse1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Studies (GET) (asynchronously)
     * DEPRECATED in v1.3 - see GET /studies
     * @param studyType Filter based on study type e.g. Nursery, Trial or Genotype. (optional)
     * @param programDbId Program filter to only return studies associated with given program id. (optional)
     * @param locationDbId Filter by location (optional)
     * @param seasonDbId Filter by season or year (optional)
     * @param trialDbId Filter by trial (optional)
     * @param studyDbId Filter by study DbId (optional)
     * @param germplasmDbIds Filter studies where specified germplasm have been used/tested (optional)
     * @param observationVariableDbIds Filter studies where specified observation variables have been measured (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param active Filter active status true/false. (optional)
     * @param sortBy Sort order. Name of the field to sort by. (optional)
     * @param sortOrder Sort order direction. Ascending/Descending. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesSearchGetAsync(String studyType, String programDbId, String locationDbId, String seasonDbId, String trialDbId, String studyDbId, List<String> germplasmDbIds, List<String> observationVariableDbIds, Integer page, Integer pageSize, Boolean active, String sortBy, String sortOrder, final ApiCallback<StudiesResponse1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesSearchGetValidateBeforeCall(studyType, programDbId, locationDbId, seasonDbId, trialDbId, studyDbId, germplasmDbIds, observationVariableDbIds, page, pageSize, active, sortBy, sortOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StudiesResponse1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesSearchPost
     * @param body Study Search request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesSearchPostCall(StudySearchRequestDep body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/studies-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesSearchPostValidateBeforeCall(StudySearchRequestDep body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = studiesSearchPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search Studies (GET)
     * DEPRECATED in v1.3 - see /search/studies
     * @param body Study Search request (optional)
     * @return StudiesResponse1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StudiesResponse1 studiesSearchPost(StudySearchRequestDep body) throws ApiException {
        ApiResponse<StudiesResponse1> resp = studiesSearchPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Search Studies (GET)
     * DEPRECATED in v1.3 - see /search/studies
     * @param body Study Search request (optional)
     * @return ApiResponse&lt;StudiesResponse1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StudiesResponse1> studiesSearchPostWithHttpInfo(StudySearchRequestDep body) throws ApiException {
        com.squareup.okhttp.Call call = studiesSearchPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<StudiesResponse1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Studies (GET) (asynchronously)
     * DEPRECATED in v1.3 - see /search/studies
     * @param body Study Search request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesSearchPostAsync(StudySearchRequestDep body, final ApiCallback<StudiesResponse1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesSearchPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StudiesResponse1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesStudyDbIdGermplasmGet
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdGermplasmGetCall(String studyDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/studies/{studyDbId}/germplasm"
            .replaceAll("\\{" + "studyDbId" + "\\}", apiClient.escapeString(studyDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesStudyDbIdGermplasmGetValidateBeforeCall(String studyDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'studyDbId' is set
        if (studyDbId == null) {
            throw new ApiException("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdGermplasmGet(Async)");
        }
        
        com.squareup.okhttp.Call call = studiesStudyDbIdGermplasmGetCall(studyDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Germplasm associated with a specific Study
     * Get the available Germplasm which are associated with this study
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmSummaryListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GermplasmSummaryListResponse studiesStudyDbIdGermplasmGet(String studyDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<GermplasmSummaryListResponse> resp = studiesStudyDbIdGermplasmGetWithHttpInfo(studyDbId, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the Germplasm associated with a specific Study
     * Get the available Germplasm which are associated with this study
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;GermplasmSummaryListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GermplasmSummaryListResponse> studiesStudyDbIdGermplasmGetWithHttpInfo(String studyDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = studiesStudyDbIdGermplasmGetValidateBeforeCall(studyDbId, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<GermplasmSummaryListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Germplasm associated with a specific Study (asynchronously)
     * Get the available Germplasm which are associated with this study
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdGermplasmGetAsync(String studyDbId, Integer page, Integer pageSize, String authorization, final ApiCallback<GermplasmSummaryListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesStudyDbIdGermplasmGetValidateBeforeCall(studyDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GermplasmSummaryListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesStudyDbIdGet
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdGetCall(String studyDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/studies/{studyDbId}"
            .replaceAll("\\{" + "studyDbId" + "\\}", apiClient.escapeString(studyDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesStudyDbIdGetValidateBeforeCall(String studyDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'studyDbId' is set
        if (studyDbId == null) {
            throw new ApiException("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = studiesStudyDbIdGetCall(studyDbId, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the details for a specific Study
     * Retrieve the information of the study required for field data collection  An additionalInfo field was added to provide a controlled vocabulary for less common data fields.  Linked data  - Observation Variables: &#x60;&#x60;&#x60;/brapi/v1/studies/{studyDbId}/observationvariables&#x60;&#x60;&#x60;   - Germplasm: &#x60;&#x60;&#x60;/brapi/v1/studies/{studyDbId}/germplasm&#x60;&#x60;&#x60;   - Observation Units: &#x60;&#x60;&#x60;/brapi/v1/studies/{studyDbId}/observationunits&#x60;&#x60;&#x60;   - Layout: &#x60;&#x60;&#x60;brapi/v1/studies/{studyDbId}/layout&#x60;&#x60;&#x60;
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return StudyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StudyResponse studiesStudyDbIdGet(String studyDbId, String authorization) throws ApiException {
        ApiResponse<StudyResponse> resp = studiesStudyDbIdGetWithHttpInfo(studyDbId, authorization);
        return resp.getData();
    }

    /**
     * Get the details for a specific Study
     * Retrieve the information of the study required for field data collection  An additionalInfo field was added to provide a controlled vocabulary for less common data fields.  Linked data  - Observation Variables: &#x60;&#x60;&#x60;/brapi/v1/studies/{studyDbId}/observationvariables&#x60;&#x60;&#x60;   - Germplasm: &#x60;&#x60;&#x60;/brapi/v1/studies/{studyDbId}/germplasm&#x60;&#x60;&#x60;   - Observation Units: &#x60;&#x60;&#x60;/brapi/v1/studies/{studyDbId}/observationunits&#x60;&#x60;&#x60;   - Layout: &#x60;&#x60;&#x60;brapi/v1/studies/{studyDbId}/layout&#x60;&#x60;&#x60;
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;StudyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StudyResponse> studiesStudyDbIdGetWithHttpInfo(String studyDbId, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = studiesStudyDbIdGetValidateBeforeCall(studyDbId, authorization, null, null);
        Type localVarReturnType = new TypeToken<StudyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the details for a specific Study (asynchronously)
     * Retrieve the information of the study required for field data collection  An additionalInfo field was added to provide a controlled vocabulary for less common data fields.  Linked data  - Observation Variables: &#x60;&#x60;&#x60;/brapi/v1/studies/{studyDbId}/observationvariables&#x60;&#x60;&#x60;   - Germplasm: &#x60;&#x60;&#x60;/brapi/v1/studies/{studyDbId}/germplasm&#x60;&#x60;&#x60;   - Observation Units: &#x60;&#x60;&#x60;/brapi/v1/studies/{studyDbId}/observationunits&#x60;&#x60;&#x60;   - Layout: &#x60;&#x60;&#x60;brapi/v1/studies/{studyDbId}/layout&#x60;&#x60;&#x60;
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdGetAsync(String studyDbId, String authorization, final ApiCallback<StudyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesStudyDbIdGetValidateBeforeCall(studyDbId, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StudyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesStudyDbIdLayoutGet
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdLayoutGetCall(String studyDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/studies/{studyDbId}/layout"
            .replaceAll("\\{" + "studyDbId" + "\\}", apiClient.escapeString(studyDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesStudyDbIdLayoutGetValidateBeforeCall(String studyDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'studyDbId' is set
        if (studyDbId == null) {
            throw new ApiException("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdLayoutGet(Async)");
        }
        
        com.squareup.okhttp.Call call = studiesStudyDbIdLayoutGetCall(studyDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the plot layout details for a specific Study
     * DEPRECATED in v1.3 - see &#x60;GET /studies/{studyDbId}/layouts&#x60; (pluralized)
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ObservationUnitPositionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObservationUnitPositionsResponse studiesStudyDbIdLayoutGet(String studyDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<ObservationUnitPositionsResponse> resp = studiesStudyDbIdLayoutGetWithHttpInfo(studyDbId, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the plot layout details for a specific Study
     * DEPRECATED in v1.3 - see &#x60;GET /studies/{studyDbId}/layouts&#x60; (pluralized)
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;ObservationUnitPositionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObservationUnitPositionsResponse> studiesStudyDbIdLayoutGetWithHttpInfo(String studyDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = studiesStudyDbIdLayoutGetValidateBeforeCall(studyDbId, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<ObservationUnitPositionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the plot layout details for a specific Study (asynchronously)
     * DEPRECATED in v1.3 - see &#x60;GET /studies/{studyDbId}/layouts&#x60; (pluralized)
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdLayoutGetAsync(String studyDbId, Integer page, Integer pageSize, String authorization, final ApiCallback<ObservationUnitPositionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesStudyDbIdLayoutGetValidateBeforeCall(studyDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObservationUnitPositionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesStudyDbIdLayoutPut
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param body The request body for updateing a study layout (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdLayoutPutCall(String studyDbId, StudyLayoutRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/studies/{studyDbId}/layout"
            .replaceAll("\\{" + "studyDbId" + "\\}", apiClient.escapeString(studyDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesStudyDbIdLayoutPutValidateBeforeCall(String studyDbId, StudyLayoutRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'studyDbId' is set
        if (studyDbId == null) {
            throw new ApiException("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdLayoutPut(Async)");
        }
        
        com.squareup.okhttp.Call call = studiesStudyDbIdLayoutPutCall(studyDbId, body, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an existing Study with new layout details
     * DEPRECATED in v1.3 - see &#x60;PUT /studies/{studyDbId}/layouts&#x60; (pluralized)
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param body The request body for updateing a study layout (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ObservationUnitPositionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObservationUnitPositionsResponse studiesStudyDbIdLayoutPut(String studyDbId, StudyLayoutRequest body, String authorization) throws ApiException {
        ApiResponse<ObservationUnitPositionsResponse> resp = studiesStudyDbIdLayoutPutWithHttpInfo(studyDbId, body, authorization);
        return resp.getData();
    }

    /**
     * Update an existing Study with new layout details
     * DEPRECATED in v1.3 - see &#x60;PUT /studies/{studyDbId}/layouts&#x60; (pluralized)
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param body The request body for updateing a study layout (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;ObservationUnitPositionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObservationUnitPositionsResponse> studiesStudyDbIdLayoutPutWithHttpInfo(String studyDbId, StudyLayoutRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = studiesStudyDbIdLayoutPutValidateBeforeCall(studyDbId, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<ObservationUnitPositionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an existing Study with new layout details (asynchronously)
     * DEPRECATED in v1.3 - see &#x60;PUT /studies/{studyDbId}/layouts&#x60; (pluralized)
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param body The request body for updateing a study layout (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdLayoutPutAsync(String studyDbId, StudyLayoutRequest body, String authorization, final ApiCallback<ObservationUnitPositionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesStudyDbIdLayoutPutValidateBeforeCall(studyDbId, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObservationUnitPositionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesStudyDbIdLayoutsGet
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdLayoutsGetCall(String studyDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/studies/{studyDbId}/layouts"
            .replaceAll("\\{" + "studyDbId" + "\\}", apiClient.escapeString(studyDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesStudyDbIdLayoutsGetValidateBeforeCall(String studyDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'studyDbId' is set
        if (studyDbId == null) {
            throw new ApiException("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdLayoutsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = studiesStudyDbIdLayoutsGetCall(studyDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the plot layout details for a specific Study
     * Retrive the layout details for a study. Returns an array of observation unit position data which describes where each unit and germplasm is located within the study layout  Retrieve the plot layout of the study with id {id}.  For each observationUnit within a study, return the &#x60;block&#x60;, &#x60;replicate&#x60;, and &#x60;entryType&#x60; values as well as the &#x60;X&#x60; and &#x60;Y&#x60; coordinates. &#x60;entryType&#x60; can be \&quot;check\&quot;, \&quot;test\&quot;, or \&quot;filler\&quot;.  Also return some human readable meta data about the observationUnit and germplasm.
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ObservationUnitPositionsResponse1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObservationUnitPositionsResponse1 studiesStudyDbIdLayoutsGet(String studyDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<ObservationUnitPositionsResponse1> resp = studiesStudyDbIdLayoutsGetWithHttpInfo(studyDbId, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the plot layout details for a specific Study
     * Retrive the layout details for a study. Returns an array of observation unit position data which describes where each unit and germplasm is located within the study layout  Retrieve the plot layout of the study with id {id}.  For each observationUnit within a study, return the &#x60;block&#x60;, &#x60;replicate&#x60;, and &#x60;entryType&#x60; values as well as the &#x60;X&#x60; and &#x60;Y&#x60; coordinates. &#x60;entryType&#x60; can be \&quot;check\&quot;, \&quot;test\&quot;, or \&quot;filler\&quot;.  Also return some human readable meta data about the observationUnit and germplasm.
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;ObservationUnitPositionsResponse1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObservationUnitPositionsResponse1> studiesStudyDbIdLayoutsGetWithHttpInfo(String studyDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = studiesStudyDbIdLayoutsGetValidateBeforeCall(studyDbId, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<ObservationUnitPositionsResponse1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the plot layout details for a specific Study (asynchronously)
     * Retrive the layout details for a study. Returns an array of observation unit position data which describes where each unit and germplasm is located within the study layout  Retrieve the plot layout of the study with id {id}.  For each observationUnit within a study, return the &#x60;block&#x60;, &#x60;replicate&#x60;, and &#x60;entryType&#x60; values as well as the &#x60;X&#x60; and &#x60;Y&#x60; coordinates. &#x60;entryType&#x60; can be \&quot;check\&quot;, \&quot;test\&quot;, or \&quot;filler\&quot;.  Also return some human readable meta data about the observationUnit and germplasm.
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdLayoutsGetAsync(String studyDbId, Integer page, Integer pageSize, String authorization, final ApiCallback<ObservationUnitPositionsResponse1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesStudyDbIdLayoutsGetValidateBeforeCall(studyDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObservationUnitPositionsResponse1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesStudyDbIdLayoutsPut
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param body The request body for updateing a study layout (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdLayoutsPutCall(String studyDbId, StudyLayoutRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/studies/{studyDbId}/layouts"
            .replaceAll("\\{" + "studyDbId" + "\\}", apiClient.escapeString(studyDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesStudyDbIdLayoutsPutValidateBeforeCall(String studyDbId, StudyLayoutRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'studyDbId' is set
        if (studyDbId == null) {
            throw new ApiException("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdLayoutsPut(Async)");
        }
        
        com.squareup.okhttp.Call call = studiesStudyDbIdLayoutsPutCall(studyDbId, body, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an existing Study with new layout details
     * Modify a study layout  Update the layout data for a set of observation units within a study. Each layout object is a subset of fields within an observationUnit, so it doesnt make sense to create a new layout object by itself.  Implementation Notes:  + If any of the fields in the request object is missing, that piece of data will not be updated.   + If an observationUnitDbId can not be found within the given study, an error will be returned.   + &#x60;entryType&#x60; can have the values \&quot;check\&quot;, \&quot;test\&quot;, or \&quot;filler\&quot;.   + The response should match the structure of the response from &#x60;GET studies/{studyDbId}/layout&#x60;, but it should only contain the layout objects which have been updated by the PUT request. Also, pagination is not available in the response.
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param body The request body for updateing a study layout (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ObservationUnitPositionsResponse1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObservationUnitPositionsResponse1 studiesStudyDbIdLayoutsPut(String studyDbId, StudyLayoutRequest body, String authorization) throws ApiException {
        ApiResponse<ObservationUnitPositionsResponse1> resp = studiesStudyDbIdLayoutsPutWithHttpInfo(studyDbId, body, authorization);
        return resp.getData();
    }

    /**
     * Update an existing Study with new layout details
     * Modify a study layout  Update the layout data for a set of observation units within a study. Each layout object is a subset of fields within an observationUnit, so it doesnt make sense to create a new layout object by itself.  Implementation Notes:  + If any of the fields in the request object is missing, that piece of data will not be updated.   + If an observationUnitDbId can not be found within the given study, an error will be returned.   + &#x60;entryType&#x60; can have the values \&quot;check\&quot;, \&quot;test\&quot;, or \&quot;filler\&quot;.   + The response should match the structure of the response from &#x60;GET studies/{studyDbId}/layout&#x60;, but it should only contain the layout objects which have been updated by the PUT request. Also, pagination is not available in the response.
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param body The request body for updateing a study layout (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;ObservationUnitPositionsResponse1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObservationUnitPositionsResponse1> studiesStudyDbIdLayoutsPutWithHttpInfo(String studyDbId, StudyLayoutRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = studiesStudyDbIdLayoutsPutValidateBeforeCall(studyDbId, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<ObservationUnitPositionsResponse1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an existing Study with new layout details (asynchronously)
     * Modify a study layout  Update the layout data for a set of observation units within a study. Each layout object is a subset of fields within an observationUnit, so it doesnt make sense to create a new layout object by itself.  Implementation Notes:  + If any of the fields in the request object is missing, that piece of data will not be updated.   + If an observationUnitDbId can not be found within the given study, an error will be returned.   + &#x60;entryType&#x60; can have the values \&quot;check\&quot;, \&quot;test\&quot;, or \&quot;filler\&quot;.   + The response should match the structure of the response from &#x60;GET studies/{studyDbId}/layout&#x60;, but it should only contain the layout objects which have been updated by the PUT request. Also, pagination is not available in the response.
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param body The request body for updateing a study layout (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdLayoutsPutAsync(String studyDbId, StudyLayoutRequest body, String authorization, final ApiCallback<ObservationUnitPositionsResponse1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesStudyDbIdLayoutsPutValidateBeforeCall(studyDbId, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObservationUnitPositionsResponse1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesStudyDbIdObservationVariablesGet
     * @param studyDbId string database unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdObservationVariablesGetCall(String studyDbId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/studies/{studyDbId}/observationVariables"
            .replaceAll("\\{" + "studyDbId" + "\\}", apiClient.escapeString(studyDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesStudyDbIdObservationVariablesGetValidateBeforeCall(String studyDbId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'studyDbId' is set
        if (studyDbId == null) {
            throw new ApiException("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationVariablesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = studiesStudyDbIdObservationVariablesGetCall(studyDbId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deprecated Retrieve study observation variables
     *    test-server.brapi.org/brapi/v1/studies/{studyDbId}/observationVariables
     * @param studyDbId string database unique identifier (required)
     * @return StudyObservationVariablesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StudyObservationVariablesResponse studiesStudyDbIdObservationVariablesGet(String studyDbId) throws ApiException {
        ApiResponse<StudyObservationVariablesResponse> resp = studiesStudyDbIdObservationVariablesGetWithHttpInfo(studyDbId);
        return resp.getData();
    }

    /**
     * Deprecated Retrieve study observation variables
     *    test-server.brapi.org/brapi/v1/studies/{studyDbId}/observationVariables
     * @param studyDbId string database unique identifier (required)
     * @return ApiResponse&lt;StudyObservationVariablesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StudyObservationVariablesResponse> studiesStudyDbIdObservationVariablesGetWithHttpInfo(String studyDbId) throws ApiException {
        com.squareup.okhttp.Call call = studiesStudyDbIdObservationVariablesGetValidateBeforeCall(studyDbId, null, null);
        Type localVarReturnType = new TypeToken<StudyObservationVariablesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deprecated Retrieve study observation variables (asynchronously)
     *    test-server.brapi.org/brapi/v1/studies/{studyDbId}/observationVariables
     * @param studyDbId string database unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdObservationVariablesGetAsync(String studyDbId, final ApiCallback<StudyObservationVariablesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesStudyDbIdObservationVariablesGetValidateBeforeCall(studyDbId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StudyObservationVariablesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesStudyDbIdObservationsGet
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param observationVariableDbIds Numeric &#x60;id&#x60; of that variable (combination of trait, unit and method) (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdObservationsGetCall(String studyDbId, List<String> observationVariableDbIds, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/studies/{studyDbId}/observations"
            .replaceAll("\\{" + "studyDbId" + "\\}", apiClient.escapeString(studyDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (observationVariableDbIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "observationVariableDbIds", observationVariableDbIds));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesStudyDbIdObservationsGetValidateBeforeCall(String studyDbId, List<String> observationVariableDbIds, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'studyDbId' is set
        if (studyDbId == null) {
            throw new ApiException("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = studiesStudyDbIdObservationsGetCall(studyDbId, observationVariableDbIds, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Observations associated with a specific Study
     * Retrieve all observations where there are measurements for the given observation variables.  observationTimestamp should be ISO8601 format with timezone -&gt; YYYY-MM-DDThh:mm:ss+hhmm
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param observationVariableDbIds Numeric &#x60;id&#x60; of that variable (combination of trait, unit and method) (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ObservationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObservationsResponse studiesStudyDbIdObservationsGet(String studyDbId, List<String> observationVariableDbIds, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<ObservationsResponse> resp = studiesStudyDbIdObservationsGetWithHttpInfo(studyDbId, observationVariableDbIds, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the Observations associated with a specific Study
     * Retrieve all observations where there are measurements for the given observation variables.  observationTimestamp should be ISO8601 format with timezone -&gt; YYYY-MM-DDThh:mm:ss+hhmm
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param observationVariableDbIds Numeric &#x60;id&#x60; of that variable (combination of trait, unit and method) (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;ObservationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObservationsResponse> studiesStudyDbIdObservationsGetWithHttpInfo(String studyDbId, List<String> observationVariableDbIds, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = studiesStudyDbIdObservationsGetValidateBeforeCall(studyDbId, observationVariableDbIds, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<ObservationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Observations associated with a specific Study (asynchronously)
     * Retrieve all observations where there are measurements for the given observation variables.  observationTimestamp should be ISO8601 format with timezone -&gt; YYYY-MM-DDThh:mm:ss+hhmm
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param observationVariableDbIds Numeric &#x60;id&#x60; of that variable (combination of trait, unit and method) (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdObservationsGetAsync(String studyDbId, List<String> observationVariableDbIds, Integer page, Integer pageSize, String authorization, final ApiCallback<ObservationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesStudyDbIdObservationsGetValidateBeforeCall(studyDbId, observationVariableDbIds, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObservationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesStudyDbIdObservationsPut
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdObservationsPutCall(String studyDbId, NewObservationsRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/studies/{studyDbId}/observations"
            .replaceAll("\\{" + "studyDbId" + "\\}", apiClient.escapeString(studyDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesStudyDbIdObservationsPutValidateBeforeCall(String studyDbId, NewObservationsRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'studyDbId' is set
        if (studyDbId == null) {
            throw new ApiException("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationsPut(Async)");
        }
        
        com.squareup.okhttp.Call call = studiesStudyDbIdObservationsPutCall(studyDbId, body, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the Observations of a specific Study
     * Implementation Guidelines:   + If an &#x60;observationDbId&#x60; is \&quot;null\&quot; or an empty string in the request, a NEW observation should be created for the given study and observationUnit   + If an &#x60;observationDbId&#x60; is populated but not found in the database, a NEW observation should be created for the given study and observationUnit AND an NEW &#x60;observationDbId&#x60; should be assigned to it. A warning should be returned to the client.   + If an &#x60;observationDbId&#x60; is populated and found in the database, but the existing entry is not associated with the given study or observationUnit, a NEW observation should be created for the given study and observationUnit AND an NEW &#x60;observationDbId&#x60; should be assigned to it. A warning should be returned to the client.   + If an &#x60;observationDbId&#x60; is populated and found in the database and is associated with the given study and observationUnit, then it should be updated with the new data given.
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return NewObservationDbIdsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NewObservationDbIdsResponse studiesStudyDbIdObservationsPut(String studyDbId, NewObservationsRequest body, String authorization) throws ApiException {
        ApiResponse<NewObservationDbIdsResponse> resp = studiesStudyDbIdObservationsPutWithHttpInfo(studyDbId, body, authorization);
        return resp.getData();
    }

    /**
     * Update the Observations of a specific Study
     * Implementation Guidelines:   + If an &#x60;observationDbId&#x60; is \&quot;null\&quot; or an empty string in the request, a NEW observation should be created for the given study and observationUnit   + If an &#x60;observationDbId&#x60; is populated but not found in the database, a NEW observation should be created for the given study and observationUnit AND an NEW &#x60;observationDbId&#x60; should be assigned to it. A warning should be returned to the client.   + If an &#x60;observationDbId&#x60; is populated and found in the database, but the existing entry is not associated with the given study or observationUnit, a NEW observation should be created for the given study and observationUnit AND an NEW &#x60;observationDbId&#x60; should be assigned to it. A warning should be returned to the client.   + If an &#x60;observationDbId&#x60; is populated and found in the database and is associated with the given study and observationUnit, then it should be updated with the new data given.
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;NewObservationDbIdsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NewObservationDbIdsResponse> studiesStudyDbIdObservationsPutWithHttpInfo(String studyDbId, NewObservationsRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = studiesStudyDbIdObservationsPutValidateBeforeCall(studyDbId, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<NewObservationDbIdsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the Observations of a specific Study (asynchronously)
     * Implementation Guidelines:   + If an &#x60;observationDbId&#x60; is \&quot;null\&quot; or an empty string in the request, a NEW observation should be created for the given study and observationUnit   + If an &#x60;observationDbId&#x60; is populated but not found in the database, a NEW observation should be created for the given study and observationUnit AND an NEW &#x60;observationDbId&#x60; should be assigned to it. A warning should be returned to the client.   + If an &#x60;observationDbId&#x60; is populated and found in the database, but the existing entry is not associated with the given study or observationUnit, a NEW observation should be created for the given study and observationUnit AND an NEW &#x60;observationDbId&#x60; should be assigned to it. A warning should be returned to the client.   + If an &#x60;observationDbId&#x60; is populated and found in the database and is associated with the given study and observationUnit, then it should be updated with the new data given.
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdObservationsPutAsync(String studyDbId, NewObservationsRequest body, String authorization, final ApiCallback<NewObservationDbIdsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesStudyDbIdObservationsPutValidateBeforeCall(studyDbId, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NewObservationDbIdsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesStudyDbIdObservationunitsGet
     * @param studyDbId The study these observation units are related to. (required)
     * @param observationLevel The granularity level of observation units. Either &#x60;plotNumber&#x60; or &#x60;plantNumber&#x60; fields will be relavant depending on whether granularity is plot or plant respectively. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdObservationunitsGetCall(String studyDbId, String observationLevel, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/studies/{studyDbId}/observationunits"
            .replaceAll("\\{" + "studyDbId" + "\\}", apiClient.escapeString(studyDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (observationLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("observationLevel", observationLevel));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesStudyDbIdObservationunitsGetValidateBeforeCall(String studyDbId, String observationLevel, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'studyDbId' is set
        if (studyDbId == null) {
            throw new ApiException("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = studiesStudyDbIdObservationunitsGetCall(studyDbId, observationLevel, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Observation Units associated with a specific Study
     * The main API call for field data collection, to retrieve all the observation units within a study.
     * @param studyDbId The study these observation units are related to. (required)
     * @param observationLevel The granularity level of observation units. Either &#x60;plotNumber&#x60; or &#x60;plantNumber&#x60; fields will be relavant depending on whether granularity is plot or plant respectively. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ObservationUnitsResponse2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObservationUnitsResponse2 studiesStudyDbIdObservationunitsGet(String studyDbId, String observationLevel, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<ObservationUnitsResponse2> resp = studiesStudyDbIdObservationunitsGetWithHttpInfo(studyDbId, observationLevel, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the Observation Units associated with a specific Study
     * The main API call for field data collection, to retrieve all the observation units within a study.
     * @param studyDbId The study these observation units are related to. (required)
     * @param observationLevel The granularity level of observation units. Either &#x60;plotNumber&#x60; or &#x60;plantNumber&#x60; fields will be relavant depending on whether granularity is plot or plant respectively. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;ObservationUnitsResponse2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObservationUnitsResponse2> studiesStudyDbIdObservationunitsGetWithHttpInfo(String studyDbId, String observationLevel, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = studiesStudyDbIdObservationunitsGetValidateBeforeCall(studyDbId, observationLevel, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<ObservationUnitsResponse2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Observation Units associated with a specific Study (asynchronously)
     * The main API call for field data collection, to retrieve all the observation units within a study.
     * @param studyDbId The study these observation units are related to. (required)
     * @param observationLevel The granularity level of observation units. Either &#x60;plotNumber&#x60; or &#x60;plantNumber&#x60; fields will be relavant depending on whether granularity is plot or plant respectively. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdObservationunitsGetAsync(String studyDbId, String observationLevel, Integer page, Integer pageSize, String authorization, final ApiCallback<ObservationUnitsResponse2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesStudyDbIdObservationunitsGetValidateBeforeCall(studyDbId, observationLevel, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObservationUnitsResponse2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesStudyDbIdObservationunitsPost
     * @param format (default is JSON, but can be zip) In case where JSON data is zipped for faster transfer speed (as in the case of the IRRI handheld implementation), the zipped JSON file will be listed in datafiles. The zipped file contains a JSON file with the same structure as the BrAPI call. (required)
     * @param studyDbId The study these observation units are related to. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdObservationunitsPostCall(String format, String studyDbId, NewObservationsRequestWrapperDeprecated body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/studies/{studyDbId}/observationunits"
            .replaceAll("\\{" + "studyDbId" + "\\}", apiClient.escapeString(studyDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesStudyDbIdObservationunitsPostValidateBeforeCall(String format, String studyDbId, NewObservationsRequestWrapperDeprecated body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling studiesStudyDbIdObservationunitsPost(Async)");
        }
        // verify the required parameter 'studyDbId' is set
        if (studyDbId == null) {
            throw new ApiException("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = studiesStudyDbIdObservationunitsPostCall(format, studyDbId, body, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deprecated Save Observation Unit Phenotypes
     * This call has been deprecated in V1.1. Use instead: \&quot;PUT /studies/{studyDbId}/observationunits\&quot; and \&quot;PUT /studies/{studyDbId}/observationunits/zip\&quot;
     * @param format (default is JSON, but can be zip) In case where JSON data is zipped for faster transfer speed (as in the case of the IRRI handheld implementation), the zipped JSON file will be listed in datafiles. The zipped file contains a JSON file with the same structure as the BrAPI call. (required)
     * @param studyDbId The study these observation units are related to. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return NewObservationUnitDbIdsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NewObservationUnitDbIdsResponse studiesStudyDbIdObservationunitsPost(String format, String studyDbId, NewObservationsRequestWrapperDeprecated body, String authorization) throws ApiException {
        ApiResponse<NewObservationUnitDbIdsResponse> resp = studiesStudyDbIdObservationunitsPostWithHttpInfo(format, studyDbId, body, authorization);
        return resp.getData();
    }

    /**
     * Deprecated Save Observation Unit Phenotypes
     * This call has been deprecated in V1.1. Use instead: \&quot;PUT /studies/{studyDbId}/observationunits\&quot; and \&quot;PUT /studies/{studyDbId}/observationunits/zip\&quot;
     * @param format (default is JSON, but can be zip) In case where JSON data is zipped for faster transfer speed (as in the case of the IRRI handheld implementation), the zipped JSON file will be listed in datafiles. The zipped file contains a JSON file with the same structure as the BrAPI call. (required)
     * @param studyDbId The study these observation units are related to. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;NewObservationUnitDbIdsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NewObservationUnitDbIdsResponse> studiesStudyDbIdObservationunitsPostWithHttpInfo(String format, String studyDbId, NewObservationsRequestWrapperDeprecated body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = studiesStudyDbIdObservationunitsPostValidateBeforeCall(format, studyDbId, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<NewObservationUnitDbIdsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deprecated Save Observation Unit Phenotypes (asynchronously)
     * This call has been deprecated in V1.1. Use instead: \&quot;PUT /studies/{studyDbId}/observationunits\&quot; and \&quot;PUT /studies/{studyDbId}/observationunits/zip\&quot;
     * @param format (default is JSON, but can be zip) In case where JSON data is zipped for faster transfer speed (as in the case of the IRRI handheld implementation), the zipped JSON file will be listed in datafiles. The zipped file contains a JSON file with the same structure as the BrAPI call. (required)
     * @param studyDbId The study these observation units are related to. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdObservationunitsPostAsync(String format, String studyDbId, NewObservationsRequestWrapperDeprecated body, String authorization, final ApiCallback<NewObservationUnitDbIdsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesStudyDbIdObservationunitsPostValidateBeforeCall(format, studyDbId, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NewObservationUnitDbIdsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesStudyDbIdObservationunitsPut
     * @param studyDbId The study these observation units are related to. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdObservationunitsPutCall(String studyDbId, List<NewObservationUnitRequest> body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/studies/{studyDbId}/observationunits"
            .replaceAll("\\{" + "studyDbId" + "\\}", apiClient.escapeString(studyDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesStudyDbIdObservationunitsPutValidateBeforeCall(String studyDbId, List<NewObservationUnitRequest> body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'studyDbId' is set
        if (studyDbId == null) {
            throw new ApiException("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsPut(Async)");
        }
        
        com.squareup.okhttp.Call call = studiesStudyDbIdObservationunitsPutCall(studyDbId, body, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the Observation Units for a specific Study
     * Use this call for uploading new Observations as JSON to a system.  Note: If &#x27;&#x27;observationUnitDbId&#x27;&#x27; or &#x27;&#x27;observationDbId&#x27;&#x27; is populated, they should be considered updates to existing records.  If an existing record of that DbId is not found, the document should be treated as new records and assigned new DbIds.  If &#x27;&#x27;observationUnitDbId&#x27;&#x27; or &#x27;&#x27;observationDbId&#x27;&#x27; is un-populated (empty string or null) the document should be treated as new records and assigned new DbIds.
     * @param studyDbId The study these observation units are related to. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return NewObservationUnitDbIdsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NewObservationUnitDbIdsResponse studiesStudyDbIdObservationunitsPut(String studyDbId, List<NewObservationUnitRequest> body, String authorization) throws ApiException {
        ApiResponse<NewObservationUnitDbIdsResponse> resp = studiesStudyDbIdObservationunitsPutWithHttpInfo(studyDbId, body, authorization);
        return resp.getData();
    }

    /**
     * Update the Observation Units for a specific Study
     * Use this call for uploading new Observations as JSON to a system.  Note: If &#x27;&#x27;observationUnitDbId&#x27;&#x27; or &#x27;&#x27;observationDbId&#x27;&#x27; is populated, they should be considered updates to existing records.  If an existing record of that DbId is not found, the document should be treated as new records and assigned new DbIds.  If &#x27;&#x27;observationUnitDbId&#x27;&#x27; or &#x27;&#x27;observationDbId&#x27;&#x27; is un-populated (empty string or null) the document should be treated as new records and assigned new DbIds.
     * @param studyDbId The study these observation units are related to. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;NewObservationUnitDbIdsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NewObservationUnitDbIdsResponse> studiesStudyDbIdObservationunitsPutWithHttpInfo(String studyDbId, List<NewObservationUnitRequest> body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = studiesStudyDbIdObservationunitsPutValidateBeforeCall(studyDbId, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<NewObservationUnitDbIdsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the Observation Units for a specific Study (asynchronously)
     * Use this call for uploading new Observations as JSON to a system.  Note: If &#x27;&#x27;observationUnitDbId&#x27;&#x27; or &#x27;&#x27;observationDbId&#x27;&#x27; is populated, they should be considered updates to existing records.  If an existing record of that DbId is not found, the document should be treated as new records and assigned new DbIds.  If &#x27;&#x27;observationUnitDbId&#x27;&#x27; or &#x27;&#x27;observationDbId&#x27;&#x27; is un-populated (empty string or null) the document should be treated as new records and assigned new DbIds.
     * @param studyDbId The study these observation units are related to. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdObservationunitsPutAsync(String studyDbId, List<NewObservationUnitRequest> body, String authorization, final ApiCallback<NewObservationUnitDbIdsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesStudyDbIdObservationunitsPutValidateBeforeCall(studyDbId, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NewObservationUnitDbIdsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesStudyDbIdObservationunitsZipPost
     * @param studyDbId The study these observation units are related to. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdObservationunitsZipPostCall(String studyDbId, Object body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/studies/{studyDbId}/observationunits/zip"
            .replaceAll("\\{" + "studyDbId" + "\\}", apiClient.escapeString(studyDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/zip"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesStudyDbIdObservationunitsZipPostValidateBeforeCall(String studyDbId, Object body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'studyDbId' is set
        if (studyDbId == null) {
            throw new ApiException("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsZipPost(Async)");
        }
        
        com.squareup.okhttp.Call call = studiesStudyDbIdObservationunitsZipPostCall(studyDbId, body, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Use this call for uploading new Observations as a Batched Zip File to a system.
     * If &#x27;&#x27;observationUnitDbId&#x27;&#x27; or &#x27;&#x27;observationDbId&#x27;&#x27; is populated, they should be considered updates to existing records.   If an existing record of that DbId is not found, the document should be treated as new records and assigned new DbIds.   If &#x27;&#x27;observationUnitDbId&#x27;&#x27; or &#x27;&#x27;observationDbId&#x27;&#x27; is un-populated (empty string or null) the document should be treated as new records and assigned new DbIds.
     * @param studyDbId The study these observation units are related to. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return NewObservationUnitDbIdsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NewObservationUnitDbIdsResponse studiesStudyDbIdObservationunitsZipPost(String studyDbId, Object body, String authorization) throws ApiException {
        ApiResponse<NewObservationUnitDbIdsResponse> resp = studiesStudyDbIdObservationunitsZipPostWithHttpInfo(studyDbId, body, authorization);
        return resp.getData();
    }

    /**
     * Use this call for uploading new Observations as a Batched Zip File to a system.
     * If &#x27;&#x27;observationUnitDbId&#x27;&#x27; or &#x27;&#x27;observationDbId&#x27;&#x27; is populated, they should be considered updates to existing records.   If an existing record of that DbId is not found, the document should be treated as new records and assigned new DbIds.   If &#x27;&#x27;observationUnitDbId&#x27;&#x27; or &#x27;&#x27;observationDbId&#x27;&#x27; is un-populated (empty string or null) the document should be treated as new records and assigned new DbIds.
     * @param studyDbId The study these observation units are related to. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;NewObservationUnitDbIdsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NewObservationUnitDbIdsResponse> studiesStudyDbIdObservationunitsZipPostWithHttpInfo(String studyDbId, Object body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = studiesStudyDbIdObservationunitsZipPostValidateBeforeCall(studyDbId, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<NewObservationUnitDbIdsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Use this call for uploading new Observations as a Batched Zip File to a system. (asynchronously)
     * If &#x27;&#x27;observationUnitDbId&#x27;&#x27; or &#x27;&#x27;observationDbId&#x27;&#x27; is populated, they should be considered updates to existing records.   If an existing record of that DbId is not found, the document should be treated as new records and assigned new DbIds.   If &#x27;&#x27;observationUnitDbId&#x27;&#x27; or &#x27;&#x27;observationDbId&#x27;&#x27; is un-populated (empty string or null) the document should be treated as new records and assigned new DbIds.
     * @param studyDbId The study these observation units are related to. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdObservationunitsZipPostAsync(String studyDbId, Object body, String authorization, final ApiCallback<NewObservationUnitDbIdsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesStudyDbIdObservationunitsZipPostValidateBeforeCall(studyDbId, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NewObservationUnitDbIdsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesStudyDbIdObservationvariablesGet
     * @param studyDbId string database unique identifier (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdObservationvariablesGetCall(String studyDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/studies/{studyDbId}/observationvariables"
            .replaceAll("\\{" + "studyDbId" + "\\}", apiClient.escapeString(studyDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesStudyDbIdObservationvariablesGetValidateBeforeCall(String studyDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'studyDbId' is set
        if (studyDbId == null) {
            throw new ApiException("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationvariablesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = studiesStudyDbIdObservationvariablesGetCall(studyDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Observation Variables for a specific Study
     * List all the observation variables measured in the study.  Refer to the data type definition of variables in &#x60;/Specification/ObservationVariables/README.md&#x60;.
     * @param studyDbId string database unique identifier (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return StudyObservationVariablesResponse1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StudyObservationVariablesResponse1 studiesStudyDbIdObservationvariablesGet(String studyDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<StudyObservationVariablesResponse1> resp = studiesStudyDbIdObservationvariablesGetWithHttpInfo(studyDbId, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the Observation Variables for a specific Study
     * List all the observation variables measured in the study.  Refer to the data type definition of variables in &#x60;/Specification/ObservationVariables/README.md&#x60;.
     * @param studyDbId string database unique identifier (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;StudyObservationVariablesResponse1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StudyObservationVariablesResponse1> studiesStudyDbIdObservationvariablesGetWithHttpInfo(String studyDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = studiesStudyDbIdObservationvariablesGetValidateBeforeCall(studyDbId, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<StudyObservationVariablesResponse1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Observation Variables for a specific Study (asynchronously)
     * List all the observation variables measured in the study.  Refer to the data type definition of variables in &#x60;/Specification/ObservationVariables/README.md&#x60;.
     * @param studyDbId string database unique identifier (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdObservationvariablesGetAsync(String studyDbId, Integer page, Integer pageSize, String authorization, final ApiCallback<StudyObservationVariablesResponse1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesStudyDbIdObservationvariablesGetValidateBeforeCall(studyDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StudyObservationVariablesResponse1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesStudyDbIdTableGet
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param format The format parameter will cause the data to be dumped to a file in the specified format. Currently, tsv and csv are supported. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdTableGetCall(String studyDbId, String format, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/studies/{studyDbId}/table"
            .replaceAll("\\{" + "studyDbId" + "\\}", apiClient.escapeString(studyDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/csv", "application/json", "application/tsv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesStudyDbIdTableGetValidateBeforeCall(String studyDbId, String format, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'studyDbId' is set
        if (studyDbId == null) {
            throw new ApiException("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdTableGet(Async)");
        }
        
        com.squareup.okhttp.Call call = studiesStudyDbIdTableGetCall(studyDbId, format, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Observations for a specific Study in a table format
     * Retrieve the details of the study required for field data collection. Includes actual trait data.
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param format The format parameter will cause the data to be dumped to a file in the specified format. Currently, tsv and csv are supported. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String studiesStudyDbIdTableGet(String studyDbId, String format, String authorization) throws ApiException {
        ApiResponse<String> resp = studiesStudyDbIdTableGetWithHttpInfo(studyDbId, format, authorization);
        return resp.getData();
    }

    /**
     * Get the Observations for a specific Study in a table format
     * Retrieve the details of the study required for field data collection. Includes actual trait data.
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param format The format parameter will cause the data to be dumped to a file in the specified format. Currently, tsv and csv are supported. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> studiesStudyDbIdTableGetWithHttpInfo(String studyDbId, String format, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = studiesStudyDbIdTableGetValidateBeforeCall(studyDbId, format, authorization, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Observations for a specific Study in a table format (asynchronously)
     * Retrieve the details of the study required for field data collection. Includes actual trait data.
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param format The format parameter will cause the data to be dumped to a file in the specified format. Currently, tsv and csv are supported. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdTableGetAsync(String studyDbId, String format, String authorization, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesStudyDbIdTableGetValidateBeforeCall(studyDbId, format, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studiesStudyDbIdTablePost
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdTablePostCall(String studyDbId, NewObservationsTableRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/studies/{studyDbId}/table"
            .replaceAll("\\{" + "studyDbId" + "\\}", apiClient.escapeString(studyDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studiesStudyDbIdTablePostValidateBeforeCall(String studyDbId, NewObservationsTableRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'studyDbId' is set
        if (studyDbId == null) {
            throw new ApiException("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdTablePost(Async)");
        }
        
        com.squareup.okhttp.Call call = studiesStudyDbIdTablePostCall(studyDbId, body, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Submit new Observations in a table format for a specific Study
     * This call can be used to create new observations in bulk.  Note: If you need to update any existing observation, please use &#x60;PUT /studies/{studyDbId}/observations&#x60;. This call should only be used to create NEW observations.  Implementation Guidelines:  + All observations submitted through this call should create NEW observation records in the database under the given observation unit.   + Each \&quot;observationUnitDbId\&quot; listed should already exist in the database. If the server can not find a given \&quot;observationUnitDbId\&quot;, it should report an error. (see Error Handling)   + The response of this call should be the set of \&quot;observationDbIds\&quot; created from this call, along with the associated \&quot;observationUnitDbId\&quot; and \&quot;observationVariableDbId\&quot; that each observation is associated with.  + Images can optionally be saved using this call by providing a zipped file of all images in the datafiles. The physical zipped file should be transferred as well in the mulit-part form data.
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return NewObservationDbIdsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NewObservationDbIdsResponse studiesStudyDbIdTablePost(String studyDbId, NewObservationsTableRequest body, String authorization) throws ApiException {
        ApiResponse<NewObservationDbIdsResponse> resp = studiesStudyDbIdTablePostWithHttpInfo(studyDbId, body, authorization);
        return resp.getData();
    }

    /**
     * Submit new Observations in a table format for a specific Study
     * This call can be used to create new observations in bulk.  Note: If you need to update any existing observation, please use &#x60;PUT /studies/{studyDbId}/observations&#x60;. This call should only be used to create NEW observations.  Implementation Guidelines:  + All observations submitted through this call should create NEW observation records in the database under the given observation unit.   + Each \&quot;observationUnitDbId\&quot; listed should already exist in the database. If the server can not find a given \&quot;observationUnitDbId\&quot;, it should report an error. (see Error Handling)   + The response of this call should be the set of \&quot;observationDbIds\&quot; created from this call, along with the associated \&quot;observationUnitDbId\&quot; and \&quot;observationVariableDbId\&quot; that each observation is associated with.  + Images can optionally be saved using this call by providing a zipped file of all images in the datafiles. The physical zipped file should be transferred as well in the mulit-part form data.
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;NewObservationDbIdsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NewObservationDbIdsResponse> studiesStudyDbIdTablePostWithHttpInfo(String studyDbId, NewObservationsTableRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = studiesStudyDbIdTablePostValidateBeforeCall(studyDbId, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<NewObservationDbIdsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submit new Observations in a table format for a specific Study (asynchronously)
     * This call can be used to create new observations in bulk.  Note: If you need to update any existing observation, please use &#x60;PUT /studies/{studyDbId}/observations&#x60;. This call should only be used to create NEW observations.  Implementation Guidelines:  + All observations submitted through this call should create NEW observation records in the database under the given observation unit.   + Each \&quot;observationUnitDbId\&quot; listed should already exist in the database. If the server can not find a given \&quot;observationUnitDbId\&quot;, it should report an error. (see Error Handling)   + The response of this call should be the set of \&quot;observationDbIds\&quot; created from this call, along with the associated \&quot;observationUnitDbId\&quot; and \&quot;observationVariableDbId\&quot; that each observation is associated with.  + Images can optionally be saved using this call by providing a zipped file of all images in the datafiles. The physical zipped file should be transferred as well in the mulit-part form data.
     * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric. (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studiesStudyDbIdTablePostAsync(String studyDbId, NewObservationsTableRequest body, String authorization, final ApiCallback<NewObservationDbIdsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studiesStudyDbIdTablePostValidateBeforeCall(studyDbId, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NewObservationDbIdsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studyTypesGet
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studyTypesGetCall(Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/studyTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studyTypesGetValidateBeforeCall(Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = studyTypesGetCall(page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deprecated List study types
     *  ** DEPRECTED ** Use /studytypes Call to retrieve the list of study types. Scope: PHENOTYPING. Implementation target date: PAG2016 
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @return StudyTypesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StudyTypesResponse studyTypesGet(Integer page, Integer pageSize) throws ApiException {
        ApiResponse<StudyTypesResponse> resp = studyTypesGetWithHttpInfo(page, pageSize);
        return resp.getData();
    }

    /**
     * Deprecated List study types
     *  ** DEPRECTED ** Use /studytypes Call to retrieve the list of study types. Scope: PHENOTYPING. Implementation target date: PAG2016 
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @return ApiResponse&lt;StudyTypesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StudyTypesResponse> studyTypesGetWithHttpInfo(Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = studyTypesGetValidateBeforeCall(page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<StudyTypesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deprecated List study types (asynchronously)
     *  ** DEPRECTED ** Use /studytypes Call to retrieve the list of study types. Scope: PHENOTYPING. Implementation target date: PAG2016 
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studyTypesGetAsync(Integer page, Integer pageSize, final ApiCallback<StudyTypesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studyTypesGetValidateBeforeCall(page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StudyTypesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for studytypesGet
     * @param studyTypeDbId Filter based on study type unique identifier (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call studytypesGetCall(String studyTypeDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/studytypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (studyTypeDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("studyTypeDbId", studyTypeDbId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call studytypesGetValidateBeforeCall(String studyTypeDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = studytypesGetCall(studyTypeDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Study Types
     * Call to retrieve the list of study types.
     * @param studyTypeDbId Filter based on study type unique identifier (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return StudyTypesResponse1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StudyTypesResponse1 studytypesGet(String studyTypeDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<StudyTypesResponse1> resp = studytypesGetWithHttpInfo(studyTypeDbId, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the Study Types
     * Call to retrieve the list of study types.
     * @param studyTypeDbId Filter based on study type unique identifier (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;StudyTypesResponse1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StudyTypesResponse1> studytypesGetWithHttpInfo(String studyTypeDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = studytypesGetValidateBeforeCall(studyTypeDbId, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<StudyTypesResponse1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Study Types (asynchronously)
     * Call to retrieve the list of study types.
     * @param studyTypeDbId Filter based on study type unique identifier (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call studytypesGetAsync(String studyTypeDbId, Integer page, Integer pageSize, String authorization, final ApiCallback<StudyTypesResponse1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = studytypesGetValidateBeforeCall(studyTypeDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StudyTypesResponse1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

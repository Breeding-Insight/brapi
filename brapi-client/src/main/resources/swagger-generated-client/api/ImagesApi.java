/*
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ImageResponse;
import io.swagger.client.model.ImagesResponse;
import io.swagger.client.model.ImagesSearchRequest;
import io.swagger.client.model.NewImageRequest;
import io.swagger.client.model.SuccessfulSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImagesApi {
    private ApiClient apiClient;

    public ImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImagesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for imagesGet
     * @param imageDbId The unique identifier for a image (optional)
     * @param imageName The human readable name of an image (optional)
     * @param observationUnitDbId The unique identifier of the observation unit an image is portraying (optional)
     * @param observationDbId The unique identifier of the observation an image is accosiated with (optional)
     * @param descriptiveOntologyTerm A descriptive term associated with an image (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call imagesGetCall(String imageDbId, String imageName, String observationUnitDbId, String observationDbId, String descriptiveOntologyTerm, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (imageDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageDbId", imageDbId));
        if (imageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageName", imageName));
        if (observationUnitDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("observationUnitDbId", observationUnitDbId));
        if (observationDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("observationDbId", observationDbId));
        if (descriptiveOntologyTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("descriptiveOntologyTerm", descriptiveOntologyTerm));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call imagesGetValidateBeforeCall(String imageDbId, String imageName, String observationUnitDbId, String observationDbId, String descriptiveOntologyTerm, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = imagesGetCall(imageDbId, imageName, observationUnitDbId, observationDbId, descriptiveOntologyTerm, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the image meta data summaries
     * Get filtered set of image meta data  Implementation Notes  - &#x27;imageURL&#x27; should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.  - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s.  
     * @param imageDbId The unique identifier for a image (optional)
     * @param imageName The human readable name of an image (optional)
     * @param observationUnitDbId The unique identifier of the observation unit an image is portraying (optional)
     * @param observationDbId The unique identifier of the observation an image is accosiated with (optional)
     * @param descriptiveOntologyTerm A descriptive term associated with an image (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ImagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImagesResponse imagesGet(String imageDbId, String imageName, String observationUnitDbId, String observationDbId, String descriptiveOntologyTerm, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<ImagesResponse> resp = imagesGetWithHttpInfo(imageDbId, imageName, observationUnitDbId, observationDbId, descriptiveOntologyTerm, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the image meta data summaries
     * Get filtered set of image meta data  Implementation Notes  - &#x27;imageURL&#x27; should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.  - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s.  
     * @param imageDbId The unique identifier for a image (optional)
     * @param imageName The human readable name of an image (optional)
     * @param observationUnitDbId The unique identifier of the observation unit an image is portraying (optional)
     * @param observationDbId The unique identifier of the observation an image is accosiated with (optional)
     * @param descriptiveOntologyTerm A descriptive term associated with an image (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;ImagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImagesResponse> imagesGetWithHttpInfo(String imageDbId, String imageName, String observationUnitDbId, String observationDbId, String descriptiveOntologyTerm, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = imagesGetValidateBeforeCall(imageDbId, imageName, observationUnitDbId, observationDbId, descriptiveOntologyTerm, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<ImagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the image meta data summaries (asynchronously)
     * Get filtered set of image meta data  Implementation Notes  - &#x27;imageURL&#x27; should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.  - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s.  
     * @param imageDbId The unique identifier for a image (optional)
     * @param imageName The human readable name of an image (optional)
     * @param observationUnitDbId The unique identifier of the observation unit an image is portraying (optional)
     * @param observationDbId The unique identifier of the observation an image is accosiated with (optional)
     * @param descriptiveOntologyTerm A descriptive term associated with an image (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call imagesGetAsync(String imageDbId, String imageName, String observationUnitDbId, String observationDbId, String descriptiveOntologyTerm, Integer page, Integer pageSize, String authorization, final ApiCallback<ImagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = imagesGetValidateBeforeCall(imageDbId, imageName, observationUnitDbId, observationDbId, descriptiveOntologyTerm, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for imagesImageDbIdGet
     * @param imageDbId The unique identifier for a image (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call imagesImageDbIdGetCall(String imageDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/images/{imageDbId}"
            .replaceAll("\\{" + "imageDbId" + "\\}", apiClient.escapeString(imageDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call imagesImageDbIdGetValidateBeforeCall(String imageDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'imageDbId' is set
        if (imageDbId == null) {
            throw new ApiException("Missing the required parameter 'imageDbId' when calling imagesImageDbIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = imagesImageDbIdGetCall(imageDbId, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the an image meta data summary
     * Get one image meta data object  Implementation Notes  - &#x27;imageURL&#x27; should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.  - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s. 
     * @param imageDbId The unique identifier for a image (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageResponse imagesImageDbIdGet(String imageDbId, String authorization) throws ApiException {
        ApiResponse<ImageResponse> resp = imagesImageDbIdGetWithHttpInfo(imageDbId, authorization);
        return resp.getData();
    }

    /**
     * Get the an image meta data summary
     * Get one image meta data object  Implementation Notes  - &#x27;imageURL&#x27; should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.  - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s. 
     * @param imageDbId The unique identifier for a image (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;ImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageResponse> imagesImageDbIdGetWithHttpInfo(String imageDbId, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = imagesImageDbIdGetValidateBeforeCall(imageDbId, authorization, null, null);
        Type localVarReturnType = new TypeToken<ImageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the an image meta data summary (asynchronously)
     * Get one image meta data object  Implementation Notes  - &#x27;imageURL&#x27; should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.  - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s. 
     * @param imageDbId The unique identifier for a image (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call imagesImageDbIdGetAsync(String imageDbId, String authorization, final ApiCallback<ImageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = imagesImageDbIdGetValidateBeforeCall(imageDbId, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for imagesImageDbIdImagecontentPut
     * @param imageDbId The unique identifier for a image (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call imagesImageDbIdImagecontentPutCall(String imageDbId, Object body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/images/{imageDbId}/imagecontent"
            .replaceAll("\\{" + "imageDbId" + "\\}", apiClient.escapeString(imageDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "image/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call imagesImageDbIdImagecontentPutValidateBeforeCall(String imageDbId, Object body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'imageDbId' is set
        if (imageDbId == null) {
            throw new ApiException("Missing the required parameter 'imageDbId' when calling imagesImageDbIdImagecontentPut(Async)");
        }
        
        com.squareup.okhttp.Call call = imagesImageDbIdImagecontentPutCall(imageDbId, body, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an image with the image file content
     * Update an image with the image file content  Implementation Notes  - This call should be paired with &#x27;PUT /images/{imageDbId}&#x27; for full capability  - A server may choose to modify the image meta data object based on the actually image which has been uploaded.   - Image data may be stored in a database or file system. Servers should generate and provide the \&quot;imageURL\&quot; for retrieving the image, wherever it happens to live.  
     * @param imageDbId The unique identifier for a image (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageResponse imagesImageDbIdImagecontentPut(String imageDbId, Object body, String authorization) throws ApiException {
        ApiResponse<ImageResponse> resp = imagesImageDbIdImagecontentPutWithHttpInfo(imageDbId, body, authorization);
        return resp.getData();
    }

    /**
     * Update an image with the image file content
     * Update an image with the image file content  Implementation Notes  - This call should be paired with &#x27;PUT /images/{imageDbId}&#x27; for full capability  - A server may choose to modify the image meta data object based on the actually image which has been uploaded.   - Image data may be stored in a database or file system. Servers should generate and provide the \&quot;imageURL\&quot; for retrieving the image, wherever it happens to live.  
     * @param imageDbId The unique identifier for a image (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;ImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageResponse> imagesImageDbIdImagecontentPutWithHttpInfo(String imageDbId, Object body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = imagesImageDbIdImagecontentPutValidateBeforeCall(imageDbId, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<ImageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an image with the image file content (asynchronously)
     * Update an image with the image file content  Implementation Notes  - This call should be paired with &#x27;PUT /images/{imageDbId}&#x27; for full capability  - A server may choose to modify the image meta data object based on the actually image which has been uploaded.   - Image data may be stored in a database or file system. Servers should generate and provide the \&quot;imageURL\&quot; for retrieving the image, wherever it happens to live.  
     * @param imageDbId The unique identifier for a image (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call imagesImageDbIdImagecontentPutAsync(String imageDbId, Object body, String authorization, final ApiCallback<ImageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = imagesImageDbIdImagecontentPutValidateBeforeCall(imageDbId, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for imagesImageDbIdPut
     * @param imageDbId The unique identifier for a image (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call imagesImageDbIdPutCall(String imageDbId, NewImageRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/images/{imageDbId}"
            .replaceAll("\\{" + "imageDbId" + "\\}", apiClient.escapeString(imageDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call imagesImageDbIdPutValidateBeforeCall(String imageDbId, NewImageRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'imageDbId' is set
        if (imageDbId == null) {
            throw new ApiException("Missing the required parameter 'imageDbId' when calling imagesImageDbIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = imagesImageDbIdPutCall(imageDbId, body, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an image meta data
     * Update an image meta data object  Implementation Notes  - This call should be paired with &#x27;PUT /images/{imageDbId}/imagecontent&#x27; for full capability  - A server may choose to modify the image meta data object based on the actually image which has been uploaded.   - Image data may be stored in a database or file system. Servers should generate and provide the \\\&quot;imageURL\\\&quot; as an absolute path for retrieving the image, wherever it happens to live.   - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s.   - The &#x60;/images&#x60; calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON only supports two of the possible geometries: Points and Polygons.           - With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera.           - For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the image content. &#x27;
     * @param imageDbId The unique identifier for a image (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageResponse imagesImageDbIdPut(String imageDbId, NewImageRequest body, String authorization) throws ApiException {
        ApiResponse<ImageResponse> resp = imagesImageDbIdPutWithHttpInfo(imageDbId, body, authorization);
        return resp.getData();
    }

    /**
     * Update an image meta data
     * Update an image meta data object  Implementation Notes  - This call should be paired with &#x27;PUT /images/{imageDbId}/imagecontent&#x27; for full capability  - A server may choose to modify the image meta data object based on the actually image which has been uploaded.   - Image data may be stored in a database or file system. Servers should generate and provide the \\\&quot;imageURL\\\&quot; as an absolute path for retrieving the image, wherever it happens to live.   - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s.   - The &#x60;/images&#x60; calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON only supports two of the possible geometries: Points and Polygons.           - With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera.           - For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the image content. &#x27;
     * @param imageDbId The unique identifier for a image (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;ImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageResponse> imagesImageDbIdPutWithHttpInfo(String imageDbId, NewImageRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = imagesImageDbIdPutValidateBeforeCall(imageDbId, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<ImageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an image meta data (asynchronously)
     * Update an image meta data object  Implementation Notes  - This call should be paired with &#x27;PUT /images/{imageDbId}/imagecontent&#x27; for full capability  - A server may choose to modify the image meta data object based on the actually image which has been uploaded.   - Image data may be stored in a database or file system. Servers should generate and provide the \\\&quot;imageURL\\\&quot; as an absolute path for retrieving the image, wherever it happens to live.   - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s.   - The &#x60;/images&#x60; calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON only supports two of the possible geometries: Points and Polygons.           - With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera.           - For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the image content. &#x27;
     * @param imageDbId The unique identifier for a image (required)
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call imagesImageDbIdPutAsync(String imageDbId, NewImageRequest body, String authorization, final ApiCallback<ImageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = imagesImageDbIdPutValidateBeforeCall(imageDbId, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for imagesPost
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call imagesPostCall(NewImageRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call imagesPostValidateBeforeCall(NewImageRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = imagesPostCall(body, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new image meta data object
     * Create a new image meta data object  Implementation Notes  - &#x27;imageURL&#x27; should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.  - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s.  - The &#x60;/images&#x60; calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON only supports two of the possible geometries: Points and Polygons.  - With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera.  - For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the image content. 
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageResponse imagesPost(NewImageRequest body, String authorization) throws ApiException {
        ApiResponse<ImageResponse> resp = imagesPostWithHttpInfo(body, authorization);
        return resp.getData();
    }

    /**
     * Create a new image meta data object
     * Create a new image meta data object  Implementation Notes  - &#x27;imageURL&#x27; should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.  - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s.  - The &#x60;/images&#x60; calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON only supports two of the possible geometries: Points and Polygons.  - With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera.  - For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the image content. 
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;ImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageResponse> imagesPostWithHttpInfo(NewImageRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = imagesPostValidateBeforeCall(body, authorization, null, null);
        Type localVarReturnType = new TypeToken<ImageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new image meta data object (asynchronously)
     * Create a new image meta data object  Implementation Notes  - &#x27;imageURL&#x27; should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.  - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s.  - The &#x60;/images&#x60; calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON only supports two of the possible geometries: Points and Polygons.  - With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera.  - For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the image content. 
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call imagesPostAsync(NewImageRequest body, String authorization, final ApiCallback<ImageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = imagesPostValidateBeforeCall(body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchImagesPost
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchImagesPostCall(ImagesSearchRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/search/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchImagesPostValidateBeforeCall(ImagesSearchRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = searchImagesPostCall(body, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Submit a search request for Images
     * Get filtered set of image meta data  Implementation Notes  - &#x27;imageURL&#x27; should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.  - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s.    See Search Services for additional implementation details.
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return SuccessfulSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessfulSearchResponse searchImagesPost(ImagesSearchRequest body, String authorization) throws ApiException {
        ApiResponse<SuccessfulSearchResponse> resp = searchImagesPostWithHttpInfo(body, authorization);
        return resp.getData();
    }

    /**
     * Submit a search request for Images
     * Get filtered set of image meta data  Implementation Notes  - &#x27;imageURL&#x27; should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.  - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s.    See Search Services for additional implementation details.
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;SuccessfulSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessfulSearchResponse> searchImagesPostWithHttpInfo(ImagesSearchRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = searchImagesPostValidateBeforeCall(body, authorization, null, null);
        Type localVarReturnType = new TypeToken<SuccessfulSearchResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submit a search request for Images (asynchronously)
     * Get filtered set of image meta data  Implementation Notes  - &#x27;imageURL&#x27; should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.  - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s.    See Search Services for additional implementation details.
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchImagesPostAsync(ImagesSearchRequest body, String authorization, final ApiCallback<SuccessfulSearchResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchImagesPostValidateBeforeCall(body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessfulSearchResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchImagesSearchResultsDbIdGet
     * @param searchResultsDbId Permanent unique identifier which references the search results (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchImagesSearchResultsDbIdGetCall(String searchResultsDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/search/images/{searchResultsDbId}"
            .replaceAll("\\{" + "searchResultsDbId" + "\\}", apiClient.escapeString(searchResultsDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchImagesSearchResultsDbIdGetValidateBeforeCall(String searchResultsDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'searchResultsDbId' is set
        if (searchResultsDbId == null) {
            throw new ApiException("Missing the required parameter 'searchResultsDbId' when calling searchImagesSearchResultsDbIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = searchImagesSearchResultsDbIdGetCall(searchResultsDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the results of an Images search request
     * Get filtered set of image meta data  Implementation Notes  - &#x27;imageURL&#x27; should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.  - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s.  
     * @param searchResultsDbId Permanent unique identifier which references the search results (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ImagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImagesResponse searchImagesSearchResultsDbIdGet(String searchResultsDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<ImagesResponse> resp = searchImagesSearchResultsDbIdGetWithHttpInfo(searchResultsDbId, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the results of an Images search request
     * Get filtered set of image meta data  Implementation Notes  - &#x27;imageURL&#x27; should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.  - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s.  
     * @param searchResultsDbId Permanent unique identifier which references the search results (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;ImagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImagesResponse> searchImagesSearchResultsDbIdGetWithHttpInfo(String searchResultsDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = searchImagesSearchResultsDbIdGetValidateBeforeCall(searchResultsDbId, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<ImagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the results of an Images search request (asynchronously)
     * Get filtered set of image meta data  Implementation Notes  - &#x27;imageURL&#x27; should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.  - &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI&#x27;s.  
     * @param searchResultsDbId Permanent unique identifier which references the search results (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchImagesSearchResultsDbIdGetAsync(String searchResultsDbId, Integer page, Integer pageSize, String authorization, final ApiCallback<ImagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchImagesSearchResultsDbIdGetValidateBeforeCall(searchResultsDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

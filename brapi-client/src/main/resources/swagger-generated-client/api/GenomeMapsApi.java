/*
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.GenomeMapsResponse;
import io.swagger.client.model.MapDetailsResponse;
import io.swagger.client.model.MarkerSummaryLinkageGroupResponse;
import io.swagger.client.model.MarkerSummaryMapResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GenomeMapsApi {
    private ApiClient apiClient;

    public GenomeMapsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GenomeMapsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for mapsGet
     * @param species DEPRECATED in v1.3 - See \&quot;scientificName\&quot; (optional)
     * @param commonCropName The common name of the crop, found from \&quot;GET /commoncropnames\&quot; (optional)
     * @param scientificName Full scientific binomial format name. This includes Genus, Species, and Sub-species (optional)
     * @param type Type of map (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mapsGetCall(String species, String commonCropName, String scientificName, String type, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/maps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (species != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("species", species));
        if (commonCropName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commonCropName", commonCropName));
        if (scientificName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scientificName", scientificName));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mapsGetValidateBeforeCall(String species, String commonCropName, String scientificName, String type, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = mapsGetCall(species, commonCropName, scientificName, type, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Genomic Maps
     * Get list of maps
     * @param species DEPRECATED in v1.3 - See \&quot;scientificName\&quot; (optional)
     * @param commonCropName The common name of the crop, found from \&quot;GET /commoncropnames\&quot; (optional)
     * @param scientificName Full scientific binomial format name. This includes Genus, Species, and Sub-species (optional)
     * @param type Type of map (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GenomeMapsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GenomeMapsResponse mapsGet(String species, String commonCropName, String scientificName, String type, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<GenomeMapsResponse> resp = mapsGetWithHttpInfo(species, commonCropName, scientificName, type, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the Genomic Maps
     * Get list of maps
     * @param species DEPRECATED in v1.3 - See \&quot;scientificName\&quot; (optional)
     * @param commonCropName The common name of the crop, found from \&quot;GET /commoncropnames\&quot; (optional)
     * @param scientificName Full scientific binomial format name. This includes Genus, Species, and Sub-species (optional)
     * @param type Type of map (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;GenomeMapsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GenomeMapsResponse> mapsGetWithHttpInfo(String species, String commonCropName, String scientificName, String type, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = mapsGetValidateBeforeCall(species, commonCropName, scientificName, type, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<GenomeMapsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Genomic Maps (asynchronously)
     * Get list of maps
     * @param species DEPRECATED in v1.3 - See \&quot;scientificName\&quot; (optional)
     * @param commonCropName The common name of the crop, found from \&quot;GET /commoncropnames\&quot; (optional)
     * @param scientificName Full scientific binomial format name. This includes Genus, Species, and Sub-species (optional)
     * @param type Type of map (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mapsGetAsync(String species, String commonCropName, String scientificName, String type, Integer page, Integer pageSize, String authorization, final ApiCallback<GenomeMapsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mapsGetValidateBeforeCall(species, commonCropName, scientificName, type, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GenomeMapsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mapsMapDbIdGet
     * @param mapDbId The internal db id of a selected map (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mapsMapDbIdGetCall(String mapDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/maps/{mapDbId}"
            .replaceAll("\\{" + "mapDbId" + "\\}", apiClient.escapeString(mapDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mapsMapDbIdGetValidateBeforeCall(String mapDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mapDbId' is set
        if (mapDbId == null) {
            throw new ApiException("Missing the required parameter 'mapDbId' when calling mapsMapDbIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = mapsMapDbIdGetCall(mapDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the details of a specific Genomic Map
     * Provides the number of markers on each linkageGroup and the max position on the linkageGroup
     * @param mapDbId The internal db id of a selected map (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return MapDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MapDetailsResponse mapsMapDbIdGet(String mapDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<MapDetailsResponse> resp = mapsMapDbIdGetWithHttpInfo(mapDbId, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the details of a specific Genomic Map
     * Provides the number of markers on each linkageGroup and the max position on the linkageGroup
     * @param mapDbId The internal db id of a selected map (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;MapDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MapDetailsResponse> mapsMapDbIdGetWithHttpInfo(String mapDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = mapsMapDbIdGetValidateBeforeCall(mapDbId, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<MapDetailsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the details of a specific Genomic Map (asynchronously)
     * Provides the number of markers on each linkageGroup and the max position on the linkageGroup
     * @param mapDbId The internal db id of a selected map (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mapsMapDbIdGetAsync(String mapDbId, Integer page, Integer pageSize, String authorization, final ApiCallback<MapDetailsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mapsMapDbIdGetValidateBeforeCall(mapDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MapDetailsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mapsMapDbIdPositionsGet
     * @param mapDbId unique id of the map (required)
     * @param linkageGroupId Deprecated Use linkageGroupName instead (optional)
     * @param linkageGroupName The chromosome identifier or the generic linkage group identifier if the chromosome is not applicable. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mapsMapDbIdPositionsGetCall(String mapDbId, String linkageGroupId, String linkageGroupName, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/maps/{mapDbId}/positions"
            .replaceAll("\\{" + "mapDbId" + "\\}", apiClient.escapeString(mapDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (linkageGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("linkageGroupId", linkageGroupId));
        if (linkageGroupName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("linkageGroupName", linkageGroupName));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mapsMapDbIdPositionsGetValidateBeforeCall(String mapDbId, String linkageGroupId, String linkageGroupName, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mapDbId' is set
        if (mapDbId == null) {
            throw new ApiException("Missing the required parameter 'mapDbId' when calling mapsMapDbIdPositionsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = mapsMapDbIdPositionsGetCall(mapDbId, linkageGroupId, linkageGroupName, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the positions of Markers inside a specific Genomic Map
     * All the markers in a given Map, ordered by linkageGroup and position.
     * @param mapDbId unique id of the map (required)
     * @param linkageGroupId Deprecated Use linkageGroupName instead (optional)
     * @param linkageGroupName The chromosome identifier or the generic linkage group identifier if the chromosome is not applicable. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return MarkerSummaryMapResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MarkerSummaryMapResponse mapsMapDbIdPositionsGet(String mapDbId, String linkageGroupId, String linkageGroupName, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<MarkerSummaryMapResponse> resp = mapsMapDbIdPositionsGetWithHttpInfo(mapDbId, linkageGroupId, linkageGroupName, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the positions of Markers inside a specific Genomic Map
     * All the markers in a given Map, ordered by linkageGroup and position.
     * @param mapDbId unique id of the map (required)
     * @param linkageGroupId Deprecated Use linkageGroupName instead (optional)
     * @param linkageGroupName The chromosome identifier or the generic linkage group identifier if the chromosome is not applicable. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;MarkerSummaryMapResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MarkerSummaryMapResponse> mapsMapDbIdPositionsGetWithHttpInfo(String mapDbId, String linkageGroupId, String linkageGroupName, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = mapsMapDbIdPositionsGetValidateBeforeCall(mapDbId, linkageGroupId, linkageGroupName, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<MarkerSummaryMapResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the positions of Markers inside a specific Genomic Map (asynchronously)
     * All the markers in a given Map, ordered by linkageGroup and position.
     * @param mapDbId unique id of the map (required)
     * @param linkageGroupId Deprecated Use linkageGroupName instead (optional)
     * @param linkageGroupName The chromosome identifier or the generic linkage group identifier if the chromosome is not applicable. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mapsMapDbIdPositionsGetAsync(String mapDbId, String linkageGroupId, String linkageGroupName, Integer page, Integer pageSize, String authorization, final ApiCallback<MarkerSummaryMapResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mapsMapDbIdPositionsGetValidateBeforeCall(mapDbId, linkageGroupId, linkageGroupName, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MarkerSummaryMapResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mapsMapDbIdPositionsLinkageGroupNameGet
     * @param mapDbId unique id of the map (required)
     * @param linkageGroupName The chromosome identifier or the generic linkage group identifier if the chromosome is not applicable. (required)
     * @param min minimum position on linkage group (optional)
     * @param max maximum position on linkage group (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mapsMapDbIdPositionsLinkageGroupNameGetCall(String mapDbId, String linkageGroupName, Integer min, Integer max, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/maps/{mapDbId}/positions/{linkageGroupName}"
            .replaceAll("\\{" + "mapDbId" + "\\}", apiClient.escapeString(mapDbId.toString()))
            .replaceAll("\\{" + "linkageGroupName" + "\\}", apiClient.escapeString(linkageGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (min != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min", min));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max", max));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mapsMapDbIdPositionsLinkageGroupNameGetValidateBeforeCall(String mapDbId, String linkageGroupName, Integer min, Integer max, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mapDbId' is set
        if (mapDbId == null) {
            throw new ApiException("Missing the required parameter 'mapDbId' when calling mapsMapDbIdPositionsLinkageGroupNameGet(Async)");
        }
        // verify the required parameter 'linkageGroupName' is set
        if (linkageGroupName == null) {
            throw new ApiException("Missing the required parameter 'linkageGroupName' when calling mapsMapDbIdPositionsLinkageGroupNameGet(Async)");
        }
        
        com.squareup.okhttp.Call call = mapsMapDbIdPositionsLinkageGroupNameGetCall(mapDbId, linkageGroupName, min, max, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the positions of Markers inside a specific Linkage Group
     * All the markers in a specific Linkage Group (aka Chromasome) inside a particular Map, ordered by position.
     * @param mapDbId unique id of the map (required)
     * @param linkageGroupName The chromosome identifier or the generic linkage group identifier if the chromosome is not applicable. (required)
     * @param min minimum position on linkage group (optional)
     * @param max maximum position on linkage group (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return MarkerSummaryLinkageGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MarkerSummaryLinkageGroupResponse mapsMapDbIdPositionsLinkageGroupNameGet(String mapDbId, String linkageGroupName, Integer min, Integer max, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<MarkerSummaryLinkageGroupResponse> resp = mapsMapDbIdPositionsLinkageGroupNameGetWithHttpInfo(mapDbId, linkageGroupName, min, max, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the positions of Markers inside a specific Linkage Group
     * All the markers in a specific Linkage Group (aka Chromasome) inside a particular Map, ordered by position.
     * @param mapDbId unique id of the map (required)
     * @param linkageGroupName The chromosome identifier or the generic linkage group identifier if the chromosome is not applicable. (required)
     * @param min minimum position on linkage group (optional)
     * @param max maximum position on linkage group (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;MarkerSummaryLinkageGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MarkerSummaryLinkageGroupResponse> mapsMapDbIdPositionsLinkageGroupNameGetWithHttpInfo(String mapDbId, String linkageGroupName, Integer min, Integer max, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = mapsMapDbIdPositionsLinkageGroupNameGetValidateBeforeCall(mapDbId, linkageGroupName, min, max, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<MarkerSummaryLinkageGroupResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the positions of Markers inside a specific Linkage Group (asynchronously)
     * All the markers in a specific Linkage Group (aka Chromasome) inside a particular Map, ordered by position.
     * @param mapDbId unique id of the map (required)
     * @param linkageGroupName The chromosome identifier or the generic linkage group identifier if the chromosome is not applicable. (required)
     * @param min minimum position on linkage group (optional)
     * @param max maximum position on linkage group (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mapsMapDbIdPositionsLinkageGroupNameGetAsync(String mapDbId, String linkageGroupName, Integer min, Integer max, Integer page, Integer pageSize, String authorization, final ApiCallback<MarkerSummaryLinkageGroupResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mapsMapDbIdPositionsLinkageGroupNameGetValidateBeforeCall(mapDbId, linkageGroupName, min, max, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MarkerSummaryLinkageGroupResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

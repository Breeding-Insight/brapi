/*
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.MarkerResponse;
import io.swagger.client.model.MarkersResponse;
import io.swagger.client.model.MarkersSearchRequest;
import io.swagger.client.model.SuccessfulSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MarkersApi {
    private ApiClient apiClient;

    public MarkersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarkersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for markersGet
     * @param markerDbId The database ID of the markers to search for (optional)
     * @param markerName The search paramater for a marker name or synonym. (optional)
     * @param name DEPRECAED in v1.3 - see \&quot;markerName\&quot; (optional)
     * @param matchMethod DEPRECAED in v1.3 - see /search/markers (optional)
     * @param includeSynonyms Whether to include synonyms in the output. (optional)
     * @param include DEPRECATED in v1.1 - see \&quot;includeSynonyms\&quot; (optional)
     * @param type The type of the marker. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call markersGetCall(String markerDbId, String markerName, String name, String matchMethod, Boolean includeSynonyms, String include, String type, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/markers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (markerDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("markerDbId", markerDbId));
        if (markerName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("markerName", markerName));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (matchMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("matchMethod", matchMethod));
        if (includeSynonyms != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeSynonyms", includeSynonyms));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call markersGetValidateBeforeCall(String markerDbId, String markerName, String name, String matchMethod, Boolean includeSynonyms, String include, String type, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = markersGetCall(markerDbId, markerName, name, matchMethod, includeSynonyms, include, type, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Markers
     * Other service requests use the servers internal &#x60;markerDbId&#x60;. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria. If there is none, an empty array is returned. If there is one or more than one match, returns an array of all marker records that match the search criteria.
     * @param markerDbId The database ID of the markers to search for (optional)
     * @param markerName The search paramater for a marker name or synonym. (optional)
     * @param name DEPRECAED in v1.3 - see \&quot;markerName\&quot; (optional)
     * @param matchMethod DEPRECAED in v1.3 - see /search/markers (optional)
     * @param includeSynonyms Whether to include synonyms in the output. (optional)
     * @param include DEPRECATED in v1.1 - see \&quot;includeSynonyms\&quot; (optional)
     * @param type The type of the marker. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return MarkersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MarkersResponse markersGet(String markerDbId, String markerName, String name, String matchMethod, Boolean includeSynonyms, String include, String type, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<MarkersResponse> resp = markersGetWithHttpInfo(markerDbId, markerName, name, matchMethod, includeSynonyms, include, type, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the Markers
     * Other service requests use the servers internal &#x60;markerDbId&#x60;. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria. If there is none, an empty array is returned. If there is one or more than one match, returns an array of all marker records that match the search criteria.
     * @param markerDbId The database ID of the markers to search for (optional)
     * @param markerName The search paramater for a marker name or synonym. (optional)
     * @param name DEPRECAED in v1.3 - see \&quot;markerName\&quot; (optional)
     * @param matchMethod DEPRECAED in v1.3 - see /search/markers (optional)
     * @param includeSynonyms Whether to include synonyms in the output. (optional)
     * @param include DEPRECATED in v1.1 - see \&quot;includeSynonyms\&quot; (optional)
     * @param type The type of the marker. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;MarkersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MarkersResponse> markersGetWithHttpInfo(String markerDbId, String markerName, String name, String matchMethod, Boolean includeSynonyms, String include, String type, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = markersGetValidateBeforeCall(markerDbId, markerName, name, matchMethod, includeSynonyms, include, type, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<MarkersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Markers (asynchronously)
     * Other service requests use the servers internal &#x60;markerDbId&#x60;. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria. If there is none, an empty array is returned. If there is one or more than one match, returns an array of all marker records that match the search criteria.
     * @param markerDbId The database ID of the markers to search for (optional)
     * @param markerName The search paramater for a marker name or synonym. (optional)
     * @param name DEPRECAED in v1.3 - see \&quot;markerName\&quot; (optional)
     * @param matchMethod DEPRECAED in v1.3 - see /search/markers (optional)
     * @param includeSynonyms Whether to include synonyms in the output. (optional)
     * @param include DEPRECATED in v1.1 - see \&quot;includeSynonyms\&quot; (optional)
     * @param type The type of the marker. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call markersGetAsync(String markerDbId, String markerName, String name, String matchMethod, Boolean includeSynonyms, String include, String type, Integer page, Integer pageSize, String authorization, final ApiCallback<MarkersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = markersGetValidateBeforeCall(markerDbId, markerName, name, matchMethod, includeSynonyms, include, type, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MarkersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for markersMarkerDbIdGet
     * @param markerDbId the internal id of the marker (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call markersMarkerDbIdGetCall(String markerDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/markers/{markerDbId}"
            .replaceAll("\\{" + "markerDbId" + "\\}", apiClient.escapeString(markerDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call markersMarkerDbIdGetValidateBeforeCall(String markerDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'markerDbId' is set
        if (markerDbId == null) {
            throw new ApiException("Missing the required parameter 'markerDbId' when calling markersMarkerDbIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = markersMarkerDbIdGetCall(markerDbId, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the details for a specific Marker
     * Status: ACCEPTED  Implemented By:
     * @param markerDbId the internal id of the marker (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return MarkerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MarkerResponse markersMarkerDbIdGet(String markerDbId, String authorization) throws ApiException {
        ApiResponse<MarkerResponse> resp = markersMarkerDbIdGetWithHttpInfo(markerDbId, authorization);
        return resp.getData();
    }

    /**
     * Get the details for a specific Marker
     * Status: ACCEPTED  Implemented By:
     * @param markerDbId the internal id of the marker (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;MarkerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MarkerResponse> markersMarkerDbIdGetWithHttpInfo(String markerDbId, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = markersMarkerDbIdGetValidateBeforeCall(markerDbId, authorization, null, null);
        Type localVarReturnType = new TypeToken<MarkerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the details for a specific Marker (asynchronously)
     * Status: ACCEPTED  Implemented By:
     * @param markerDbId the internal id of the marker (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call markersMarkerDbIdGetAsync(String markerDbId, String authorization, final ApiCallback<MarkerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = markersMarkerDbIdGetValidateBeforeCall(markerDbId, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MarkerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for markersSearchGet
     * @param markerDbIds The database IDs of the markers to search for (optional)
     * @param name The search pattern for a marker name or synonym. Examples: \&quot;11_10002\&quot; \&quot;11_1%\&quot; \&quot;11_1*\&quot; \&quot;11_10?02\&quot; (optional)
     * @param matchMethod Possible values are &#x27;case_insensitive&#x27;, &#x27;exact&#x27; (case sensitive), &#x27;wildcard&#x27; (which is case insensitive). Wildcard uses both &#x27;*&#x27; and &#x27;%&#x27; for any number of characters and &#x27;?&#x27; for one character matching. Default is exact. (optional)
     * @param includeSynonyms Whether to include synonyms in the output. (optional)
     * @param type The type of the marker. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call markersSearchGetCall(List<String> markerDbIds, String name, String matchMethod, Boolean includeSynonyms, String type, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/markers-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (markerDbIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "markerDbIds", markerDbIds));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (matchMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("matchMethod", matchMethod));
        if (includeSynonyms != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeSynonyms", includeSynonyms));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call markersSearchGetValidateBeforeCall(List<String> markerDbIds, String name, String matchMethod, Boolean includeSynonyms, String type, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = markersSearchGetCall(markerDbIds, name, matchMethod, includeSynonyms, type, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Markers Search (GET)
     *  Scope: CORE.  Status: ACCEPTED. Implemented by: Germinate See Search Services for additional implementation details. Other service requests use the servers internal &#x60;markerDbId&#x60;. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria. - If there is none, an empty array is returned. - If there is one or more than one match, returns an array of all marker records that match the search criteria. 
     * @param markerDbIds The database IDs of the markers to search for (optional)
     * @param name The search pattern for a marker name or synonym. Examples: \&quot;11_10002\&quot; \&quot;11_1%\&quot; \&quot;11_1*\&quot; \&quot;11_10?02\&quot; (optional)
     * @param matchMethod Possible values are &#x27;case_insensitive&#x27;, &#x27;exact&#x27; (case sensitive), &#x27;wildcard&#x27; (which is case insensitive). Wildcard uses both &#x27;*&#x27; and &#x27;%&#x27; for any number of characters and &#x27;?&#x27; for one character matching. Default is exact. (optional)
     * @param includeSynonyms Whether to include synonyms in the output. (optional)
     * @param type The type of the marker. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @return MarkersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MarkersResponse markersSearchGet(List<String> markerDbIds, String name, String matchMethod, Boolean includeSynonyms, String type, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<MarkersResponse> resp = markersSearchGetWithHttpInfo(markerDbIds, name, matchMethod, includeSynonyms, type, page, pageSize);
        return resp.getData();
    }

    /**
     * Markers Search (GET)
     *  Scope: CORE.  Status: ACCEPTED. Implemented by: Germinate See Search Services for additional implementation details. Other service requests use the servers internal &#x60;markerDbId&#x60;. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria. - If there is none, an empty array is returned. - If there is one or more than one match, returns an array of all marker records that match the search criteria. 
     * @param markerDbIds The database IDs of the markers to search for (optional)
     * @param name The search pattern for a marker name or synonym. Examples: \&quot;11_10002\&quot; \&quot;11_1%\&quot; \&quot;11_1*\&quot; \&quot;11_10?02\&quot; (optional)
     * @param matchMethod Possible values are &#x27;case_insensitive&#x27;, &#x27;exact&#x27; (case sensitive), &#x27;wildcard&#x27; (which is case insensitive). Wildcard uses both &#x27;*&#x27; and &#x27;%&#x27; for any number of characters and &#x27;?&#x27; for one character matching. Default is exact. (optional)
     * @param includeSynonyms Whether to include synonyms in the output. (optional)
     * @param type The type of the marker. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @return ApiResponse&lt;MarkersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MarkersResponse> markersSearchGetWithHttpInfo(List<String> markerDbIds, String name, String matchMethod, Boolean includeSynonyms, String type, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = markersSearchGetValidateBeforeCall(markerDbIds, name, matchMethod, includeSynonyms, type, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<MarkersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Markers Search (GET) (asynchronously)
     *  Scope: CORE.  Status: ACCEPTED. Implemented by: Germinate See Search Services for additional implementation details. Other service requests use the servers internal &#x60;markerDbId&#x60;. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria. - If there is none, an empty array is returned. - If there is one or more than one match, returns an array of all marker records that match the search criteria. 
     * @param markerDbIds The database IDs of the markers to search for (optional)
     * @param name The search pattern for a marker name or synonym. Examples: \&quot;11_10002\&quot; \&quot;11_1%\&quot; \&quot;11_1*\&quot; \&quot;11_10?02\&quot; (optional)
     * @param matchMethod Possible values are &#x27;case_insensitive&#x27;, &#x27;exact&#x27; (case sensitive), &#x27;wildcard&#x27; (which is case insensitive). Wildcard uses both &#x27;*&#x27; and &#x27;%&#x27; for any number of characters and &#x27;?&#x27; for one character matching. Default is exact. (optional)
     * @param includeSynonyms Whether to include synonyms in the output. (optional)
     * @param type The type of the marker. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call markersSearchGetAsync(List<String> markerDbIds, String name, String matchMethod, Boolean includeSynonyms, String type, Integer page, Integer pageSize, final ApiCallback<MarkersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = markersSearchGetValidateBeforeCall(markerDbIds, name, matchMethod, includeSynonyms, type, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MarkersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for markersSearchPost
     * @param body The database IDs of the markers to search for (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call markersSearchPostCall(MarkersSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/markers-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call markersSearchPostValidateBeforeCall(MarkersSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = markersSearchPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Markers Search (POST)
     *  Scope: CORE.  Status: ACCEPTED. Implemented by: Germinate See Search Services for additional implementation details. Other service requests use the servers internal &#x60;markerDbId&#x60;. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria. - If there is none, an empty array is returned. - If there is one or more than one match, returns an array of all marker records that match the search criteria. 
     * @param body The database IDs of the markers to search for (optional)
     * @return MarkersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MarkersResponse markersSearchPost(MarkersSearchRequest body) throws ApiException {
        ApiResponse<MarkersResponse> resp = markersSearchPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Markers Search (POST)
     *  Scope: CORE.  Status: ACCEPTED. Implemented by: Germinate See Search Services for additional implementation details. Other service requests use the servers internal &#x60;markerDbId&#x60;. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria. - If there is none, an empty array is returned. - If there is one or more than one match, returns an array of all marker records that match the search criteria. 
     * @param body The database IDs of the markers to search for (optional)
     * @return ApiResponse&lt;MarkersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MarkersResponse> markersSearchPostWithHttpInfo(MarkersSearchRequest body) throws ApiException {
        com.squareup.okhttp.Call call = markersSearchPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<MarkersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Markers Search (POST) (asynchronously)
     *  Scope: CORE.  Status: ACCEPTED. Implemented by: Germinate See Search Services for additional implementation details. Other service requests use the servers internal &#x60;markerDbId&#x60;. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria. - If there is none, an empty array is returned. - If there is one or more than one match, returns an array of all marker records that match the search criteria. 
     * @param body The database IDs of the markers to search for (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call markersSearchPostAsync(MarkersSearchRequest body, final ApiCallback<MarkersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = markersSearchPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MarkersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchMarkersPost
     * @param body The database IDs of the markers to search for (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchMarkersPostCall(MarkersSearchRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/search/markers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchMarkersPostValidateBeforeCall(MarkersSearchRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = searchMarkersPostCall(body, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Submit a search request for Markers
     * See Search Services for additional implementation details. Other service requests use the servers internal &#x60;markerDbId&#x60;. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria.  If there is none, an empty array is returned. If there is one or more than one match, returns an array of all marker records that match the search criteria. &#x27;
     * @param body The database IDs of the markers to search for (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return SuccessfulSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessfulSearchResponse searchMarkersPost(MarkersSearchRequest body, String authorization) throws ApiException {
        ApiResponse<SuccessfulSearchResponse> resp = searchMarkersPostWithHttpInfo(body, authorization);
        return resp.getData();
    }

    /**
     * Submit a search request for Markers
     * See Search Services for additional implementation details. Other service requests use the servers internal &#x60;markerDbId&#x60;. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria.  If there is none, an empty array is returned. If there is one or more than one match, returns an array of all marker records that match the search criteria. &#x27;
     * @param body The database IDs of the markers to search for (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;SuccessfulSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessfulSearchResponse> searchMarkersPostWithHttpInfo(MarkersSearchRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = searchMarkersPostValidateBeforeCall(body, authorization, null, null);
        Type localVarReturnType = new TypeToken<SuccessfulSearchResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submit a search request for Markers (asynchronously)
     * See Search Services for additional implementation details. Other service requests use the servers internal &#x60;markerDbId&#x60;. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria.  If there is none, an empty array is returned. If there is one or more than one match, returns an array of all marker records that match the search criteria. &#x27;
     * @param body The database IDs of the markers to search for (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchMarkersPostAsync(MarkersSearchRequest body, String authorization, final ApiCallback<SuccessfulSearchResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchMarkersPostValidateBeforeCall(body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessfulSearchResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchMarkersSearchResultsDbIdGet
     * @param searchResultsDbId Permanent unique identifier which references the search results (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchMarkersSearchResultsDbIdGetCall(String searchResultsDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/search/markers/{searchResultsDbId}"
            .replaceAll("\\{" + "searchResultsDbId" + "\\}", apiClient.escapeString(searchResultsDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchMarkersSearchResultsDbIdGetValidateBeforeCall(String searchResultsDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'searchResultsDbId' is set
        if (searchResultsDbId == null) {
            throw new ApiException("Missing the required parameter 'searchResultsDbId' when calling searchMarkersSearchResultsDbIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = searchMarkersSearchResultsDbIdGetCall(searchResultsDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the results of a Markers search request
     * See Search Services for additional implementation details. Other service requests use the servers internal &#x60;markerDbId&#x60;. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria. - If there is none, an empty array is returned. - If there is one or more than one match, returns an array of all marker records that match the search criteria. &#x27;
     * @param searchResultsDbId Permanent unique identifier which references the search results (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return MarkersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MarkersResponse searchMarkersSearchResultsDbIdGet(String searchResultsDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<MarkersResponse> resp = searchMarkersSearchResultsDbIdGetWithHttpInfo(searchResultsDbId, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the results of a Markers search request
     * See Search Services for additional implementation details. Other service requests use the servers internal &#x60;markerDbId&#x60;. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria. - If there is none, an empty array is returned. - If there is one or more than one match, returns an array of all marker records that match the search criteria. &#x27;
     * @param searchResultsDbId Permanent unique identifier which references the search results (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;MarkersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MarkersResponse> searchMarkersSearchResultsDbIdGetWithHttpInfo(String searchResultsDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = searchMarkersSearchResultsDbIdGetValidateBeforeCall(searchResultsDbId, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<MarkersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the results of a Markers search request (asynchronously)
     * See Search Services for additional implementation details. Other service requests use the servers internal &#x60;markerDbId&#x60;. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria. - If there is none, an empty array is returned. - If there is one or more than one match, returns an array of all marker records that match the search criteria. &#x27;
     * @param searchResultsDbId Permanent unique identifier which references the search results (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchMarkersSearchResultsDbIdGetAsync(String searchResultsDbId, Integer page, Integer pageSize, String authorization, final ApiCallback<MarkersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchMarkersSearchResultsDbIdGetValidateBeforeCall(searchResultsDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MarkersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

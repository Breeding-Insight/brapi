/*
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.WSMIMEDataTypes;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Call
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-08-25T02:56:46.257Z[GMT]")
public class Call {
  @SerializedName("call")
  private String call = null;

  @SerializedName("dataTypes")
  private List<WSMIMEDataTypes> dataTypes = new ArrayList<WSMIMEDataTypes>();

  @SerializedName("datatypes")
  private List<WSMIMEDataTypes> datatypes = null;

  /**
   * Gets or Sets methods
   */
  @JsonAdapter(MethodsEnum.Adapter.class)
  public enum MethodsEnum {
    GET("GET"),
    POST("POST"),
    PUT("PUT"),
    DELETE("DELETE");

    private String value;

    MethodsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MethodsEnum fromValue(String text) {
      for (MethodsEnum b : MethodsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MethodsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MethodsEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("methods")
  private List<MethodsEnum> methods = new ArrayList<MethodsEnum>();

  /**
   * Gets or Sets versions
   */
  @JsonAdapter(VersionsEnum.Adapter.class)
  public enum VersionsEnum {
    _0("1.0"),
    _1("1.1"),
    _2("1.2"),
    _3("1.3");

    private String value;

    VersionsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static VersionsEnum fromValue(String text) {
      for (VersionsEnum b : VersionsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<VersionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VersionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VersionsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return VersionsEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("versions")
  private List<VersionsEnum> versions = null;

  public Call call(String call) {
    this.call = call;
    return this;
  }

   /**
   * The name of the available call as recorded in the documentation
   * @return call
  **/
  @Schema(required = true, description = "The name of the available call as recorded in the documentation")
  public String getCall() {
    return call;
  }

  public void setCall(String call) {
    this.call = call;
  }

  public Call dataTypes(List<WSMIMEDataTypes> dataTypes) {
    this.dataTypes = dataTypes;
    return this;
  }

  public Call addDataTypesItem(WSMIMEDataTypes dataTypesItem) {
    this.dataTypes.add(dataTypesItem);
    return this;
  }

   /**
   * The possible data formats returned by the available call
   * @return dataTypes
  **/
  @Schema(required = true, description = "The possible data formats returned by the available call")
  public List<WSMIMEDataTypes> getDataTypes() {
    return dataTypes;
  }

  public void setDataTypes(List<WSMIMEDataTypes> dataTypes) {
    this.dataTypes = dataTypes;
  }

  public Call datatypes(List<WSMIMEDataTypes> datatypes) {
    this.datatypes = datatypes;
    return this;
  }

  public Call addDatatypesItem(WSMIMEDataTypes datatypesItem) {
    if (this.datatypes == null) {
      this.datatypes = new ArrayList<WSMIMEDataTypes>();
    }
    this.datatypes.add(datatypesItem);
    return this;
  }

   /**
   * DEPRECATED in v1.3 - see \&quot;dataTypes\&quot; (camel case)
   * @return datatypes
  **/
  @Schema(description = "DEPRECATED in v1.3 - see \"dataTypes\" (camel case)")
  public List<WSMIMEDataTypes> getDatatypes() {
    return datatypes;
  }

  public void setDatatypes(List<WSMIMEDataTypes> datatypes) {
    this.datatypes = datatypes;
  }

  public Call methods(List<MethodsEnum> methods) {
    this.methods = methods;
    return this;
  }

  public Call addMethodsItem(MethodsEnum methodsItem) {
    this.methods.add(methodsItem);
    return this;
  }

   /**
   * The possible HTTP Methods to be used with the available call
   * @return methods
  **/
  @Schema(required = true, description = "The possible HTTP Methods to be used with the available call")
  public List<MethodsEnum> getMethods() {
    return methods;
  }

  public void setMethods(List<MethodsEnum> methods) {
    this.methods = methods;
  }

  public Call versions(List<VersionsEnum> versions) {
    this.versions = versions;
    return this;
  }

  public Call addVersionsItem(VersionsEnum versionsItem) {
    if (this.versions == null) {
      this.versions = new ArrayList<VersionsEnum>();
    }
    this.versions.add(versionsItem);
    return this;
  }

   /**
   * The supported versions of a particular call
   * @return versions
  **/
  @Schema(description = "The supported versions of a particular call")
  public List<VersionsEnum> getVersions() {
    return versions;
  }

  public void setVersions(List<VersionsEnum> versions) {
    this.versions = versions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Call call = (Call) o;
    return Objects.equals(this.call, call.call) &&
        Objects.equals(this.dataTypes, call.dataTypes) &&
        Objects.equals(this.datatypes, call.datatypes) &&
        Objects.equals(this.methods, call.methods) &&
        Objects.equals(this.versions, call.versions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(call, dataTypes, datatypes, methods, versions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Call {\n");
    
    sb.append("    call: ").append(toIndentedString(call)).append("\n");
    sb.append("    dataTypes: ").append(toIndentedString(dataTypes)).append("\n");
    sb.append("    datatypes: ").append(toIndentedString(datatypes)).append("\n");
    sb.append("    methods: ").append(toIndentedString(methods)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ObservationsTable
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-08-25T02:56:46.257Z[GMT]")
public class ObservationsTable {
  @SerializedName("data")
  private List<List<String>> data = null;

  /**
   * valid header fields
   */
  @JsonAdapter(HeaderRowEnum.Adapter.class)
  public enum HeaderRowEnum {
    YEAR("year"),
    STUDYDBID("studyDbId"),
    STUDYNAME("studyName"),
    LOCATIONDBID("locationDbId"),
    LOCATIONNAME("locationName"),
    GERMPLASMDBID("germplasmDbId"),
    GERMPLASMNAME("germplasmName"),
    OBSERVATIONUNITDBID("observationUnitDbId"),
    PLOTNUMBER("plotNumber"),
    REPLICATE("replicate"),
    BLOCKNUMBER("blockNumber"),
    OBSERVATIONTIMESTAMP("observationTimestamp"),
    ENTRYTYPE("entryType"),
    X("X"),
    Y("Y");

    private String value;

    HeaderRowEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static HeaderRowEnum fromValue(String text) {
      for (HeaderRowEnum b : HeaderRowEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<HeaderRowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HeaderRowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HeaderRowEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return HeaderRowEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("headerRow")
  private List<HeaderRowEnum> headerRow = null;

  @SerializedName("observationVariableDbIds")
  private List<String> observationVariableDbIds = null;

  @SerializedName("observationVariableNames")
  private List<String> observationVariableNames = null;

  public ObservationsTable data(List<List<String>> data) {
    this.data = data;
    return this;
  }

  public ObservationsTable addDataItem(List<String> dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<List<String>>();
    }
    this.data.add(dataItem);
    return this;
  }

   /**
   * Matrix of observation data recorded for different observation variables across different observation units
   * @return data
  **/
  @Schema(description = "Matrix of observation data recorded for different observation variables across different observation units")
  public List<List<String>> getData() {
    return data;
  }

  public void setData(List<List<String>> data) {
    this.data = data;
  }

  public ObservationsTable headerRow(List<HeaderRowEnum> headerRow) {
    this.headerRow = headerRow;
    return this;
  }

  public ObservationsTable addHeaderRowItem(HeaderRowEnum headerRowItem) {
    if (this.headerRow == null) {
      this.headerRow = new ArrayList<HeaderRowEnum>();
    }
    this.headerRow.add(headerRowItem);
    return this;
  }

   /**
   * The header row describing observation unit fields. Append &#x27;observationVariableDbIds&#x27; for complete header row of the table. This array should contain any or all of the following strings; year, studyDbId, studyName, locationDbId, locationName, germplasmDbId, germplasmName, observationUnitDbId, plotNumber, replicate, blockNumber, observationTimestamp (DEPRECATED in V1.3), entryType, X, Y
   * @return headerRow
  **/
  @Schema(description = "The header row describing observation unit fields. Append 'observationVariableDbIds' for complete header row of the table. This array should contain any or all of the following strings; year, studyDbId, studyName, locationDbId, locationName, germplasmDbId, germplasmName, observationUnitDbId, plotNumber, replicate, blockNumber, observationTimestamp (DEPRECATED in V1.3), entryType, X, Y")
  public List<HeaderRowEnum> getHeaderRow() {
    return headerRow;
  }

  public void setHeaderRow(List<HeaderRowEnum> headerRow) {
    this.headerRow = headerRow;
  }

  public ObservationsTable observationVariableDbIds(List<String> observationVariableDbIds) {
    this.observationVariableDbIds = observationVariableDbIds;
    return this;
  }

  public ObservationsTable addObservationVariableDbIdsItem(String observationVariableDbIdsItem) {
    if (this.observationVariableDbIds == null) {
      this.observationVariableDbIds = new ArrayList<String>();
    }
    this.observationVariableDbIds.add(observationVariableDbIdsItem);
    return this;
  }

   /**
   * The list of observation variables which have values recorded for them in the data matrix. Append to the &#x27;headerRow&#x27; for comlete header row.
   * @return observationVariableDbIds
  **/
  @Schema(description = "The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for comlete header row.")
  public List<String> getObservationVariableDbIds() {
    return observationVariableDbIds;
  }

  public void setObservationVariableDbIds(List<String> observationVariableDbIds) {
    this.observationVariableDbIds = observationVariableDbIds;
  }

  public ObservationsTable observationVariableNames(List<String> observationVariableNames) {
    this.observationVariableNames = observationVariableNames;
    return this;
  }

  public ObservationsTable addObservationVariableNamesItem(String observationVariableNamesItem) {
    if (this.observationVariableNames == null) {
      this.observationVariableNames = new ArrayList<String>();
    }
    this.observationVariableNames.add(observationVariableNamesItem);
    return this;
  }

   /**
   * The list of observation variable names which have values recorded for them in the data matrix. Order should match &#x27;observationVariableDbIds&#x27;.
   * @return observationVariableNames
  **/
  @Schema(description = "The list of observation variable names which have values recorded for them in the data matrix. Order should match 'observationVariableDbIds'.")
  public List<String> getObservationVariableNames() {
    return observationVariableNames;
  }

  public void setObservationVariableNames(List<String> observationVariableNames) {
    this.observationVariableNames = observationVariableNames;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObservationsTable observationsTable = (ObservationsTable) o;
    return Objects.equals(this.data, observationsTable.data) &&
        Objects.equals(this.headerRow, observationsTable.headerRow) &&
        Objects.equals(this.observationVariableDbIds, observationsTable.observationVariableDbIds) &&
        Objects.equals(this.observationVariableNames, observationsTable.observationVariableNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, headerRow, observationVariableDbIds, observationVariableNames);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObservationsTable {\n");
    
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    headerRow: ").append(toIndentedString(headerRow)).append("\n");
    sb.append("    observationVariableDbIds: ").append(toIndentedString(observationVariableDbIds)).append("\n");
    sb.append("    observationVariableNames: ").append(toIndentedString(observationVariableNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.client.model.OntologyReference;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * new Method request
 */
@Schema(description = "new Method request")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-08-25T02:56:46.257Z[GMT]")
public class NewMethodRequest {
  @SerializedName("class")
  private String propertyClass = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("formula")
  private String formula = null;

  @SerializedName("methodName")
  private String methodName = null;

  @SerializedName("ontologyReference")
  private OntologyReference ontologyReference = null;

  @SerializedName("reference")
  private String reference = null;

  public NewMethodRequest propertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

   /**
   * Method class (examples: \&quot;Measurement\&quot;, \&quot;Counting\&quot;, \&quot;Estimation\&quot;, \&quot;Computation\&quot;, etc.)
   * @return propertyClass
  **/
  @Schema(description = "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)")
  public String getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
  }

  public NewMethodRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Method description.
   * @return description
  **/
  @Schema(description = "Method description.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public NewMethodRequest formula(String formula) {
    this.formula = formula;
    return this;
  }

   /**
   * For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation
   * @return formula
  **/
  @Schema(description = "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation")
  public String getFormula() {
    return formula;
  }

  public void setFormula(String formula) {
    this.formula = formula;
  }

  public NewMethodRequest methodName(String methodName) {
    this.methodName = methodName;
    return this;
  }

   /**
   * Human readable name for the method
   * @return methodName
  **/
  @Schema(description = "Human readable name for the method")
  public String getMethodName() {
    return methodName;
  }

  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }

  public NewMethodRequest ontologyReference(OntologyReference ontologyReference) {
    this.ontologyReference = ontologyReference;
    return this;
  }

   /**
   * Get ontologyReference
   * @return ontologyReference
  **/
  @Schema(description = "")
  public OntologyReference getOntologyReference() {
    return ontologyReference;
  }

  public void setOntologyReference(OntologyReference ontologyReference) {
    this.ontologyReference = ontologyReference;
  }

  public NewMethodRequest reference(String reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Bibliographical reference describing the method.
   * @return reference
  **/
  @Schema(description = "Bibliographical reference describing the method.")
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewMethodRequest newMethodRequest = (NewMethodRequest) o;
    return Objects.equals(this.propertyClass, newMethodRequest.propertyClass) &&
        Objects.equals(this.description, newMethodRequest.description) &&
        Objects.equals(this.formula, newMethodRequest.formula) &&
        Objects.equals(this.methodName, newMethodRequest.methodName) &&
        Objects.equals(this.ontologyReference, newMethodRequest.ontologyReference) &&
        Objects.equals(this.reference, newMethodRequest.reference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyClass, description, formula, methodName, ontologyReference, reference);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewMethodRequest {\n");
    
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    formula: ").append(toIndentedString(formula)).append("\n");
    sb.append("    methodName: ").append(toIndentedString(methodName)).append("\n");
    sb.append("    ontologyReference: ").append(toIndentedString(ontologyReference)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;
/**
 * Sample
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-08-25T02:56:46.257Z[GMT]")
public class Sample {
  @SerializedName("germplasmDbId")
  private String germplasmDbId = null;

  @SerializedName("notes")
  private String notes = null;

  @SerializedName("observationUnitDbId")
  private String observationUnitDbId = null;

  @SerializedName("plantDbId")
  private String plantDbId = null;

  @SerializedName("plateDbId")
  private String plateDbId = null;

  @SerializedName("plateIndex")
  private Integer plateIndex = null;

  @SerializedName("plotDbId")
  private String plotDbId = null;

  @SerializedName("sampleDbId")
  private String sampleDbId = null;

  @SerializedName("sampleTimestamp")
  private OffsetDateTime sampleTimestamp = null;

  @SerializedName("sampleType")
  private String sampleType = null;

  @SerializedName("studyDbId")
  private String studyDbId = null;

  @SerializedName("takenBy")
  private String takenBy = null;

  @SerializedName("tissueType")
  private String tissueType = null;

  public Sample germplasmDbId(String germplasmDbId) {
    this.germplasmDbId = germplasmDbId;
    return this;
  }

   /**
   *  The ID which uniquely identifies a germplasm
   * @return germplasmDbId
  **/
  @Schema(description = " The ID which uniquely identifies a germplasm")
  public String getGermplasmDbId() {
    return germplasmDbId;
  }

  public void setGermplasmDbId(String germplasmDbId) {
    this.germplasmDbId = germplasmDbId;
  }

  public Sample notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Additional notes about a samle
   * @return notes
  **/
  @Schema(description = "Additional notes about a samle")
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }

  public Sample observationUnitDbId(String observationUnitDbId) {
    this.observationUnitDbId = observationUnitDbId;
    return this;
  }

   /**
   * The ID which uniquely identifies an observation unit
   * @return observationUnitDbId
  **/
  @Schema(description = "The ID which uniquely identifies an observation unit")
  public String getObservationUnitDbId() {
    return observationUnitDbId;
  }

  public void setObservationUnitDbId(String observationUnitDbId) {
    this.observationUnitDbId = observationUnitDbId;
  }

  public Sample plantDbId(String plantDbId) {
    this.plantDbId = plantDbId;
    return this;
  }

   /**
   * The ID which uniquely identifies a plant. Usually &#x27;plantNumber&#x27;
   * @return plantDbId
  **/
  @Schema(description = "The ID which uniquely identifies a plant. Usually 'plantNumber'")
  public String getPlantDbId() {
    return plantDbId;
  }

  public void setPlantDbId(String plantDbId) {
    this.plantDbId = plantDbId;
  }

  public Sample plateDbId(String plateDbId) {
    this.plateDbId = plateDbId;
    return this;
  }

   /**
   * The ID which uniquely identifies a plate of samples
   * @return plateDbId
  **/
  @Schema(description = "The ID which uniquely identifies a plate of samples")
  public String getPlateDbId() {
    return plateDbId;
  }

  public void setPlateDbId(String plateDbId) {
    this.plateDbId = plateDbId;
  }

  public Sample plateIndex(Integer plateIndex) {
    this.plateIndex = plateIndex;
    return this;
  }

   /**
   * The index number of this sample on a plate
   * @return plateIndex
  **/
  @Schema(description = "The index number of this sample on a plate")
  public Integer getPlateIndex() {
    return plateIndex;
  }

  public void setPlateIndex(Integer plateIndex) {
    this.plateIndex = plateIndex;
  }

  public Sample plotDbId(String plotDbId) {
    this.plotDbId = plotDbId;
    return this;
  }

   /**
   *  The ID which uniquely identifies a plot. Usually &#x27;plotNumber&#x27;
   * @return plotDbId
  **/
  @Schema(description = " The ID which uniquely identifies a plot. Usually 'plotNumber'")
  public String getPlotDbId() {
    return plotDbId;
  }

  public void setPlotDbId(String plotDbId) {
    this.plotDbId = plotDbId;
  }

  public Sample sampleDbId(String sampleDbId) {
    this.sampleDbId = sampleDbId;
    return this;
  }

   /**
   * The ID which uniquely identifies a sample
   * @return sampleDbId
  **/
  @Schema(description = "The ID which uniquely identifies a sample")
  public String getSampleDbId() {
    return sampleDbId;
  }

  public void setSampleDbId(String sampleDbId) {
    this.sampleDbId = sampleDbId;
  }

  public Sample sampleTimestamp(OffsetDateTime sampleTimestamp) {
    this.sampleTimestamp = sampleTimestamp;
    return this;
  }

   /**
   * The date and time a sample was collected from the field
   * @return sampleTimestamp
  **/
  @Schema(description = "The date and time a sample was collected from the field")
  public OffsetDateTime getSampleTimestamp() {
    return sampleTimestamp;
  }

  public void setSampleTimestamp(OffsetDateTime sampleTimestamp) {
    this.sampleTimestamp = sampleTimestamp;
  }

  public Sample sampleType(String sampleType) {
    this.sampleType = sampleType;
    return this;
  }

   /**
   * The type of sample taken. ex. &#x27;DNA&#x27;, &#x27;RNA&#x27;, &#x27;Tissue&#x27;, etc 
   * @return sampleType
  **/
  @Schema(description = "The type of sample taken. ex. 'DNA', 'RNA', 'Tissue', etc ")
  public String getSampleType() {
    return sampleType;
  }

  public void setSampleType(String sampleType) {
    this.sampleType = sampleType;
  }

  public Sample studyDbId(String studyDbId) {
    this.studyDbId = studyDbId;
    return this;
  }

   /**
   * The ID which uniquely identifies a study within the given database server
   * @return studyDbId
  **/
  @Schema(description = "The ID which uniquely identifies a study within the given database server")
  public String getStudyDbId() {
    return studyDbId;
  }

  public void setStudyDbId(String studyDbId) {
    this.studyDbId = studyDbId;
  }

  public Sample takenBy(String takenBy) {
    this.takenBy = takenBy;
    return this;
  }

   /**
   * The name or identifier of the entity which took the sample from the field
   * @return takenBy
  **/
  @Schema(description = "The name or identifier of the entity which took the sample from the field")
  public String getTakenBy() {
    return takenBy;
  }

  public void setTakenBy(String takenBy) {
    this.takenBy = takenBy;
  }

  public Sample tissueType(String tissueType) {
    this.tissueType = tissueType;
    return this;
  }

   /**
   * The type of tissue sampled. ex. &#x27;Leaf&#x27;, &#x27;Root&#x27;, etc.
   * @return tissueType
  **/
  @Schema(description = "The type of tissue sampled. ex. 'Leaf', 'Root', etc.")
  public String getTissueType() {
    return tissueType;
  }

  public void setTissueType(String tissueType) {
    this.tissueType = tissueType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sample sample = (Sample) o;
    return Objects.equals(this.germplasmDbId, sample.germplasmDbId) &&
        Objects.equals(this.notes, sample.notes) &&
        Objects.equals(this.observationUnitDbId, sample.observationUnitDbId) &&
        Objects.equals(this.plantDbId, sample.plantDbId) &&
        Objects.equals(this.plateDbId, sample.plateDbId) &&
        Objects.equals(this.plateIndex, sample.plateIndex) &&
        Objects.equals(this.plotDbId, sample.plotDbId) &&
        Objects.equals(this.sampleDbId, sample.sampleDbId) &&
        Objects.equals(this.sampleTimestamp, sample.sampleTimestamp) &&
        Objects.equals(this.sampleType, sample.sampleType) &&
        Objects.equals(this.studyDbId, sample.studyDbId) &&
        Objects.equals(this.takenBy, sample.takenBy) &&
        Objects.equals(this.tissueType, sample.tissueType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(germplasmDbId, notes, observationUnitDbId, plantDbId, plateDbId, plateIndex, plotDbId, sampleDbId, sampleTimestamp, sampleType, studyDbId, takenBy, tissueType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sample {\n");
    
    sb.append("    germplasmDbId: ").append(toIndentedString(germplasmDbId)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    observationUnitDbId: ").append(toIndentedString(observationUnitDbId)).append("\n");
    sb.append("    plantDbId: ").append(toIndentedString(plantDbId)).append("\n");
    sb.append("    plateDbId: ").append(toIndentedString(plateDbId)).append("\n");
    sb.append("    plateIndex: ").append(toIndentedString(plateIndex)).append("\n");
    sb.append("    plotDbId: ").append(toIndentedString(plotDbId)).append("\n");
    sb.append("    sampleDbId: ").append(toIndentedString(sampleDbId)).append("\n");
    sb.append("    sampleTimestamp: ").append(toIndentedString(sampleTimestamp)).append("\n");
    sb.append("    sampleType: ").append(toIndentedString(sampleType)).append("\n");
    sb.append("    studyDbId: ").append(toIndentedString(studyDbId)).append("\n");
    sb.append("    takenBy: ").append(toIndentedString(takenBy)).append("\n");
    sb.append("    tissueType: ").append(toIndentedString(tissueType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

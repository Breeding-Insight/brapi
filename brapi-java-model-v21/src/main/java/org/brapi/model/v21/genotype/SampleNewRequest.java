/*
 * BrAPI-Genotyping
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/RESTfulness\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Response_Structure\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Dates_and_Times\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Location_Coordinates\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Error_Handling\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Search_Services\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.model.v21.genotype;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.util.*;

/**
 * SampleNewRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-25T14:54:00.515Z[GMT]")
public class SampleNewRequest {
    @SerializedName("additionalInfo")
    private Map<String, String> additionalInfo = null;

    @SerializedName("column")
    private Integer column = null;

    @SerializedName("externalReferences")
    private List<ExternalReferencesInner> externalReferences = null;

    @SerializedName("germplasmDbId")
    private String germplasmDbId = null;

    @SerializedName("observationUnitDbId")
    private String observationUnitDbId = null;

    @SerializedName("plateDbId")
    private String plateDbId = null;

    @SerializedName("plateName")
    private String plateName = null;

    @SerializedName("programDbId")
    private String programDbId = null;

    @SerializedName("row")
    private String row = null;

    @SerializedName("sampleBarcode")
    private String sampleBarcode = null;

    @SerializedName("sampleDescription")
    private String sampleDescription = null;

    @SerializedName("sampleGroupDbId")
    private String sampleGroupDbId = null;

    @SerializedName("sampleName")
    private String sampleName = null;

    @SerializedName("samplePUI")
    private String samplePUI = null;

    @SerializedName("sampleTimestamp")
    private OffsetDateTime sampleTimestamp = null;

    @SerializedName("sampleType")
    private String sampleType = null;

    @SerializedName("studyDbId")
    private String studyDbId = null;

    @SerializedName("takenBy")
    private String takenBy = null;

    @SerializedName("tissueType")
    private String tissueType = null;

    @SerializedName("trialDbId")
    private String trialDbId = null;

    @SerializedName("well")
    private String well = null;

    public SampleNewRequest additionalInfo(Map<String, String> additionalInfo) {
        this.additionalInfo = additionalInfo;
        return this;
    }

    public SampleNewRequest putAdditionalInfoItem(String key, String additionalInfoItem) {
        if (this.additionalInfo == null) {
            this.additionalInfo = new HashMap<String, String>();
        }
        this.additionalInfo.put(key, additionalInfoItem);
        return this;
    }

    /**
     * A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.
     *
     * @return additionalInfo
     **/
    @Schema(description = "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.")
    public Map<String, String> getAdditionalInfo() {
        return additionalInfo;
    }

    public void setAdditionalInfo(Map<String, String> additionalInfo) {
        this.additionalInfo = additionalInfo;
    }

    public SampleNewRequest column(Integer column) {
        this.column = column;
        return this;
    }

    /**
     * The Column identifier for this &#x60;Sample&#x60; location in the &#x60;Plate&#x60;
     * minimum: 1
     * maximum: 12
     *
     * @return column
     **/
    @Schema(example = "6", description = "The Column identifier for this `Sample` location in the `Plate`")
    public Integer getColumn() {
        return column;
    }

    public void setColumn(Integer column) {
        this.column = column;
    }

    public SampleNewRequest externalReferences(List<ExternalReferencesInner> externalReferences) {
        this.externalReferences = externalReferences;
        return this;
    }

    public SampleNewRequest addExternalReferencesItem(ExternalReferencesInner externalReferencesItem) {
        if (this.externalReferences == null) {
            this.externalReferences = new ArrayList<ExternalReferencesInner>();
        }
        this.externalReferences.add(externalReferencesItem);
        return this;
    }

    /**
     * An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
     *
     * @return externalReferences
     **/
    @Schema(example = "[{\"referenceId\":\"doi:10.155454/12341234\",\"referenceSource\":\"DOI\"},{\"referenceId\":\"75a50e76\",\"referenceSource\":\"Remote Data Collection Upload Tool\"}]", description = "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.")
    public List<ExternalReferencesInner> getExternalReferences() {
        return externalReferences;
    }

    public void setExternalReferences(List<ExternalReferencesInner> externalReferences) {
        this.externalReferences = externalReferences;
    }

    public SampleNewRequest germplasmDbId(String germplasmDbId) {
        this.germplasmDbId = germplasmDbId;
        return this;
    }

    /**
     * The ID which uniquely identifies a &#x60;Germplasm&#x60;
     *
     * @return germplasmDbId
     **/
    @Schema(example = "7e08d538", description = "The ID which uniquely identifies a `Germplasm`")
    public String getGermplasmDbId() {
        return germplasmDbId;
    }

    public void setGermplasmDbId(String germplasmDbId) {
        this.germplasmDbId = germplasmDbId;
    }

    public SampleNewRequest observationUnitDbId(String observationUnitDbId) {
        this.observationUnitDbId = observationUnitDbId;
        return this;
    }

    /**
     * The ID which uniquely identifies an &#x60;ObservationUnit&#x60;
     *
     * @return observationUnitDbId
     **/
    @Schema(example = "073a3ce5", description = "The ID which uniquely identifies an `ObservationUnit`")
    public String getObservationUnitDbId() {
        return observationUnitDbId;
    }

    public void setObservationUnitDbId(String observationUnitDbId) {
        this.observationUnitDbId = observationUnitDbId;
    }

    public SampleNewRequest plateDbId(String plateDbId) {
        this.plateDbId = plateDbId;
        return this;
    }

    /**
     * The ID which uniquely identifies a &#x60;Plate&#x60; of &#x60;Sample&#x60;
     *
     * @return plateDbId
     **/
    @Schema(example = "2dce16d1", description = "The ID which uniquely identifies a `Plate` of `Sample`")
    public String getPlateDbId() {
        return plateDbId;
    }

    public void setPlateDbId(String plateDbId) {
        this.plateDbId = plateDbId;
    }

    public SampleNewRequest plateName(String plateName) {
        this.plateName = plateName;
        return this;
    }

    /**
     * The human readable name of a &#x60;Plate&#x60;
     *
     * @return plateName
     **/
    @Schema(example = "Plate_alpha_20191022", description = "The human readable name of a `Plate`")
    public String getPlateName() {
        return plateName;
    }

    public void setPlateName(String plateName) {
        this.plateName = plateName;
    }

    public SampleNewRequest programDbId(String programDbId) {
        this.programDbId = programDbId;
        return this;
    }

    /**
     * The ID which uniquely identifies a &#x60;Program&#x60; within the given database server
     *
     * @return programDbId
     **/
    @Schema(example = "bd748e00", description = "The ID which uniquely identifies a `Program` within the given database server")
    public String getProgramDbId() {
        return programDbId;
    }

    public void setProgramDbId(String programDbId) {
        this.programDbId = programDbId;
    }

    public SampleNewRequest row(String row) {
        this.row = row;
        return this;
    }

    /**
     * The Row identifier for this &#x60;Sample&#x60; location in the &#x60;Plate&#x60;
     *
     * @return row
     **/
    @Schema(example = "B", description = "The Row identifier for this `Sample` location in the `Plate`")
    public String getRow() {
        return row;
    }

    public void setRow(String row) {
        this.row = row;
    }

    public SampleNewRequest sampleBarcode(String sampleBarcode) {
        this.sampleBarcode = sampleBarcode;
        return this;
    }

    /**
     * A unique identifier physically attached to the &#x60;Sample&#x60;
     *
     * @return sampleBarcode
     **/
    @Schema(example = "3a027b59", description = "A unique identifier physically attached to the `Sample`")
    public String getSampleBarcode() {
        return sampleBarcode;
    }

    public void setSampleBarcode(String sampleBarcode) {
        this.sampleBarcode = sampleBarcode;
    }

    public SampleNewRequest sampleDescription(String sampleDescription) {
        this.sampleDescription = sampleDescription;
        return this;
    }

    /**
     * Description of a &#x60;Sample&#x60; &lt;br&gt;MIAPPE V1.1 (DM-79) Sample description - Any information not captured by the other sample fields, including quantification, sample treatments and processing.
     *
     * @return sampleDescription
     **/
    @Schema(example = "This sample was taken from the root of a tree", description = "Description of a `Sample` <br>MIAPPE V1.1 (DM-79) Sample description - Any information not captured by the other sample fields, including quantification, sample treatments and processing.")
    public String getSampleDescription() {
        return sampleDescription;
    }

    public void setSampleDescription(String sampleDescription) {
        this.sampleDescription = sampleDescription;
    }

    public SampleNewRequest sampleGroupDbId(String sampleGroupDbId) {
        this.sampleGroupDbId = sampleGroupDbId;
        return this;
    }

    /**
     * The ID which uniquely identifies a group of &#x60;Samples&#x60;
     *
     * @return sampleGroupDbId
     **/
    @Schema(example = "8524b436", description = "The ID which uniquely identifies a group of `Samples`")
    public String getSampleGroupDbId() {
        return sampleGroupDbId;
    }

    public void setSampleGroupDbId(String sampleGroupDbId) {
        this.sampleGroupDbId = sampleGroupDbId;
    }

    public SampleNewRequest sampleName(String sampleName) {
        this.sampleName = sampleName;
        return this;
    }

    /**
     * The human readable name of the &#x60;Sample&#x60;
     *
     * @return sampleName
     **/
    @Schema(example = "Sample_alpha_20191022", description = "The human readable name of the `Sample`")
    public String getSampleName() {
        return sampleName;
    }

    public void setSampleName(String sampleName) {
        this.sampleName = sampleName;
    }

    public SampleNewRequest samplePUI(String samplePUI) {
        this.samplePUI = samplePUI;
        return this;
    }

    /**
     * A permanent unique identifier for the &#x60;Sample&#x60; (DOI, URL, UUID, etc) &lt;br&gt; MIAPPE V1.1 (DM-81) External ID - An identifier for the sample in a persistent repository, comprising the name of the repository and the accession number of the observation unit therein. Submission to the EBI Biosamples repository is recommended. URI are recommended when possible.
     *
     * @return samplePUI
     **/
    @Schema(example = "doi:10.15454/312953986E3", description = "A permanent unique identifier for the `Sample` (DOI, URL, UUID, etc) <br> MIAPPE V1.1 (DM-81) External ID - An identifier for the sample in a persistent repository, comprising the name of the repository and the accession number of the observation unit therein. Submission to the EBI Biosamples repository is recommended. URI are recommended when possible. ")
    public String getSamplePUI() {
        return samplePUI;
    }

    public void setSamplePUI(String samplePUI) {
        this.samplePUI = samplePUI;
    }

    public SampleNewRequest sampleTimestamp(OffsetDateTime sampleTimestamp) {
        this.sampleTimestamp = sampleTimestamp;
        return this;
    }

    /**
     * The date and time a &#x60;Sample&#x60; was collected from the field &lt;br&gt; MIAPPE V1.1 (DM-80) Collection date - The date and time when the sample was collected / harvested
     *
     * @return sampleTimestamp
     **/
    @Schema(description = "The date and time a `Sample` was collected from the field <br> MIAPPE V1.1 (DM-80) Collection date - The date and time when the sample was collected / harvested")
    public OffsetDateTime getSampleTimestamp() {
        return sampleTimestamp;
    }

    public void setSampleTimestamp(OffsetDateTime sampleTimestamp) {
        this.sampleTimestamp = sampleTimestamp;
    }

    public SampleNewRequest sampleType(String sampleType) {
        this.sampleType = sampleType;
        return this;
    }

    /**
     * The type of &#x60;Sample&#x60; taken. ex. &#x27;DNA&#x27;, &#x27;RNA&#x27;, &#x27;Tissue&#x27;, etc
     *
     * @return sampleType
     **/
    @Schema(example = "Tissue", description = "The type of `Sample` taken. ex. 'DNA', 'RNA', 'Tissue', etc")
    public String getSampleType() {
        return sampleType;
    }

    public void setSampleType(String sampleType) {
        this.sampleType = sampleType;
    }

    public SampleNewRequest studyDbId(String studyDbId) {
        this.studyDbId = studyDbId;
        return this;
    }

    /**
     * The ID which uniquely identifies a &#x60;Study&#x60; within the given database server
     *
     * @return studyDbId
     **/
    @Schema(example = "64bd6bf9", description = "The ID which uniquely identifies a `Study` within the given database server")
    public String getStudyDbId() {
        return studyDbId;
    }

    public void setStudyDbId(String studyDbId) {
        this.studyDbId = studyDbId;
    }

    public SampleNewRequest takenBy(String takenBy) {
        this.takenBy = takenBy;
        return this;
    }

    /**
     * The name or identifier of the entity which took the &#x60;Sample&#x60; from the field
     *
     * @return takenBy
     **/
    @Schema(example = "Bob", description = "The name or identifier of the entity which took the `Sample` from the field")
    public String getTakenBy() {
        return takenBy;
    }

    public void setTakenBy(String takenBy) {
        this.takenBy = takenBy;
    }

    public SampleNewRequest tissueType(String tissueType) {
        this.tissueType = tissueType;
        return this;
    }

    /**
     * The type of tissue sampled. ex. &#x27;Leaf&#x27;, &#x27;Root&#x27;, etc. &lt;br&gt; MIAPPE V1.1 (DM-78) Plant anatomical entity - A description of  the plant part (e.g. leaf) or the plant product (e.g. resin) from which the sample was taken, in the form of an accession number to a suitable controlled vocabulary (Plant Ontology).
     *
     * @return tissueType
     **/
    @Schema(example = "Root", description = "The type of tissue sampled. ex. 'Leaf', 'Root', etc. <br> MIAPPE V1.1 (DM-78) Plant anatomical entity - A description of  the plant part (e.g. leaf) or the plant product (e.g. resin) from which the sample was taken, in the form of an accession number to a suitable controlled vocabulary (Plant Ontology).")
    public String getTissueType() {
        return tissueType;
    }

    public void setTissueType(String tissueType) {
        this.tissueType = tissueType;
    }

    public SampleNewRequest trialDbId(String trialDbId) {
        this.trialDbId = trialDbId;
        return this;
    }

    /**
     * The ID which uniquely identifies a &#x60;Trial&#x60; within the given database server
     *
     * @return trialDbId
     **/
    @Schema(example = "d34c5349", description = "The ID which uniquely identifies a `Trial` within the given database server")
    public String getTrialDbId() {
        return trialDbId;
    }

    public void setTrialDbId(String trialDbId) {
        this.trialDbId = trialDbId;
    }

    public SampleNewRequest well(String well) {
        this.well = well;
        return this;
    }

    /**
     * The Well identifier for this &#x60;Sample&#x60; location in the &#x60;Plate&#x60;. Usually a concatenation of Row and Column, or just a number if the &#x60;Samples&#x60; are not part of an ordered &#x60;Plate&#x60;.
     *
     * @return well
     **/
    @Schema(example = "B6", description = "The Well identifier for this `Sample` location in the `Plate`. Usually a concatenation of Row and Column, or just a number if the `Samples` are not part of an ordered `Plate`.")
    public String getWell() {
        return well;
    }

    public void setWell(String well) {
        this.well = well;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SampleNewRequest sampleNewRequest = (SampleNewRequest) o;
        return Objects.equals(this.additionalInfo, sampleNewRequest.additionalInfo) &&
                Objects.equals(this.column, sampleNewRequest.column) &&
                Objects.equals(this.externalReferences, sampleNewRequest.externalReferences) &&
                Objects.equals(this.germplasmDbId, sampleNewRequest.germplasmDbId) &&
                Objects.equals(this.observationUnitDbId, sampleNewRequest.observationUnitDbId) &&
                Objects.equals(this.plateDbId, sampleNewRequest.plateDbId) &&
                Objects.equals(this.plateName, sampleNewRequest.plateName) &&
                Objects.equals(this.programDbId, sampleNewRequest.programDbId) &&
                Objects.equals(this.row, sampleNewRequest.row) &&
                Objects.equals(this.sampleBarcode, sampleNewRequest.sampleBarcode) &&
                Objects.equals(this.sampleDescription, sampleNewRequest.sampleDescription) &&
                Objects.equals(this.sampleGroupDbId, sampleNewRequest.sampleGroupDbId) &&
                Objects.equals(this.sampleName, sampleNewRequest.sampleName) &&
                Objects.equals(this.samplePUI, sampleNewRequest.samplePUI) &&
                Objects.equals(this.sampleTimestamp, sampleNewRequest.sampleTimestamp) &&
                Objects.equals(this.sampleType, sampleNewRequest.sampleType) &&
                Objects.equals(this.studyDbId, sampleNewRequest.studyDbId) &&
                Objects.equals(this.takenBy, sampleNewRequest.takenBy) &&
                Objects.equals(this.tissueType, sampleNewRequest.tissueType) &&
                Objects.equals(this.trialDbId, sampleNewRequest.trialDbId) &&
                Objects.equals(this.well, sampleNewRequest.well);
    }

    @Override
    public int hashCode() {
        return Objects.hash(additionalInfo, column, externalReferences, germplasmDbId, observationUnitDbId, plateDbId, plateName, programDbId, row, sampleBarcode, sampleDescription, sampleGroupDbId, sampleName, samplePUI, sampleTimestamp, sampleType, studyDbId, takenBy, tissueType, trialDbId, well);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SampleNewRequest {\n");

        sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
        sb.append("    column: ").append(toIndentedString(column)).append("\n");
        sb.append("    externalReferences: ").append(toIndentedString(externalReferences)).append("\n");
        sb.append("    germplasmDbId: ").append(toIndentedString(germplasmDbId)).append("\n");
        sb.append("    observationUnitDbId: ").append(toIndentedString(observationUnitDbId)).append("\n");
        sb.append("    plateDbId: ").append(toIndentedString(plateDbId)).append("\n");
        sb.append("    plateName: ").append(toIndentedString(plateName)).append("\n");
        sb.append("    programDbId: ").append(toIndentedString(programDbId)).append("\n");
        sb.append("    row: ").append(toIndentedString(row)).append("\n");
        sb.append("    sampleBarcode: ").append(toIndentedString(sampleBarcode)).append("\n");
        sb.append("    sampleDescription: ").append(toIndentedString(sampleDescription)).append("\n");
        sb.append("    sampleGroupDbId: ").append(toIndentedString(sampleGroupDbId)).append("\n");
        sb.append("    sampleName: ").append(toIndentedString(sampleName)).append("\n");
        sb.append("    samplePUI: ").append(toIndentedString(samplePUI)).append("\n");
        sb.append("    sampleTimestamp: ").append(toIndentedString(sampleTimestamp)).append("\n");
        sb.append("    sampleType: ").append(toIndentedString(sampleType)).append("\n");
        sb.append("    studyDbId: ").append(toIndentedString(studyDbId)).append("\n");
        sb.append("    takenBy: ").append(toIndentedString(takenBy)).append("\n");
        sb.append("    tissueType: ").append(toIndentedString(tissueType)).append("\n");
        sb.append("    trialDbId: ").append(toIndentedString(trialDbId)).append("\n");
        sb.append("    well: ").append(toIndentedString(well)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

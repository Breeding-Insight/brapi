/*
 * BrAPI-Core
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/RESTfulness\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Response_Structure\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Dates_and_Times\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Location_Coordinates\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Error_Handling\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Search_Services\">Search Services</a></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore21.docs.apiary.io\">Apiary</a></div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.0/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.0\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore20.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.model.v21.core;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.*;

/**
 * Location
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-25T17:44:03.583Z[GMT]")
public class Location {
    @SerializedName("abbreviation")
    private String abbreviation = null;

    @SerializedName("additionalInfo")
    private Map<String, String> additionalInfo = null;

    @SerializedName("coordinateDescription")
    private String coordinateDescription = null;

    @SerializedName("coordinateUncertainty")
    private String coordinateUncertainty = null;

    @SerializedName("coordinates")
    private GeoJSON coordinates = null;

    @SerializedName("countryCode")
    private String countryCode = null;

    @SerializedName("countryName")
    private String countryName = null;

    @SerializedName("documentationURL")
    private String documentationURL = null;

    @SerializedName("environmentType")
    private String environmentType = null;

    @SerializedName("exposure")
    private String exposure = null;

    @SerializedName("externalReferences")
    private List<ExternalReferencesInner> externalReferences = null;

    @SerializedName("instituteAddress")
    private String instituteAddress = null;

    @SerializedName("instituteName")
    private String instituteName = null;

    @SerializedName("locationDbId")
    private String locationDbId = null;

    @SerializedName("locationName")
    private String locationName = null;

    @SerializedName("locationType")
    private String locationType = null;

    @SerializedName("parentLocationDbId")
    private String parentLocationDbId = null;

    @SerializedName("parentLocationName")
    private String parentLocationName = null;

    @SerializedName("siteStatus")
    private String siteStatus = null;

    @SerializedName("slope")
    private String slope = null;

    @SerializedName("topography")
    private String topography = null;

    public Location abbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
        return this;
    }

    /**
     * A shortened version of the human readable name for a Location
     *
     * @return abbreviation
     **/
    @Schema(example = "L1", description = "A shortened version of the human readable name for a Location")
    public String getAbbreviation() {
        return abbreviation;
    }

    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    public Location additionalInfo(Map<String, String> additionalInfo) {
        this.additionalInfo = additionalInfo;
        return this;
    }

    public Location putAdditionalInfoItem(String key, String additionalInfoItem) {
        if (this.additionalInfo == null) {
            this.additionalInfo = new HashMap<String, String>();
        }
        this.additionalInfo.put(key, additionalInfoItem);
        return this;
    }

    /**
     * A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.
     *
     * @return additionalInfo
     **/
    @Schema(example = "{}", description = "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.")
    public Map<String, String> getAdditionalInfo() {
        return additionalInfo;
    }

    public void setAdditionalInfo(Map<String, String> additionalInfo) {
        this.additionalInfo = additionalInfo;
    }

    public Location coordinateDescription(String coordinateDescription) {
        this.coordinateDescription = coordinateDescription;
        return this;
    }

    /**
     * Describes the precision and landmarks of the coordinate values used for a Location. (ex. the site, the nearest town, a 10 kilometers radius circle, +/- 20 meters, etc)
     *
     * @return coordinateDescription
     **/
    @Schema(example = "North East corner of greenhouse", description = "Describes the precision and landmarks of the coordinate values used for a Location. (ex. the site, the nearest town, a 10 kilometers radius circle, +/- 20 meters, etc)")
    public String getCoordinateDescription() {
        return coordinateDescription;
    }

    public void setCoordinateDescription(String coordinateDescription) {
        this.coordinateDescription = coordinateDescription;
    }

    public Location coordinateUncertainty(String coordinateUncertainty) {
        this.coordinateUncertainty = coordinateUncertainty;
        return this;
    }

    /**
     * Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown.
     *
     * @return coordinateUncertainty
     **/
    @Schema(example = "20", description = "Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown.")
    public String getCoordinateUncertainty() {
        return coordinateUncertainty;
    }

    public void setCoordinateUncertainty(String coordinateUncertainty) {
        this.coordinateUncertainty = coordinateUncertainty;
    }

    public Location coordinates(GeoJSON coordinates) {
        this.coordinates = coordinates;
        return this;
    }

    /**
     * Get coordinates
     *
     * @return coordinates
     **/
    @Schema(description = "")
    public GeoJSON getCoordinates() {
        return coordinates;
    }

    public void setCoordinates(GeoJSON coordinates) {
        this.coordinates = coordinates;
    }

    public Location countryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }

    /**
     * [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec &lt;br/&gt; MIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.&#x27;
     *
     * @return countryCode
     **/
    @Schema(example = "PER", description = "[ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec <br/> MIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.'")
    public String getCountryCode() {
        return countryCode;
    }

    public void setCountryCode(String countryCode) {
        this.countryCode = countryCode;
    }

    public Location countryName(String countryName) {
        this.countryName = countryName;
        return this;
    }

    /**
     * The full name of the country where a Location is located &lt;br/&gt; MIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.
     *
     * @return countryName
     **/
    @Schema(example = "Peru", description = "The full name of the country where a Location is located <br/> MIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.")
    public String getCountryName() {
        return countryName;
    }

    public void setCountryName(String countryName) {
        this.countryName = countryName;
    }

    public Location documentationURL(String documentationURL) {
        this.documentationURL = documentationURL;
        return this;
    }

    /**
     * A URL to the human readable documentation of an object
     *
     * @return documentationURL
     **/
    @Schema(example = "https://brapi.org", description = "A URL to the human readable documentation of an object")
    public String getDocumentationURL() {
        return documentationURL;
    }

    public void setDocumentationURL(String documentationURL) {
        this.documentationURL = documentationURL;
    }

    public Location environmentType(String environmentType) {
        this.environmentType = environmentType;
        return this;
    }

    /**
     * Describes the general type of environment of a Location. (ex. forest, field, nursery, etc)
     *
     * @return environmentType
     **/
    @Schema(example = "Nursery", description = "Describes the general type of environment of a Location. (ex. forest, field, nursery, etc)")
    public String getEnvironmentType() {
        return environmentType;
    }

    public void setEnvironmentType(String environmentType) {
        this.environmentType = environmentType;
    }

    public Location exposure(String exposure) {
        this.exposure = exposure;
        return this;
    }

    /**
     * Describes the level of protection/exposure for things like sun light and wind at a particular Location
     *
     * @return exposure
     **/
    @Schema(example = "Structure, no exposure", description = "Describes the level of protection/exposure for things like sun light and wind at a particular Location")
    public String getExposure() {
        return exposure;
    }

    public void setExposure(String exposure) {
        this.exposure = exposure;
    }

    public Location externalReferences(List<ExternalReferencesInner> externalReferences) {
        this.externalReferences = externalReferences;
        return this;
    }

    public Location addExternalReferencesItem(ExternalReferencesInner externalReferencesItem) {
        if (this.externalReferences == null) {
            this.externalReferences = new ArrayList<ExternalReferencesInner>();
        }
        this.externalReferences.add(externalReferencesItem);
        return this;
    }

    /**
     * An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
     *
     * @return externalReferences
     **/
    @Schema(example = "[{\"referenceId\":\"doi:10.155454/12341234\",\"referenceSource\":\"DOI\"},{\"referenceId\":\"75a50e76\",\"referenceSource\":\"Remote Data Collection Upload Tool\"}]", description = "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.")
    public List<ExternalReferencesInner> getExternalReferences() {
        return externalReferences;
    }

    public void setExternalReferences(List<ExternalReferencesInner> externalReferences) {
        this.externalReferences = externalReferences;
    }

    public Location instituteAddress(String instituteAddress) {
        this.instituteAddress = instituteAddress;
        return this;
    }

    /**
     * The street address of the institute at a particular Location &lt;br/&gt; MIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.
     *
     * @return instituteAddress
     **/
    @Schema(example = "71 Pilgrim Avenue Chevy Chase MD 20815", description = "The street address of the institute at a particular Location <br/> MIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.")
    public String getInstituteAddress() {
        return instituteAddress;
    }

    public void setInstituteAddress(String instituteAddress) {
        this.instituteAddress = instituteAddress;
    }

    public Location instituteName(String instituteName) {
        this.instituteName = instituteName;
        return this;
    }

    /**
     * The full name of the institute at a particular Location &lt;br/&gt; MIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.
     *
     * @return instituteName
     **/
    @Schema(example = "Plant Science Institute", description = "The full name of the institute at a particular Location <br/> MIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.")
    public String getInstituteName() {
        return instituteName;
    }

    public void setInstituteName(String instituteName) {
        this.instituteName = instituteName;
    }

    public Location locationDbId(String locationDbId) {
        this.locationDbId = locationDbId;
        return this;
    }

    /**
     * The unique identifier for a Location
     *
     * @return locationDbId
     **/
    @Schema(example = "3cfdd67d", description = "The unique identifier for a Location")
    public String getLocationDbId() {
        return locationDbId;
    }

    public void setLocationDbId(String locationDbId) {
        this.locationDbId = locationDbId;
    }

    public Location locationName(String locationName) {
        this.locationName = locationName;
        return this;
    }

    /**
     * A human readable name for a Location &lt;br/&gt; MIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.
     *
     * @return locationName
     **/
    @Schema(example = "Location 1", description = "A human readable name for a Location <br/> MIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.")
    public String getLocationName() {
        return locationName;
    }

    public void setLocationName(String locationName) {
        this.locationName = locationName;
    }

    public Location locationType(String locationType) {
        this.locationType = locationType;
        return this;
    }

    /**
     * A short description of a type of Location (ex. Field Station, Breeding Location, Storage Location, etc)
     *
     * @return locationType
     **/
    @Schema(example = "Field Station", description = "A short description of a type of Location (ex. Field Station, Breeding Location, Storage Location, etc)")
    public String getLocationType() {
        return locationType;
    }

    public void setLocationType(String locationType) {
        this.locationType = locationType;
    }

    public Location parentLocationDbId(String parentLocationDbId) {
        this.parentLocationDbId = parentLocationDbId;
        return this;
    }

    /**
     * The unique identifier for a Location &lt;br/&gt; The Parent Location defines the encompassing Location that a smaller Location belongs to.  For example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.
     *
     * @return parentLocationDbId
     **/
    @Schema(example = "0a93f7d8", description = "The unique identifier for a Location <br/> The Parent Location defines the encompassing Location that a smaller Location belongs to.  For example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.")
    public String getParentLocationDbId() {
        return parentLocationDbId;
    }

    public void setParentLocationDbId(String parentLocationDbId) {
        this.parentLocationDbId = parentLocationDbId;
    }

    public Location parentLocationName(String parentLocationName) {
        this.parentLocationName = parentLocationName;
        return this;
    }

    /**
     * A human readable name for a location &lt;br/&gt; The Parent Location defines the encompassing Location that a smaller Location belongs to.   For example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.
     *
     * @return parentLocationName
     **/
    @Schema(example = "Field Station Alpha", description = "A human readable name for a location <br/> The Parent Location defines the encompassing Location that a smaller Location belongs to.   For example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.")
    public String getParentLocationName() {
        return parentLocationName;
    }

    public void setParentLocationName(String parentLocationName) {
        this.parentLocationName = parentLocationName;
    }

    public Location siteStatus(String siteStatus) {
        this.siteStatus = siteStatus;
        return this;
    }

    /**
     * Description of the accessibility of the location (ex. Public, Private)
     *
     * @return siteStatus
     **/
    @Schema(example = "Private", description = "Description of the accessibility of the location (ex. Public, Private)")
    public String getSiteStatus() {
        return siteStatus;
    }

    public void setSiteStatus(String siteStatus) {
        this.siteStatus = siteStatus;
    }

    public Location slope(String slope) {
        this.slope = slope;
        return this;
    }

    /**
     * Describes the approximate slope (height/distance) of a Location.
     *
     * @return slope
     **/
    @Schema(example = "0", description = "Describes the approximate slope (height/distance) of a Location.")
    public String getSlope() {
        return slope;
    }

    public void setSlope(String slope) {
        this.slope = slope;
    }

    public Location topography(String topography) {
        this.topography = topography;
        return this;
    }

    /**
     * Describes the topography of the land at a Location. (ex. Plateau, Cirque, Hill, Valley, etc)
     *
     * @return topography
     **/
    @Schema(example = "Valley", description = "Describes the topography of the land at a Location. (ex. Plateau, Cirque, Hill, Valley, etc)")
    public String getTopography() {
        return topography;
    }

    public void setTopography(String topography) {
        this.topography = topography;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Location location = (Location) o;
        return Objects.equals(this.abbreviation, location.abbreviation) &&
                Objects.equals(this.additionalInfo, location.additionalInfo) &&
                Objects.equals(this.coordinateDescription, location.coordinateDescription) &&
                Objects.equals(this.coordinateUncertainty, location.coordinateUncertainty) &&
                Objects.equals(this.coordinates, location.coordinates) &&
                Objects.equals(this.countryCode, location.countryCode) &&
                Objects.equals(this.countryName, location.countryName) &&
                Objects.equals(this.documentationURL, location.documentationURL) &&
                Objects.equals(this.environmentType, location.environmentType) &&
                Objects.equals(this.exposure, location.exposure) &&
                Objects.equals(this.externalReferences, location.externalReferences) &&
                Objects.equals(this.instituteAddress, location.instituteAddress) &&
                Objects.equals(this.instituteName, location.instituteName) &&
                Objects.equals(this.locationDbId, location.locationDbId) &&
                Objects.equals(this.locationName, location.locationName) &&
                Objects.equals(this.locationType, location.locationType) &&
                Objects.equals(this.parentLocationDbId, location.parentLocationDbId) &&
                Objects.equals(this.parentLocationName, location.parentLocationName) &&
                Objects.equals(this.siteStatus, location.siteStatus) &&
                Objects.equals(this.slope, location.slope) &&
                Objects.equals(this.topography, location.topography);
    }

    @Override
    public int hashCode() {
        return Objects.hash(abbreviation, additionalInfo, coordinateDescription, coordinateUncertainty, coordinates, countryCode, countryName, documentationURL, environmentType, exposure, externalReferences, instituteAddress, instituteName, locationDbId, locationName, locationType, parentLocationDbId, parentLocationName, siteStatus, slope, topography);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Location {\n");

        sb.append("    abbreviation: ").append(toIndentedString(abbreviation)).append("\n");
        sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
        sb.append("    coordinateDescription: ").append(toIndentedString(coordinateDescription)).append("\n");
        sb.append("    coordinateUncertainty: ").append(toIndentedString(coordinateUncertainty)).append("\n");
        sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
        sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
        sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
        sb.append("    documentationURL: ").append(toIndentedString(documentationURL)).append("\n");
        sb.append("    environmentType: ").append(toIndentedString(environmentType)).append("\n");
        sb.append("    exposure: ").append(toIndentedString(exposure)).append("\n");
        sb.append("    externalReferences: ").append(toIndentedString(externalReferences)).append("\n");
        sb.append("    instituteAddress: ").append(toIndentedString(instituteAddress)).append("\n");
        sb.append("    instituteName: ").append(toIndentedString(instituteName)).append("\n");
        sb.append("    locationDbId: ").append(toIndentedString(locationDbId)).append("\n");
        sb.append("    locationName: ").append(toIndentedString(locationName)).append("\n");
        sb.append("    locationType: ").append(toIndentedString(locationType)).append("\n");
        sb.append("    parentLocationDbId: ").append(toIndentedString(parentLocationDbId)).append("\n");
        sb.append("    parentLocationName: ").append(toIndentedString(parentLocationName)).append("\n");
        sb.append("    siteStatus: ").append(toIndentedString(siteStatus)).append("\n");
        sb.append("    slope: ").append(toIndentedString(slope)).append("\n");
        sb.append("    topography: ").append(toIndentedString(topography)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

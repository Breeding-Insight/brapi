/*
 * BrAPI-Phenotyping
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/RESTfulness\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Response_Structure\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Dates_and_Times\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Location_Coordinates\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Error_Handling\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Search_Services\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.model.v21.phenotype;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * All positional and layout information related to this Observation Unit   MIAPPE V1.1 (DM-73) Spatial distribution - Type and value of a spatial coordinate (georeference or relative)  or level of observation (plot 45, subblock 7, block 2) provided as a key-value pair of the form type:value.  Levels of observation must be consistent with those listed in the Study section.
 */
@Schema(description = "All positional and layout information related to this Observation Unit   MIAPPE V1.1 (DM-73) Spatial distribution - Type and value of a spatial coordinate (georeference or relative)  or level of observation (plot 45, subblock 7, block 2) provided as a key-value pair of the form type:value.  Levels of observation must be consistent with those listed in the Study section.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-25T17:44:48.481Z[GMT]")
public class ObservationUnitObservationUnitPosition {
    /**
     * The type of entry for this observation unit. ex. \&quot;CHECK\&quot;, \&quot;TEST\&quot;, \&quot;FILLER\&quot;
     */
    @JsonAdapter(EntryTypeEnum.Adapter.class)
    public enum EntryTypeEnum {
        CHECK("CHECK"),
        TEST("TEST"),
        FILLER("FILLER");

        private String value;

        EntryTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static EntryTypeEnum fromValue(String input) {
            for (EntryTypeEnum b : EntryTypeEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<EntryTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final EntryTypeEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public EntryTypeEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return EntryTypeEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("entryType")
    private EntryTypeEnum entryType = null;

    @SerializedName("geoCoordinates")
    private GeoJSON geoCoordinates = null;

    @SerializedName("observationLevel")
    private ObservationUnitLevel2 observationLevel = null;

    @SerializedName("observationLevelRelationships")
    private List<ObservationUnitLevelRelationship1> observationLevelRelationships = null;

    @SerializedName("positionCoordinateX")
    private String positionCoordinateX = null;

    /**
     * The type of positional coordinate used. Must be one of the following values   LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See &#x27;Location Coordinate Encoding&#x27; for details   LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See &#x27;Location Coordinate Encoding&#x27; for details   PLANTED_ROW - The physical planted row number   PLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row   GRID_ROW - The row index number of a square grid overlay   GRID_COL - The column index number of a square grid overlay   MEASURED_ROW - The distance in meters from a defined 0-th row   MEASURED_COL - The distance in meters from a defined 0-th column
     */
    @JsonAdapter(PositionCoordinateXTypeEnum.Adapter.class)
    public enum PositionCoordinateXTypeEnum {
        LONGITUDE("LONGITUDE"),
        LATITUDE("LATITUDE"),
        PLANTED_ROW("PLANTED_ROW"),
        PLANTED_INDIVIDUAL("PLANTED_INDIVIDUAL"),
        GRID_ROW("GRID_ROW"),
        GRID_COL("GRID_COL"),
        MEASURED_ROW("MEASURED_ROW"),
        MEASURED_COL("MEASURED_COL");

        private String value;

        PositionCoordinateXTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static PositionCoordinateXTypeEnum fromValue(String input) {
            for (PositionCoordinateXTypeEnum b : PositionCoordinateXTypeEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<PositionCoordinateXTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final PositionCoordinateXTypeEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public PositionCoordinateXTypeEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return PositionCoordinateXTypeEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("positionCoordinateXType")
    private PositionCoordinateXTypeEnum positionCoordinateXType = null;

    @SerializedName("positionCoordinateY")
    private String positionCoordinateY = null;

    /**
     * The type of positional coordinate used. Must be one of the following values   LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See &#x27;Location Coordinate Encoding&#x27; for details   LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See &#x27;Location Coordinate Encoding&#x27; for details   PLANTED_ROW - The physical planted row number    PLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row   GRID_ROW - The row index number of a square grid overlay   GRID_COL - The column index number of a square grid overlay   MEASURED_ROW - The distance in meters from a defined 0-th row   MEASURED_COL - The distance in meters from a defined 0-th column
     */
    @JsonAdapter(PositionCoordinateYTypeEnum.Adapter.class)
    public enum PositionCoordinateYTypeEnum {
        LONGITUDE("LONGITUDE"),
        LATITUDE("LATITUDE"),
        PLANTED_ROW("PLANTED_ROW"),
        PLANTED_INDIVIDUAL("PLANTED_INDIVIDUAL"),
        GRID_ROW("GRID_ROW"),
        GRID_COL("GRID_COL"),
        MEASURED_ROW("MEASURED_ROW"),
        MEASURED_COL("MEASURED_COL");

        private String value;

        PositionCoordinateYTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static PositionCoordinateYTypeEnum fromValue(String input) {
            for (PositionCoordinateYTypeEnum b : PositionCoordinateYTypeEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<PositionCoordinateYTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final PositionCoordinateYTypeEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public PositionCoordinateYTypeEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return PositionCoordinateYTypeEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("positionCoordinateYType")
    private PositionCoordinateYTypeEnum positionCoordinateYType = null;

    public ObservationUnitObservationUnitPosition entryType(EntryTypeEnum entryType) {
        this.entryType = entryType;
        return this;
    }

    /**
     * The type of entry for this observation unit. ex. \&quot;CHECK\&quot;, \&quot;TEST\&quot;, \&quot;FILLER\&quot;
     *
     * @return entryType
     **/
    @Schema(example = "TEST", description = "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"")
    public EntryTypeEnum getEntryType() {
        return entryType;
    }

    public void setEntryType(EntryTypeEnum entryType) {
        this.entryType = entryType;
    }

    public ObservationUnitObservationUnitPosition geoCoordinates(GeoJSON geoCoordinates) {
        this.geoCoordinates = geoCoordinates;
        return this;
    }

    /**
     * Get geoCoordinates
     *
     * @return geoCoordinates
     **/
    @Schema(description = "")
    public GeoJSON getGeoCoordinates() {
        return geoCoordinates;
    }

    public void setGeoCoordinates(GeoJSON geoCoordinates) {
        this.geoCoordinates = geoCoordinates;
    }

    public ObservationUnitObservationUnitPosition observationLevel(ObservationUnitLevel2 observationLevel) {
        this.observationLevel = observationLevel;
        return this;
    }

    /**
     * Get observationLevel
     *
     * @return observationLevel
     **/
    @Schema(description = "")
    public ObservationUnitLevel2 getObservationLevel() {
        return observationLevel;
    }

    public void setObservationLevel(ObservationUnitLevel2 observationLevel) {
        this.observationLevel = observationLevel;
    }

    public ObservationUnitObservationUnitPosition observationLevelRelationships(List<ObservationUnitLevelRelationship1> observationLevelRelationships) {
        this.observationLevelRelationships = observationLevelRelationships;
        return this;
    }

    public ObservationUnitObservationUnitPosition addObservationLevelRelationshipsItem(ObservationUnitLevelRelationship1 observationLevelRelationshipsItem) {
        if (this.observationLevelRelationships == null) {
            this.observationLevelRelationships = new ArrayList<ObservationUnitLevelRelationship1>();
        }
        this.observationLevelRelationships.add(observationLevelRelationshipsItem);
        return this;
    }

    /**
     * Observation levels indicate the granularity level at which the measurements are taken. &#x60;levelName&#x60;  defines the level, &#x60;levelOrder&#x60; defines where that level exists in the hierarchy of levels.  &#x60;levelOrder&#x60;s lower numbers are at the top of the hierarchy (ie field &gt; 0) and higher numbers are  at the bottom of the hierarchy (ie plant &gt; 6). &#x60;levelCode&#x60; is an ID code for this level tag. Identify  this observation unit by each level of the hierarchy where it exists.   For more information on Observation Levels, please review the &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://wiki.brapi.org/index.php/Observation_Levels\&quot;&gt;Observation Levels documentation&lt;/a&gt;.   **Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample**
     *
     * @return observationLevelRelationships
     **/
    @Schema(example = "[{\"levelCode\":\"Field_1\",\"levelName\":\"field\",\"levelOrder\":0},{\"levelCode\":\"Block_12\",\"levelName\":\"block\",\"levelOrder\":1},{\"levelCode\":\"Plot_123\",\"levelName\":\"plot\",\"levelOrder\":2}]", description = "Observation levels indicate the granularity level at which the measurements are taken. `levelName`  defines the level, `levelOrder` defines where that level exists in the hierarchy of levels.  `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are  at the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify  this observation unit by each level of the hierarchy where it exists.   For more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>.   **Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** ")
    public List<ObservationUnitLevelRelationship1> getObservationLevelRelationships() {
        return observationLevelRelationships;
    }

    public void setObservationLevelRelationships(List<ObservationUnitLevelRelationship1> observationLevelRelationships) {
        this.observationLevelRelationships = observationLevelRelationships;
    }

    public ObservationUnitObservationUnitPosition positionCoordinateX(String positionCoordinateX) {
        this.positionCoordinateX = positionCoordinateX;
        return this;
    }

    /**
     * The X position coordinate for an observation unit. Different systems may use different coordinate systems.
     *
     * @return positionCoordinateX
     **/
    @Schema(example = "74", description = "The X position coordinate for an observation unit. Different systems may use different coordinate systems.")
    public String getPositionCoordinateX() {
        return positionCoordinateX;
    }

    public void setPositionCoordinateX(String positionCoordinateX) {
        this.positionCoordinateX = positionCoordinateX;
    }

    public ObservationUnitObservationUnitPosition positionCoordinateXType(PositionCoordinateXTypeEnum positionCoordinateXType) {
        this.positionCoordinateXType = positionCoordinateXType;
        return this;
    }

    /**
     * The type of positional coordinate used. Must be one of the following values   LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See &#x27;Location Coordinate Encoding&#x27; for details   LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See &#x27;Location Coordinate Encoding&#x27; for details   PLANTED_ROW - The physical planted row number   PLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row   GRID_ROW - The row index number of a square grid overlay   GRID_COL - The column index number of a square grid overlay   MEASURED_ROW - The distance in meters from a defined 0-th row   MEASURED_COL - The distance in meters from a defined 0-th column
     *
     * @return positionCoordinateXType
     **/
    @Schema(example = "GRID_COL", description = "The type of positional coordinate used. Must be one of the following values   LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details   LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details   PLANTED_ROW - The physical planted row number   PLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row   GRID_ROW - The row index number of a square grid overlay   GRID_COL - The column index number of a square grid overlay   MEASURED_ROW - The distance in meters from a defined 0-th row   MEASURED_COL - The distance in meters from a defined 0-th column ")
    public PositionCoordinateXTypeEnum getPositionCoordinateXType() {
        return positionCoordinateXType;
    }

    public void setPositionCoordinateXType(PositionCoordinateXTypeEnum positionCoordinateXType) {
        this.positionCoordinateXType = positionCoordinateXType;
    }

    public ObservationUnitObservationUnitPosition positionCoordinateY(String positionCoordinateY) {
        this.positionCoordinateY = positionCoordinateY;
        return this;
    }

    /**
     * The Y position coordinate for an observation unit. Different systems may use different coordinate systems.
     *
     * @return positionCoordinateY
     **/
    @Schema(example = "03", description = "The Y position coordinate for an observation unit. Different systems may use different coordinate systems.")
    public String getPositionCoordinateY() {
        return positionCoordinateY;
    }

    public void setPositionCoordinateY(String positionCoordinateY) {
        this.positionCoordinateY = positionCoordinateY;
    }

    public ObservationUnitObservationUnitPosition positionCoordinateYType(PositionCoordinateYTypeEnum positionCoordinateYType) {
        this.positionCoordinateYType = positionCoordinateYType;
        return this;
    }

    /**
     * The type of positional coordinate used. Must be one of the following values   LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See &#x27;Location Coordinate Encoding&#x27; for details   LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See &#x27;Location Coordinate Encoding&#x27; for details   PLANTED_ROW - The physical planted row number    PLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row   GRID_ROW - The row index number of a square grid overlay   GRID_COL - The column index number of a square grid overlay   MEASURED_ROW - The distance in meters from a defined 0-th row   MEASURED_COL - The distance in meters from a defined 0-th column
     *
     * @return positionCoordinateYType
     **/
    @Schema(example = "GRID_ROW", description = "The type of positional coordinate used. Must be one of the following values   LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details   LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details   PLANTED_ROW - The physical planted row number    PLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row   GRID_ROW - The row index number of a square grid overlay   GRID_COL - The column index number of a square grid overlay   MEASURED_ROW - The distance in meters from a defined 0-th row   MEASURED_COL - The distance in meters from a defined 0-th column ")
    public PositionCoordinateYTypeEnum getPositionCoordinateYType() {
        return positionCoordinateYType;
    }

    public void setPositionCoordinateYType(PositionCoordinateYTypeEnum positionCoordinateYType) {
        this.positionCoordinateYType = positionCoordinateYType;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ObservationUnitObservationUnitPosition observationUnitObservationUnitPosition = (ObservationUnitObservationUnitPosition) o;
        return Objects.equals(this.entryType, observationUnitObservationUnitPosition.entryType) &&
                Objects.equals(this.geoCoordinates, observationUnitObservationUnitPosition.geoCoordinates) &&
                Objects.equals(this.observationLevel, observationUnitObservationUnitPosition.observationLevel) &&
                Objects.equals(this.observationLevelRelationships, observationUnitObservationUnitPosition.observationLevelRelationships) &&
                Objects.equals(this.positionCoordinateX, observationUnitObservationUnitPosition.positionCoordinateX) &&
                Objects.equals(this.positionCoordinateXType, observationUnitObservationUnitPosition.positionCoordinateXType) &&
                Objects.equals(this.positionCoordinateY, observationUnitObservationUnitPosition.positionCoordinateY) &&
                Objects.equals(this.positionCoordinateYType, observationUnitObservationUnitPosition.positionCoordinateYType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(entryType, geoCoordinates, observationLevel, observationLevelRelationships, positionCoordinateX, positionCoordinateXType, positionCoordinateY, positionCoordinateYType);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ObservationUnitObservationUnitPosition {\n");

        sb.append("    entryType: ").append(toIndentedString(entryType)).append("\n");
        sb.append("    geoCoordinates: ").append(toIndentedString(geoCoordinates)).append("\n");
        sb.append("    observationLevel: ").append(toIndentedString(observationLevel)).append("\n");
        sb.append("    observationLevelRelationships: ").append(toIndentedString(observationLevelRelationships)).append("\n");
        sb.append("    positionCoordinateX: ").append(toIndentedString(positionCoordinateX)).append("\n");
        sb.append("    positionCoordinateXType: ").append(toIndentedString(positionCoordinateXType)).append("\n");
        sb.append("    positionCoordinateY: ").append(toIndentedString(positionCoordinateY)).append("\n");
        sb.append("    positionCoordinateYType: ").append(toIndentedString(positionCoordinateYType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

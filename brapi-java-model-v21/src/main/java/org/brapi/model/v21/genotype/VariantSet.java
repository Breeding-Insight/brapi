/*
 * BrAPI-Genotyping
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/RESTfulness\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Response_Structure\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Dates_and_Times\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Location_Coordinates\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Error_Handling\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Search_Services\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.model.v21.genotype;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.*;

/**
 * A VariantSet is a collection of variants and variant calls intended to be analyzed together.
 */
@Schema(description = "A VariantSet is a collection of variants and variant calls intended to be analyzed together.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-25T14:54:00.515Z[GMT]")
public class VariantSet {
    @SerializedName("additionalInfo")
    private Map<String, String> additionalInfo = null;

    @SerializedName("analysis")
    private List<Analysis> analysis = null;

    @SerializedName("availableFormats")
    private List<AvailableFormat> availableFormats = null;

    @SerializedName("callSetCount")
    private Integer callSetCount = null;

    @SerializedName("externalReferences")
    private ExternalReferences externalReferences = null;

    @SerializedName("metadataFields")
    private List<VariantSetMetadataFields> metadataFields = null;

    @SerializedName("referenceSetDbId")
    private String referenceSetDbId = null;

    @SerializedName("studyDbId")
    private String studyDbId = null;

    @SerializedName("variantCount")
    private Integer variantCount = null;

    @SerializedName("variantSetDbId")
    private String variantSetDbId = null;

    @SerializedName("variantSetName")
    private String variantSetName = null;

    public VariantSet additionalInfo(Map<String, String> additionalInfo) {
        this.additionalInfo = additionalInfo;
        return this;
    }

    public VariantSet putAdditionalInfoItem(String key, String additionalInfoItem) {
        if (this.additionalInfo == null) {
            this.additionalInfo = new HashMap<String, String>();
        }
        this.additionalInfo.put(key, additionalInfoItem);
        return this;
    }

    /**
     * A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.
     *
     * @return additionalInfo
     **/
    @Schema(description = "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.")
    public Map<String, String> getAdditionalInfo() {
        return additionalInfo;
    }

    public void setAdditionalInfo(Map<String, String> additionalInfo) {
        this.additionalInfo = additionalInfo;
    }

    public VariantSet analysis(List<Analysis> analysis) {
        this.analysis = analysis;
        return this;
    }

    public VariantSet addAnalysisItem(Analysis analysisItem) {
        if (this.analysis == null) {
            this.analysis = new ArrayList<Analysis>();
        }
        this.analysis.add(analysisItem);
        return this;
    }

    /**
     * Set of Analysis descriptors for this VariantSet
     *
     * @return analysis
     **/
    @Schema(description = "Set of Analysis descriptors for this VariantSet")
    public List<Analysis> getAnalysis() {
        return analysis;
    }

    public void setAnalysis(List<Analysis> analysis) {
        this.analysis = analysis;
    }

    public VariantSet availableFormats(List<AvailableFormat> availableFormats) {
        this.availableFormats = availableFormats;
        return this;
    }

    public VariantSet addAvailableFormatsItem(AvailableFormat availableFormatsItem) {
        if (this.availableFormats == null) {
            this.availableFormats = new ArrayList<AvailableFormat>();
        }
        this.availableFormats.add(availableFormatsItem);
        return this;
    }

    /**
     * When the data for a VariantSet is retrieved, it can be retrieved in a variety of data formats and file formats.  &lt;br/&gt;&#x27;dataFormat&#x27; defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc) &lt;br/&gt;&#x27;fileFormat&#x27; defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.
     *
     * @return availableFormats
     **/
    @Schema(description = "When the data for a VariantSet is retrieved, it can be retrieved in a variety of data formats and file formats.  <br/>'dataFormat' defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc) <br/>'fileFormat' defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.")
    public List<AvailableFormat> getAvailableFormats() {
        return availableFormats;
    }

    public void setAvailableFormats(List<AvailableFormat> availableFormats) {
        this.availableFormats = availableFormats;
    }

    public VariantSet callSetCount(Integer callSetCount) {
        this.callSetCount = callSetCount;
        return this;
    }

    /**
     * The number of CallSets included in this VariantSet
     *
     * @return callSetCount
     **/
    @Schema(example = "341", description = "The number of CallSets included in this VariantSet")
    public Integer getCallSetCount() {
        return callSetCount;
    }

    public void setCallSetCount(Integer callSetCount) {
        this.callSetCount = callSetCount;
    }

    public VariantSet externalReferences(ExternalReferences externalReferences) {
        this.externalReferences = externalReferences;
        return this;
    }

    /**
     * Get externalReferences
     *
     * @return externalReferences
     **/
    @Schema(description = "")
    public ExternalReferences getExternalReferences() {
        return externalReferences;
    }

    public void setExternalReferences(ExternalReferences externalReferences) {
        this.externalReferences = externalReferences;
    }

    public VariantSet metadataFields(List<VariantSetMetadataFields> metadataFields) {
        this.metadataFields = metadataFields;
        return this;
    }

    public VariantSet addMetadataFieldsItem(VariantSetMetadataFields metadataFieldsItem) {
        if (this.metadataFields == null) {
            this.metadataFields = new ArrayList<VariantSetMetadataFields>();
        }
        this.metadataFields.add(metadataFieldsItem);
        return this;
    }

    /**
     * The &#x27;metadataFields&#x27; array indicates which types of genotyping data and metadata are available in the VariantSet.  &lt;br&gt; When possible, these field names and abbreviations should follow the VCF standard
     *
     * @return metadataFields
     **/
    @Schema(description = "The 'metadataFields' array indicates which types of genotyping data and metadata are available in the VariantSet.  <br> When possible, these field names and abbreviations should follow the VCF standard ")
    public List<VariantSetMetadataFields> getMetadataFields() {
        return metadataFields;
    }

    public void setMetadataFields(List<VariantSetMetadataFields> metadataFields) {
        this.metadataFields = metadataFields;
    }

    public VariantSet referenceSetDbId(String referenceSetDbId) {
        this.referenceSetDbId = referenceSetDbId;
        return this;
    }

    /**
     * The ID of the reference set that describes the sequences used by the variants in this set.
     *
     * @return referenceSetDbId
     **/
    @Schema(example = "57eae639", description = "The ID of the reference set that describes the sequences used by the variants in this set.")
    public String getReferenceSetDbId() {
        return referenceSetDbId;
    }

    public void setReferenceSetDbId(String referenceSetDbId) {
        this.referenceSetDbId = referenceSetDbId;
    }

    public VariantSet studyDbId(String studyDbId) {
        this.studyDbId = studyDbId;
        return this;
    }

    /**
     * The ID of the dataset this variant set belongs to.
     *
     * @return studyDbId
     **/
    @Schema(example = "2fc3b034", description = "The ID of the dataset this variant set belongs to.")
    public String getStudyDbId() {
        return studyDbId;
    }

    public void setStudyDbId(String studyDbId) {
        this.studyDbId = studyDbId;
    }

    public VariantSet variantCount(Integer variantCount) {
        this.variantCount = variantCount;
        return this;
    }

    /**
     * The number of Variants included in this VariantSet
     *
     * @return variantCount
     **/
    @Schema(example = "250", description = "The number of Variants included in this VariantSet")
    public Integer getVariantCount() {
        return variantCount;
    }

    public void setVariantCount(Integer variantCount) {
        this.variantCount = variantCount;
    }

    public VariantSet variantSetDbId(String variantSetDbId) {
        this.variantSetDbId = variantSetDbId;
        return this;
    }

    /**
     * The unique identifier for a VariantSet
     *
     * @return variantSetDbId
     **/
    @Schema(example = "87a6ac1e", description = "The unique identifier for a VariantSet")
    public String getVariantSetDbId() {
        return variantSetDbId;
    }

    public void setVariantSetDbId(String variantSetDbId) {
        this.variantSetDbId = variantSetDbId;
    }

    public VariantSet variantSetName(String variantSetName) {
        this.variantSetName = variantSetName;
        return this;
    }

    /**
     * The human readable name for a VariantSet
     *
     * @return variantSetName
     **/
    @Schema(example = "Maize QC DataSet 002334", description = "The human readable name for a VariantSet")
    public String getVariantSetName() {
        return variantSetName;
    }

    public void setVariantSetName(String variantSetName) {
        this.variantSetName = variantSetName;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VariantSet variantSet = (VariantSet) o;
        return Objects.equals(this.additionalInfo, variantSet.additionalInfo) &&
                Objects.equals(this.analysis, variantSet.analysis) &&
                Objects.equals(this.availableFormats, variantSet.availableFormats) &&
                Objects.equals(this.callSetCount, variantSet.callSetCount) &&
                Objects.equals(this.externalReferences, variantSet.externalReferences) &&
                Objects.equals(this.metadataFields, variantSet.metadataFields) &&
                Objects.equals(this.referenceSetDbId, variantSet.referenceSetDbId) &&
                Objects.equals(this.studyDbId, variantSet.studyDbId) &&
                Objects.equals(this.variantCount, variantSet.variantCount) &&
                Objects.equals(this.variantSetDbId, variantSet.variantSetDbId) &&
                Objects.equals(this.variantSetName, variantSet.variantSetName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(additionalInfo, analysis, availableFormats, callSetCount, externalReferences, metadataFields, referenceSetDbId, studyDbId, variantCount, variantSetDbId, variantSetName);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class VariantSet {\n");

        sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
        sb.append("    analysis: ").append(toIndentedString(analysis)).append("\n");
        sb.append("    availableFormats: ").append(toIndentedString(availableFormats)).append("\n");
        sb.append("    callSetCount: ").append(toIndentedString(callSetCount)).append("\n");
        sb.append("    externalReferences: ").append(toIndentedString(externalReferences)).append("\n");
        sb.append("    metadataFields: ").append(toIndentedString(metadataFields)).append("\n");
        sb.append("    referenceSetDbId: ").append(toIndentedString(referenceSetDbId)).append("\n");
        sb.append("    studyDbId: ").append(toIndentedString(studyDbId)).append("\n");
        sb.append("    variantCount: ").append(toIndentedString(variantCount)).append("\n");
        sb.append("    variantSetDbId: ").append(toIndentedString(variantSetDbId)).append("\n");
        sb.append("    variantSetName: ").append(toIndentedString(variantSetName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

/*
 * BrAPI-Phenotyping
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/RESTfulness\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Response_Structure\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Dates_and_Times\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Location_Coordinates\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Error_Handling\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Search_Services\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.model.v21.core;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * EventEventParameters
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-25T17:44:48.481Z[GMT]")
public class EventEventParameters {
    @SerializedName("code")
    private String code = null;

    @SerializedName("description")
    private String description = null;

    @SerializedName("key")
    private String key = null;

    @SerializedName("name")
    private String name = null;

    @SerializedName("rdfValue")
    private String rdfValue = null;

    @SerializedName("units")
    private String units = null;

    @SerializedName("value")
    private String value = null;

    @SerializedName("valueDescription")
    private String valueDescription = null;

    @SerializedName("valuesByDate")
    private List<String> valuesByDate = null;

    public EventEventParameters code(String code) {
        this.code = code;
        return this;
    }

    /**
     * The shortened code name of an event parameter &lt;br&gt;ICASA \&quot;Code_Display\&quot;
     *
     * @return code
     **/
    @Schema(example = "tiimp", description = "The shortened code name of an event parameter <br>ICASA \"Code_Display\"")
    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public EventEventParameters description(String description) {
        this.description = description;
        return this;
    }

    /**
     * A human readable description of this event parameter. This description is usually associated with the &#x27;name&#x27; and &#x27;code&#x27; of an event parameter.
     *
     * @return description
     **/
    @Schema(example = "Implement or tool used for tillage", description = "A human readable description of this event parameter. This description is usually associated with the 'name' and 'code' of an event parameter.")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public EventEventParameters key(String key) {
        this.key = key;
        return this;
    }

    /**
     * **Deprecated in v2.1** Please use &#x60;name&#x60;. Github issue number #440              &lt;br&gt;Specifies the relationship between the event and the given property. E.g. fertilizer, operator
     *
     * @return key
     **/
    @Schema(example = "operator", description = "**Deprecated in v2.1** Please use `name`. Github issue number #440              <br>Specifies the relationship between the event and the given property. E.g. fertilizer, operator")
    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    public EventEventParameters name(String name) {
        this.name = name;
        return this;
    }

    /**
     * The full name of an event parameter &lt;br&gt;ICASA \&quot;Variable_Name\&quot;
     *
     * @return name
     **/
    @Schema(example = "tillage_implement", description = "The full name of an event parameter <br>ICASA \"Variable_Name\"")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public EventEventParameters rdfValue(String rdfValue) {
        this.rdfValue = rdfValue;
        return this;
    }

    /**
     * **Deprecated in v2.1** Please use &#x60;code&#x60;. Github issue number #440              &lt;brThe type of the value given above, e.g. http://xmlns.com/foaf/0.1/Agent
     *
     * @return rdfValue
     **/
    @Schema(example = "http://xmlns.com/foaf/0.1/Agent", description = "**Deprecated in v2.1** Please use `code`. Github issue number #440              <brThe type of the value given above, e.g. http://xmlns.com/foaf/0.1/Agent")
    public String getRdfValue() {
        return rdfValue;
    }

    public void setRdfValue(String rdfValue) {
        this.rdfValue = rdfValue;
    }

    public EventEventParameters units(String units) {
        this.units = units;
        return this;
    }

    /**
     * The units or data type of the &#x27;value&#x27;.  &lt;br&gt;If the &#x27;value&#x27; comes from a standardized vocabulary or an encoded list of values, then &#x27;unit&#x27; should be &#x27;code&#x27;.  &lt;br&gt;If the &#x27;value&#x27; IS NOT a number, then &#x27;unit&#x27; should specify a data type eg. &#x27;text&#x27;, &#x27;boolean&#x27;, &#x27;date&#x27;, etc.  &lt;br&gt;If the value IS a number, then &#x27;unit&#x27; should specify the units used eg. &#x27;ml&#x27;, &#x27;cm&#x27;, etc &lt;br&gt;ICASA \&quot;Unit_or_type\&quot;
     *
     * @return units
     **/
    @Schema(example = "code", description = "The units or data type of the 'value'.  <br>If the 'value' comes from a standardized vocabulary or an encoded list of values, then 'unit' should be 'code'.  <br>If the 'value' IS NOT a number, then 'unit' should specify a data type eg. 'text', 'boolean', 'date', etc.  <br>If the value IS a number, then 'unit' should specify the units used eg. 'ml', 'cm', etc <br>ICASA \"Unit_or_type\"")
    public String getUnits() {
        return units;
    }

    public void setUnits(String units) {
        this.units = units;
    }

    public EventEventParameters value(String value) {
        this.value = value;
        return this;
    }

    /**
     * The single value of this event parameter. This single value is accurate for all the dates in the date range. If &#x27;value&#x27; is populated then &#x27;valuesByDate&#x27; should NOT be populated.
     *
     * @return value
     **/
    @Schema(example = "TI001", description = "The single value of this event parameter. This single value is accurate for all the dates in the date range. If 'value' is populated then 'valuesByDate' should NOT be populated.")
    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public EventEventParameters valueDescription(String valueDescription) {
        this.valueDescription = valueDescription;
        return this;
    }

    /**
     * If the event parameter &#x27;unit&#x27; field is &#x27;code&#x27;, then use &#x27;valueDescription&#x27; to add a human readable description to the value.
     *
     * @return valueDescription
     **/
    @Schema(example = "Standard V-Ripper (TI001)", description = "If the event parameter 'unit' field is 'code', then use 'valueDescription' to add a human readable description to the value.")
    public String getValueDescription() {
        return valueDescription;
    }

    public void setValueDescription(String valueDescription) {
        this.valueDescription = valueDescription;
    }

    public EventEventParameters valuesByDate(List<String> valuesByDate) {
        this.valuesByDate = valuesByDate;
        return this;
    }

    public EventEventParameters addValuesByDateItem(String valuesByDateItem) {
        if (this.valuesByDate == null) {
            this.valuesByDate = new ArrayList<String>();
        }
        this.valuesByDate.add(valuesByDateItem);
        return this;
    }

    /**
     * An array of values corresponding to each timestamp in the &#x27;discreteDates&#x27; array of this event. The &#x27;valuesByDate&#x27; array should exactly match the size of the &#x27;discreteDates&#x27; array. If &#x27;valuesByDate&#x27; is populated then &#x27;value&#x27; should NOT be populated.
     *
     * @return valuesByDate
     **/
    @Schema(example = "[\"20\",\"50\",\"40\"]", description = "An array of values corresponding to each timestamp in the 'discreteDates' array of this event. The 'valuesByDate' array should exactly match the size of the 'discreteDates' array. If 'valuesByDate' is populated then 'value' should NOT be populated.")
    public List<String> getValuesByDate() {
        return valuesByDate;
    }

    public void setValuesByDate(List<String> valuesByDate) {
        this.valuesByDate = valuesByDate;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EventEventParameters eventEventParameters = (EventEventParameters) o;
        return Objects.equals(this.code, eventEventParameters.code) &&
                Objects.equals(this.description, eventEventParameters.description) &&
                Objects.equals(this.key, eventEventParameters.key) &&
                Objects.equals(this.name, eventEventParameters.name) &&
                Objects.equals(this.rdfValue, eventEventParameters.rdfValue) &&
                Objects.equals(this.units, eventEventParameters.units) &&
                Objects.equals(this.value, eventEventParameters.value) &&
                Objects.equals(this.valueDescription, eventEventParameters.valueDescription) &&
                Objects.equals(this.valuesByDate, eventEventParameters.valuesByDate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(code, description, key, name, rdfValue, units, value, valueDescription, valuesByDate);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EventEventParameters {\n");

        sb.append("    code: ").append(toIndentedString(code)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    key: ").append(toIndentedString(key)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    rdfValue: ").append(toIndentedString(rdfValue)).append("\n");
        sb.append("    units: ").append(toIndentedString(units)).append("\n");
        sb.append("    value: ").append(toIndentedString(value)).append("\n");
        sb.append("    valueDescription: ").append(toIndentedString(valueDescription)).append("\n");
        sb.append("    valuesByDate: ").append(toIndentedString(valuesByDate)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

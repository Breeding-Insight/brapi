/*
 * BrAPI-Core
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/RESTfulness\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Response_Structure\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Dates_and_Times\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Location_Coordinates\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Error_Handling\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Search_Services\">Search Services</a></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore21.docs.apiary.io\">Apiary</a></div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.0/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.0\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore20.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.model.v21.core;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Service
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-25T17:44:03.583Z[GMT]")
public class Service {
    @SerializedName("contentTypes")
    private List<ContentTypes> contentTypes = null;

    @SerializedName("dataTypes")
    private List<ContentTypes> dataTypes = null;

    /**
     * Gets or Sets methods
     */
    @JsonAdapter(MethodsEnum.Adapter.class)
    public enum MethodsEnum {
        GET("GET"),
        POST("POST"),
        PUT("PUT"),
        DELETE("DELETE");

        private String value;

        MethodsEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static MethodsEnum fromValue(String input) {
            for (MethodsEnum b : MethodsEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<MethodsEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final MethodsEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public MethodsEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return MethodsEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("methods")
    private List<MethodsEnum> methods = new ArrayList<MethodsEnum>();

    @SerializedName("service")
    private String service = null;

    /**
     * Gets or Sets versions
     */
    @JsonAdapter(VersionsEnum.Adapter.class)
    public enum VersionsEnum {
        _0("2.0"),
        _1("2.1"),
        _2("2.2");

        private String value;

        VersionsEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static VersionsEnum fromValue(String input) {
            for (VersionsEnum b : VersionsEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<VersionsEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final VersionsEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public VersionsEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return VersionsEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("versions")
    private List<VersionsEnum> versions = new ArrayList<VersionsEnum>();

    public Service contentTypes(List<ContentTypes> contentTypes) {
        this.contentTypes = contentTypes;
        return this;
    }

    public Service addContentTypesItem(ContentTypes contentTypesItem) {
        if (this.contentTypes == null) {
            this.contentTypes = new ArrayList<ContentTypes>();
        }
        this.contentTypes.add(contentTypesItem);
        return this;
    }

    /**
     * The possible content types returned by the service endpoint
     *
     * @return contentTypes
     **/
    @Schema(example = "[\"application/json\"]", description = "The possible content types returned by the service endpoint")
    public List<ContentTypes> getContentTypes() {
        return contentTypes;
    }

    public void setContentTypes(List<ContentTypes> contentTypes) {
        this.contentTypes = contentTypes;
    }

    public Service dataTypes(List<ContentTypes> dataTypes) {
        this.dataTypes = dataTypes;
        return this;
    }

    public Service addDataTypesItem(ContentTypes dataTypesItem) {
        if (this.dataTypes == null) {
            this.dataTypes = new ArrayList<ContentTypes>();
        }
        this.dataTypes.add(dataTypesItem);
        return this;
    }

    /**
     * **Deprecated in v2.1** Please use &#x60;contentTypes&#x60;. Github issue number #443  &lt;br/&gt;The possible data formats returned by the available call
     *
     * @return dataTypes
     **/
    @Schema(example = "[\"application/json\"]", description = "**Deprecated in v2.1** Please use `contentTypes`. Github issue number #443  <br/>The possible data formats returned by the available call ")
    public List<ContentTypes> getDataTypes() {
        return dataTypes;
    }

    public void setDataTypes(List<ContentTypes> dataTypes) {
        this.dataTypes = dataTypes;
    }

    public Service methods(List<MethodsEnum> methods) {
        this.methods = methods;
        return this;
    }

    public Service addMethodsItem(MethodsEnum methodsItem) {
        this.methods.add(methodsItem);
        return this;
    }

    /**
     * The possible HTTP Methods to be used with the available call
     *
     * @return methods
     **/
    @Schema(example = "[\"GET\",\"POST\"]", required = true, description = "The possible HTTP Methods to be used with the available call")
    public List<MethodsEnum> getMethods() {
        return methods;
    }

    public void setMethods(List<MethodsEnum> methods) {
        this.methods = methods;
    }

    public Service service(String service) {
        this.service = service;
        return this;
    }

    /**
     * The name of the available call as recorded in the documentation
     *
     * @return service
     **/
    @Schema(example = "germplasm/{germplasmDbId}/pedigree", required = true, description = "The name of the available call as recorded in the documentation")
    public String getService() {
        return service;
    }

    public void setService(String service) {
        this.service = service;
    }

    public Service versions(List<VersionsEnum> versions) {
        this.versions = versions;
        return this;
    }

    public Service addVersionsItem(VersionsEnum versionsItem) {
        this.versions.add(versionsItem);
        return this;
    }

    /**
     * The supported versions of a particular call
     *
     * @return versions
     **/
    @Schema(example = "[\"2.0\",\"2.1\"]", required = true, description = "The supported versions of a particular call")
    public List<VersionsEnum> getVersions() {
        return versions;
    }

    public void setVersions(List<VersionsEnum> versions) {
        this.versions = versions;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Service service = (Service) o;
        return Objects.equals(this.contentTypes, service.contentTypes) &&
                Objects.equals(this.dataTypes, service.dataTypes) &&
                Objects.equals(this.methods, service.methods) &&
                Objects.equals(this.service, service.service) &&
                Objects.equals(this.versions, service.versions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(contentTypes, dataTypes, methods, service, versions);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Service {\n");

        sb.append("    contentTypes: ").append(toIndentedString(contentTypes)).append("\n");
        sb.append("    dataTypes: ").append(toIndentedString(dataTypes)).append("\n");
        sb.append("    methods: ").append(toIndentedString(methods)).append("\n");
        sb.append("    service: ").append(toIndentedString(service)).append("\n");
        sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

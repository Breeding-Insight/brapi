/*
 * BrAPI-Core
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/RESTfulness\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Response_Structure\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Dates_and_Times\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Location_Coordinates\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Error_Handling\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Search_Services\">Search Services</a></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore21.docs.apiary.io\">Apiary</a></div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.0/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.0\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore20.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.model.v21.core;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;
import java.util.*;

/**
 * Program
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-25T17:44:03.583Z[GMT]")
public class Program {
    @SerializedName("abbreviation")
    private String abbreviation = null;

    @SerializedName("additionalInfo")
    private Map<String, String> additionalInfo = null;

    @SerializedName("commonCropName")
    private String commonCropName = null;

    @SerializedName("documentationURL")
    private String documentationURL = null;

    @SerializedName("externalReferences")
    private List<ExternalReferencesInner> externalReferences = null;

    @SerializedName("fundingInformation")
    private String fundingInformation = null;

    @SerializedName("leadPersonDbId")
    private String leadPersonDbId = null;

    @SerializedName("leadPersonName")
    private String leadPersonName = null;

    @SerializedName("objective")
    private String objective = null;

    @SerializedName("programDbId")
    private String programDbId = null;

    @SerializedName("programName")
    private String programName = null;

    /**
     * The type of program entity this object represents &lt;br/&gt; &#x27;STANARD&#x27; represents a standard, permenant breeding program &lt;br/&gt; &#x27;PROJECT&#x27; represents a short term project, usually with a set time limit based on funding
     */
    @JsonAdapter(ProgramTypeEnum.Adapter.class)
    public enum ProgramTypeEnum {
        STANARD("STANARD"),
        PROJECT("PROJECT");

        private String value;

        ProgramTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ProgramTypeEnum fromValue(String input) {
            for (ProgramTypeEnum b : ProgramTypeEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<ProgramTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ProgramTypeEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public ProgramTypeEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return ProgramTypeEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("programType")
    private ProgramTypeEnum programType = null;

    public Program abbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
        return this;
    }

    /**
     * A shortened version of the human readable name for a Program
     *
     * @return abbreviation
     **/
    @Schema(example = "P1", description = "A shortened version of the human readable name for a Program")
    public String getAbbreviation() {
        return abbreviation;
    }

    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    public Program additionalInfo(Map<String, String> additionalInfo) {
        this.additionalInfo = additionalInfo;
        return this;
    }

    public Program putAdditionalInfoItem(String key, String additionalInfoItem) {
        if (this.additionalInfo == null) {
            this.additionalInfo = new HashMap<String, String>();
        }
        this.additionalInfo.put(key, additionalInfoItem);
        return this;
    }

    /**
     * A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.
     *
     * @return additionalInfo
     **/
    @Schema(description = "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.")
    public Map<String, String> getAdditionalInfo() {
        return additionalInfo;
    }

    public void setAdditionalInfo(Map<String, String> additionalInfo) {
        this.additionalInfo = additionalInfo;
    }

    public Program commonCropName(String commonCropName) {
        this.commonCropName = commonCropName;
        return this;
    }

    /**
     * Common name for the crop which this program is for
     *
     * @return commonCropName
     **/
    @Schema(example = "Tomatillo", description = "Common name for the crop which this program is for")
    public String getCommonCropName() {
        return commonCropName;
    }

    public void setCommonCropName(String commonCropName) {
        this.commonCropName = commonCropName;
    }

    public Program documentationURL(String documentationURL) {
        this.documentationURL = documentationURL;
        return this;
    }

    /**
     * A URL to the human readable documentation of an object
     *
     * @return documentationURL
     **/
    @Schema(example = "https://wiki.brapi.org", description = "A URL to the human readable documentation of an object")
    public String getDocumentationURL() {
        return documentationURL;
    }

    public void setDocumentationURL(String documentationURL) {
        this.documentationURL = documentationURL;
    }

    public Program externalReferences(List<ExternalReferencesInner> externalReferences) {
        this.externalReferences = externalReferences;
        return this;
    }

    public Program addExternalReferencesItem(ExternalReferencesInner externalReferencesItem) {
        if (this.externalReferences == null) {
            this.externalReferences = new ArrayList<ExternalReferencesInner>();
        }
        this.externalReferences.add(externalReferencesItem);
        return this;
    }

    /**
     * An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
     *
     * @return externalReferences
     **/
    @Schema(example = "[{\"referenceId\":\"doi:10.155454/12341234\",\"referenceSource\":\"DOI\"},{\"referenceId\":\"75a50e76\",\"referenceSource\":\"Remote Data Collection Upload Tool\"}]", description = "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.")
    public List<ExternalReferencesInner> getExternalReferences() {
        return externalReferences;
    }

    public void setExternalReferences(List<ExternalReferencesInner> externalReferences) {
        this.externalReferences = externalReferences;
    }

    public Program fundingInformation(String fundingInformation) {
        this.fundingInformation = fundingInformation;
        return this;
    }

    /**
     * Information describing the grant or funding source for this program
     *
     * @return fundingInformation
     **/
    @Schema(example = "EU: FP7-244374", description = "Information describing the grant or funding source for this program")
    public String getFundingInformation() {
        return fundingInformation;
    }

    public void setFundingInformation(String fundingInformation) {
        this.fundingInformation = fundingInformation;
    }

    public Program leadPersonDbId(String leadPersonDbId) {
        this.leadPersonDbId = leadPersonDbId;
        return this;
    }

    /**
     * The unique identifier of the program leader
     *
     * @return leadPersonDbId
     **/
    @Schema(example = "fe6f5c50", description = "The unique identifier of the program leader")
    public String getLeadPersonDbId() {
        return leadPersonDbId;
    }

    public void setLeadPersonDbId(String leadPersonDbId) {
        this.leadPersonDbId = leadPersonDbId;
    }

    public Program leadPersonName(String leadPersonName) {
        this.leadPersonName = leadPersonName;
        return this;
    }

    /**
     * The name of the program leader
     *
     * @return leadPersonName
     **/
    @Schema(example = "Bob Robertson", description = "The name of the program leader")
    public String getLeadPersonName() {
        return leadPersonName;
    }

    public void setLeadPersonName(String leadPersonName) {
        this.leadPersonName = leadPersonName;
    }

    public Program objective(String objective) {
        this.objective = objective;
        return this;
    }

    /**
     * The primary objective of the program
     *
     * @return objective
     **/
    @Schema(example = "Make a better tomatillo", description = "The primary objective of the program")
    public String getObjective() {
        return objective;
    }

    public void setObjective(String objective) {
        this.objective = objective;
    }

    public Program programDbId(String programDbId) {
        this.programDbId = programDbId;
        return this;
    }

    /**
     * The ID which uniquely identifies the program
     *
     * @return programDbId
     **/
    @Schema(example = "f60f15b2", description = "The ID which uniquely identifies the program")
    public String getProgramDbId() {
        return programDbId;
    }

    public void setProgramDbId(String programDbId) {
        this.programDbId = programDbId;
    }

    public Program programName(String programName) {
        this.programName = programName;
        return this;
    }

    /**
     * Human readable name of the program
     *
     * @return programName
     **/
    @Schema(example = "Tomatillo_Breeding_Program", description = "Human readable name of the program")
    public String getProgramName() {
        return programName;
    }

    public void setProgramName(String programName) {
        this.programName = programName;
    }

    public Program programType(ProgramTypeEnum programType) {
        this.programType = programType;
        return this;
    }

    /**
     * The type of program entity this object represents &lt;br/&gt; &#x27;STANARD&#x27; represents a standard, permenant breeding program &lt;br/&gt; &#x27;PROJECT&#x27; represents a short term project, usually with a set time limit based on funding
     *
     * @return programType
     **/
    @Schema(example = "STANARD", description = "The type of program entity this object represents <br/> 'STANARD' represents a standard, permenant breeding program <br/> 'PROJECT' represents a short term project, usually with a set time limit based on funding   ")
    public ProgramTypeEnum getProgramType() {
        return programType;
    }

    public void setProgramType(ProgramTypeEnum programType) {
        this.programType = programType;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Program program = (Program) o;
        return Objects.equals(this.abbreviation, program.abbreviation) &&
                Objects.equals(this.additionalInfo, program.additionalInfo) &&
                Objects.equals(this.commonCropName, program.commonCropName) &&
                Objects.equals(this.documentationURL, program.documentationURL) &&
                Objects.equals(this.externalReferences, program.externalReferences) &&
                Objects.equals(this.fundingInformation, program.fundingInformation) &&
                Objects.equals(this.leadPersonDbId, program.leadPersonDbId) &&
                Objects.equals(this.leadPersonName, program.leadPersonName) &&
                Objects.equals(this.objective, program.objective) &&
                Objects.equals(this.programDbId, program.programDbId) &&
                Objects.equals(this.programName, program.programName) &&
                Objects.equals(this.programType, program.programType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(abbreviation, additionalInfo, commonCropName, documentationURL, externalReferences, fundingInformation, leadPersonDbId, leadPersonName, objective, programDbId, programName, programType);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Program {\n");

        sb.append("    abbreviation: ").append(toIndentedString(abbreviation)).append("\n");
        sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
        sb.append("    commonCropName: ").append(toIndentedString(commonCropName)).append("\n");
        sb.append("    documentationURL: ").append(toIndentedString(documentationURL)).append("\n");
        sb.append("    externalReferences: ").append(toIndentedString(externalReferences)).append("\n");
        sb.append("    fundingInformation: ").append(toIndentedString(fundingInformation)).append("\n");
        sb.append("    leadPersonDbId: ").append(toIndentedString(leadPersonDbId)).append("\n");
        sb.append("    leadPersonName: ").append(toIndentedString(leadPersonName)).append("\n");
        sb.append("    objective: ").append(toIndentedString(objective)).append("\n");
        sb.append("    programDbId: ").append(toIndentedString(programDbId)).append("\n");
        sb.append("    programName: ").append(toIndentedString(programName)).append("\n");
        sb.append("    programType: ").append(toIndentedString(programType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

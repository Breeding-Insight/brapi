/*
 * BrAPI-Core
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/RESTfulness\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Response_Structure\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Dates_and_Times\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Location_Coordinates\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Error_Handling\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Search_Services\">Search Services</a></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore21.docs.apiary.io\">Apiary</a></div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.0/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.0\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore20.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.model.v21.core;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.util.*;

/**
 * Study
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-25T17:44:03.583Z[GMT]")
public class Study {
    @SerializedName("active")
    private Boolean active = null;

    @SerializedName("additionalInfo")
    private Map<String, String> additionalInfo = null;

    @SerializedName("commonCropName")
    private String commonCropName = null;

    @SerializedName("contacts")
    private List<StudyContacts> contacts = null;

    @SerializedName("culturalPractices")
    private String culturalPractices = null;

    @SerializedName("dataLinks")
    private List<StudyDataLinks> dataLinks = null;

    @SerializedName("documentationURL")
    private String documentationURL = null;

    @SerializedName("endDate")
    private OffsetDateTime endDate = null;

    @SerializedName("environmentParameters")
    private List<StudyEnvironmentParameters> environmentParameters = null;

    @SerializedName("experimentalDesign")
    private StudyExperimentalDesign experimentalDesign = null;

    @SerializedName("externalReferences")
    private List<ExternalReferencesInner> externalReferences = null;

    @SerializedName("growthFacility")
    private StudyGrowthFacility growthFacility = null;

    @SerializedName("lastUpdate")
    private StudyLastUpdate lastUpdate = null;

    @SerializedName("license")
    private String license = null;

    @SerializedName("locationDbId")
    private String locationDbId = null;

    @SerializedName("locationName")
    private String locationName = null;

    @SerializedName("observationLevels")
    private List<ObservationUnitHierarchyLevel1> observationLevels = null;

    @SerializedName("observationUnitsDescription")
    private String observationUnitsDescription = null;

    @SerializedName("observationVariableDbIds")
    private List<String> observationVariableDbIds = null;

    @SerializedName("seasons")
    private List<String> seasons = null;

    @SerializedName("startDate")
    private OffsetDateTime startDate = null;

    @SerializedName("studyCode")
    private String studyCode = null;

    @SerializedName("studyDbId")
    private String studyDbId = null;

    @SerializedName("studyDescription")
    private String studyDescription = null;

    @SerializedName("studyName")
    private String studyName = null;

    @SerializedName("studyPUI")
    private String studyPUI = null;

    @SerializedName("studyType")
    private String studyType = null;

    @SerializedName("trialDbId")
    private String trialDbId = null;

    @SerializedName("trialName")
    private String trialName = null;

    public Study active(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * A flag to indicate if a Study is currently active and ongoing
     *
     * @return active
     **/
    @Schema(example = "true", description = "A flag to indicate if a Study is currently active and ongoing")
    public Boolean isActive() {
        return active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    public Study additionalInfo(Map<String, String> additionalInfo) {
        this.additionalInfo = additionalInfo;
        return this;
    }

    public Study putAdditionalInfoItem(String key, String additionalInfoItem) {
        if (this.additionalInfo == null) {
            this.additionalInfo = new HashMap<String, String>();
        }
        this.additionalInfo.put(key, additionalInfoItem);
        return this;
    }

    /**
     * A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.
     *
     * @return additionalInfo
     **/
    @Schema(description = "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.")
    public Map<String, String> getAdditionalInfo() {
        return additionalInfo;
    }

    public void setAdditionalInfo(Map<String, String> additionalInfo) {
        this.additionalInfo = additionalInfo;
    }

    public Study commonCropName(String commonCropName) {
        this.commonCropName = commonCropName;
        return this;
    }

    /**
     * Common name for the crop associated with this study
     *
     * @return commonCropName
     **/
    @Schema(example = "Grape", description = "Common name for the crop associated with this study")
    public String getCommonCropName() {
        return commonCropName;
    }

    public void setCommonCropName(String commonCropName) {
        this.commonCropName = commonCropName;
    }

    public Study contacts(List<StudyContacts> contacts) {
        this.contacts = contacts;
        return this;
    }

    public Study addContactsItem(StudyContacts contactsItem) {
        if (this.contacts == null) {
            this.contacts = new ArrayList<StudyContacts>();
        }
        this.contacts.add(contactsItem);
        return this;
    }

    /**
     * List of contact entities associated with this study
     *
     * @return contacts
     **/
    @Schema(description = "List of contact entities associated with this study")
    public List<StudyContacts> getContacts() {
        return contacts;
    }

    public void setContacts(List<StudyContacts> contacts) {
        this.contacts = contacts;
    }

    public Study culturalPractices(String culturalPractices) {
        this.culturalPractices = culturalPractices;
        return this;
    }

    /**
     * MIAPPE V1.1 (DM-28) Cultural practices - General description of the cultural practices of the study.
     *
     * @return culturalPractices
     **/
    @Schema(example = "Irrigation was applied according needs during summer to prevent water stress.", description = "MIAPPE V1.1 (DM-28) Cultural practices - General description of the cultural practices of the study.")
    public String getCulturalPractices() {
        return culturalPractices;
    }

    public void setCulturalPractices(String culturalPractices) {
        this.culturalPractices = culturalPractices;
    }

    public Study dataLinks(List<StudyDataLinks> dataLinks) {
        this.dataLinks = dataLinks;
        return this;
    }

    public Study addDataLinksItem(StudyDataLinks dataLinksItem) {
        if (this.dataLinks == null) {
            this.dataLinks = new ArrayList<StudyDataLinks>();
        }
        this.dataLinks.add(dataLinksItem);
        return this;
    }

    /**
     * List of links to extra data files associated with this study. Extra data could include notes, images, and reference data.
     *
     * @return dataLinks
     **/
    @Schema(description = "List of links to extra data files associated with this study. Extra data could include notes, images, and reference data.")
    public List<StudyDataLinks> getDataLinks() {
        return dataLinks;
    }

    public void setDataLinks(List<StudyDataLinks> dataLinks) {
        this.dataLinks = dataLinks;
    }

    public Study documentationURL(String documentationURL) {
        this.documentationURL = documentationURL;
        return this;
    }

    /**
     * A URL to the human readable documentation of an object
     *
     * @return documentationURL
     **/
    @Schema(example = "https://wiki.brapi.org", description = "A URL to the human readable documentation of an object")
    public String getDocumentationURL() {
        return documentationURL;
    }

    public void setDocumentationURL(String documentationURL) {
        this.documentationURL = documentationURL;
    }

    public Study endDate(OffsetDateTime endDate) {
        this.endDate = endDate;
        return this;
    }

    /**
     * The date the study ends  MIAPPE V1.1 (DM-15) End date of study - Date and, if relevant, time when the experiment ended
     *
     * @return endDate
     **/
    @Schema(description = "The date the study ends  MIAPPE V1.1 (DM-15) End date of study - Date and, if relevant, time when the experiment ended")
    public OffsetDateTime getEndDate() {
        return endDate;
    }

    public void setEndDate(OffsetDateTime endDate) {
        this.endDate = endDate;
    }

    public Study environmentParameters(List<StudyEnvironmentParameters> environmentParameters) {
        this.environmentParameters = environmentParameters;
        return this;
    }

    public Study addEnvironmentParametersItem(StudyEnvironmentParameters environmentParametersItem) {
        if (this.environmentParameters == null) {
            this.environmentParameters = new ArrayList<StudyEnvironmentParameters>();
        }
        this.environmentParameters.add(environmentParametersItem);
        return this;
    }

    /**
     * Environmental parameters that were kept constant throughout the study and did not change between observation units.  MIAPPE V1.1 (DM-57) Environment - Environmental parameters that were kept constant throughout the study and did not change between observation units or assays. Environment characteristics that vary over time, i.e. environmental variables, should be recorded as Observed Variables (see below).
     *
     * @return environmentParameters
     **/
    @Schema(description = "Environmental parameters that were kept constant throughout the study and did not change between observation units.  MIAPPE V1.1 (DM-57) Environment - Environmental parameters that were kept constant throughout the study and did not change between observation units or assays. Environment characteristics that vary over time, i.e. environmental variables, should be recorded as Observed Variables (see below).")
    public List<StudyEnvironmentParameters> getEnvironmentParameters() {
        return environmentParameters;
    }

    public void setEnvironmentParameters(List<StudyEnvironmentParameters> environmentParameters) {
        this.environmentParameters = environmentParameters;
    }

    public Study experimentalDesign(StudyExperimentalDesign experimentalDesign) {
        this.experimentalDesign = experimentalDesign;
        return this;
    }

    /**
     * Get experimentalDesign
     *
     * @return experimentalDesign
     **/
    @Schema(description = "")
    public StudyExperimentalDesign getExperimentalDesign() {
        return experimentalDesign;
    }

    public void setExperimentalDesign(StudyExperimentalDesign experimentalDesign) {
        this.experimentalDesign = experimentalDesign;
    }

    public Study externalReferences(List<ExternalReferencesInner> externalReferences) {
        this.externalReferences = externalReferences;
        return this;
    }

    public Study addExternalReferencesItem(ExternalReferencesInner externalReferencesItem) {
        if (this.externalReferences == null) {
            this.externalReferences = new ArrayList<ExternalReferencesInner>();
        }
        this.externalReferences.add(externalReferencesItem);
        return this;
    }

    /**
     * An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
     *
     * @return externalReferences
     **/
    @Schema(example = "[{\"referenceId\":\"doi:10.155454/12341234\",\"referenceSource\":\"DOI\"},{\"referenceId\":\"75a50e76\",\"referenceSource\":\"Remote Data Collection Upload Tool\"}]", description = "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.")
    public List<ExternalReferencesInner> getExternalReferences() {
        return externalReferences;
    }

    public void setExternalReferences(List<ExternalReferencesInner> externalReferences) {
        this.externalReferences = externalReferences;
    }

    public Study growthFacility(StudyGrowthFacility growthFacility) {
        this.growthFacility = growthFacility;
        return this;
    }

    /**
     * Get growthFacility
     *
     * @return growthFacility
     **/
    @Schema(description = "")
    public StudyGrowthFacility getGrowthFacility() {
        return growthFacility;
    }

    public void setGrowthFacility(StudyGrowthFacility growthFacility) {
        this.growthFacility = growthFacility;
    }

    public Study lastUpdate(StudyLastUpdate lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }

    /**
     * Get lastUpdate
     *
     * @return lastUpdate
     **/
    @Schema(description = "")
    public StudyLastUpdate getLastUpdate() {
        return lastUpdate;
    }

    public void setLastUpdate(StudyLastUpdate lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    public Study license(String license) {
        this.license = license;
        return this;
    }

    /**
     * The usage license associated with the study data
     *
     * @return license
     **/
    @Schema(example = "MIT License", description = "The usage license associated with the study data")
    public String getLicense() {
        return license;
    }

    public void setLicense(String license) {
        this.license = license;
    }

    public Study locationDbId(String locationDbId) {
        this.locationDbId = locationDbId;
        return this;
    }

    /**
     * The unique identifier for a Location
     *
     * @return locationDbId
     **/
    @Schema(example = "3cfdd67d", description = "The unique identifier for a Location")
    public String getLocationDbId() {
        return locationDbId;
    }

    public void setLocationDbId(String locationDbId) {
        this.locationDbId = locationDbId;
    }

    public Study locationName(String locationName) {
        this.locationName = locationName;
        return this;
    }

    /**
     * A human readable name for this location  MIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.
     *
     * @return locationName
     **/
    @Schema(example = "Location 1", description = "A human readable name for this location  MIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.")
    public String getLocationName() {
        return locationName;
    }

    public void setLocationName(String locationName) {
        this.locationName = locationName;
    }

    public Study observationLevels(List<ObservationUnitHierarchyLevel1> observationLevels) {
        this.observationLevels = observationLevels;
        return this;
    }

    public Study addObservationLevelsItem(ObservationUnitHierarchyLevel1 observationLevelsItem) {
        if (this.observationLevels == null) {
            this.observationLevels = new ArrayList<ObservationUnitHierarchyLevel1>();
        }
        this.observationLevels.add(observationLevelsItem);
        return this;
    }

    /**
     * Observation levels indicate the granularity level at which the measurements are taken. &#x60;levelName&#x60; defines the level, &#x60;levelOrder&#x60; defines where that level exists in the hierarchy of levels. &#x60;levelOrder&#x60;s lower numbers are at the top of the hierarchy (ie field &gt; 0) and higher numbers are at the bottom of the hierarchy (ie plant &gt; 6).
     *
     * @return observationLevels
     **/
    @Schema(example = "[{\"levelName\":\"field\",\"levelOrder\":0},{\"levelName\":\"block\",\"levelOrder\":1},{\"levelName\":\"plot\",\"levelOrder\":2}]", description = "Observation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). ")
    public List<ObservationUnitHierarchyLevel1> getObservationLevels() {
        return observationLevels;
    }

    public void setObservationLevels(List<ObservationUnitHierarchyLevel1> observationLevels) {
        this.observationLevels = observationLevels;
    }

    public Study observationUnitsDescription(String observationUnitsDescription) {
        this.observationUnitsDescription = observationUnitsDescription;
        return this;
    }

    /**
     * MIAPPE V1.1 (DM-25) Observation unit description - General description of the observation units in the study.
     *
     * @return observationUnitsDescription
     **/
    @Schema(example = "Observation units consisted in individual plots themselves consisting of a row of 15 plants at a density of approximately six plants per square meter.", description = "MIAPPE V1.1 (DM-25) Observation unit description - General description of the observation units in the study.")
    public String getObservationUnitsDescription() {
        return observationUnitsDescription;
    }

    public void setObservationUnitsDescription(String observationUnitsDescription) {
        this.observationUnitsDescription = observationUnitsDescription;
    }

    public Study observationVariableDbIds(List<String> observationVariableDbIds) {
        this.observationVariableDbIds = observationVariableDbIds;
        return this;
    }

    public Study addObservationVariableDbIdsItem(String observationVariableDbIdsItem) {
        if (this.observationVariableDbIds == null) {
            this.observationVariableDbIds = new ArrayList<String>();
        }
        this.observationVariableDbIds.add(observationVariableDbIdsItem);
        return this;
    }

    /**
     * The list of Observation Variables being used in this study.   This list is intended to be the wishlist of variables to collect in this study. It may or may not match the set of variables used in the collected observation records.
     *
     * @return observationVariableDbIds
     **/
    @Schema(example = "[\"57c236f9\",\"48b327ea\",\"a5b367c5\"]", description = "The list of Observation Variables being used in this study.   This list is intended to be the wishlist of variables to collect in this study. It may or may not match the set of variables used in the collected observation records. ")
    public List<String> getObservationVariableDbIds() {
        return observationVariableDbIds;
    }

    public void setObservationVariableDbIds(List<String> observationVariableDbIds) {
        this.observationVariableDbIds = observationVariableDbIds;
    }

    public Study seasons(List<String> seasons) {
        this.seasons = seasons;
        return this;
    }

    public Study addSeasonsItem(String seasonsItem) {
        if (this.seasons == null) {
            this.seasons = new ArrayList<String>();
        }
        this.seasons.add(seasonsItem);
        return this;
    }

    /**
     * List of seasons over which this study was performed.
     *
     * @return seasons
     **/
    @Schema(example = "[\"Spring_2018\"]", description = "List of seasons over which this study was performed.")
    public List<String> getSeasons() {
        return seasons;
    }

    public void setSeasons(List<String> seasons) {
        this.seasons = seasons;
    }

    public Study startDate(OffsetDateTime startDate) {
        this.startDate = startDate;
        return this;
    }

    /**
     * The date this study started  MIAPPE V1.1 (DM-14) Start date of study - Date and, if relevant, time when the experiment started
     *
     * @return startDate
     **/
    @Schema(description = "The date this study started  MIAPPE V1.1 (DM-14) Start date of study - Date and, if relevant, time when the experiment started")
    public OffsetDateTime getStartDate() {
        return startDate;
    }

    public void setStartDate(OffsetDateTime startDate) {
        this.startDate = startDate;
    }

    public Study studyCode(String studyCode) {
        this.studyCode = studyCode;
        return this;
    }

    /**
     * A short human readable code for a study
     *
     * @return studyCode
     **/
    @Schema(example = "Grape_Yield_Spring_2018", description = "A short human readable code for a study")
    public String getStudyCode() {
        return studyCode;
    }

    public void setStudyCode(String studyCode) {
        this.studyCode = studyCode;
    }

    public Study studyDbId(String studyDbId) {
        this.studyDbId = studyDbId;
        return this;
    }

    /**
     * The ID which uniquely identifies a study within the given database server  MIAPPE V1.1 (DM-11) Study unique ID - Unique identifier comprising the name or identifier for the institution/database hosting the submission of the study data, and the identifier of the study in that institution.
     *
     * @return studyDbId
     **/
    @Schema(example = "175ac75a", description = "The ID which uniquely identifies a study within the given database server  MIAPPE V1.1 (DM-11) Study unique ID - Unique identifier comprising the name or identifier for the institution/database hosting the submission of the study data, and the identifier of the study in that institution.")
    public String getStudyDbId() {
        return studyDbId;
    }

    public void setStudyDbId(String studyDbId) {
        this.studyDbId = studyDbId;
    }

    public Study studyDescription(String studyDescription) {
        this.studyDescription = studyDescription;
        return this;
    }

    /**
     * The description of this study  MIAPPE V1.1 (DM-13) Study description - Human-readable text describing the study
     *
     * @return studyDescription
     **/
    @Schema(example = "This is a yield study for Spring 2018", description = "The description of this study  MIAPPE V1.1 (DM-13) Study description - Human-readable text describing the study")
    public String getStudyDescription() {
        return studyDescription;
    }

    public void setStudyDescription(String studyDescription) {
        this.studyDescription = studyDescription;
    }

    public Study studyName(String studyName) {
        this.studyName = studyName;
        return this;
    }

    /**
     * The human readable name for a study  MIAPPE V1.1 (DM-12) Study title - Human-readable text summarising the study
     *
     * @return studyName
     **/
    @Schema(example = "INRA's Walnut Genetic Resources Observation at Kenya", description = "The human readable name for a study  MIAPPE V1.1 (DM-12) Study title - Human-readable text summarising the study")
    public String getStudyName() {
        return studyName;
    }

    public void setStudyName(String studyName) {
        this.studyName = studyName;
    }

    public Study studyPUI(String studyPUI) {
        this.studyPUI = studyPUI;
        return this;
    }

    /**
     * A permanent unique identifier associated with this study data. For example, a URI or DOI
     *
     * @return studyPUI
     **/
    @Schema(example = "doi:10.155454/12349537312", description = "A permanent unique identifier associated with this study data. For example, a URI or DOI")
    public String getStudyPUI() {
        return studyPUI;
    }

    public void setStudyPUI(String studyPUI) {
        this.studyPUI = studyPUI;
    }

    public Study studyType(String studyType) {
        this.studyType = studyType;
        return this;
    }

    /**
     * The type of study being performed. ex. \&quot;Yield Trial\&quot;, etc
     *
     * @return studyType
     **/
    @Schema(example = "Phenotyping", description = "The type of study being performed. ex. \"Yield Trial\", etc")
    public String getStudyType() {
        return studyType;
    }

    public void setStudyType(String studyType) {
        this.studyType = studyType;
    }

    public Study trialDbId(String trialDbId) {
        this.trialDbId = trialDbId;
        return this;
    }

    /**
     * The ID which uniquely identifies a trial
     *
     * @return trialDbId
     **/
    @Schema(example = "48b327ea", description = "The ID which uniquely identifies a trial")
    public String getTrialDbId() {
        return trialDbId;
    }

    public void setTrialDbId(String trialDbId) {
        this.trialDbId = trialDbId;
    }

    public Study trialName(String trialName) {
        this.trialName = trialName;
        return this;
    }

    /**
     * The human readable name of a trial
     *
     * @return trialName
     **/
    @Schema(example = "Grape_Yield_Trial", description = "The human readable name of a trial")
    public String getTrialName() {
        return trialName;
    }

    public void setTrialName(String trialName) {
        this.trialName = trialName;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Study study = (Study) o;
        return Objects.equals(this.active, study.active) &&
                Objects.equals(this.additionalInfo, study.additionalInfo) &&
                Objects.equals(this.commonCropName, study.commonCropName) &&
                Objects.equals(this.contacts, study.contacts) &&
                Objects.equals(this.culturalPractices, study.culturalPractices) &&
                Objects.equals(this.dataLinks, study.dataLinks) &&
                Objects.equals(this.documentationURL, study.documentationURL) &&
                Objects.equals(this.endDate, study.endDate) &&
                Objects.equals(this.environmentParameters, study.environmentParameters) &&
                Objects.equals(this.experimentalDesign, study.experimentalDesign) &&
                Objects.equals(this.externalReferences, study.externalReferences) &&
                Objects.equals(this.growthFacility, study.growthFacility) &&
                Objects.equals(this.lastUpdate, study.lastUpdate) &&
                Objects.equals(this.license, study.license) &&
                Objects.equals(this.locationDbId, study.locationDbId) &&
                Objects.equals(this.locationName, study.locationName) &&
                Objects.equals(this.observationLevels, study.observationLevels) &&
                Objects.equals(this.observationUnitsDescription, study.observationUnitsDescription) &&
                Objects.equals(this.observationVariableDbIds, study.observationVariableDbIds) &&
                Objects.equals(this.seasons, study.seasons) &&
                Objects.equals(this.startDate, study.startDate) &&
                Objects.equals(this.studyCode, study.studyCode) &&
                Objects.equals(this.studyDbId, study.studyDbId) &&
                Objects.equals(this.studyDescription, study.studyDescription) &&
                Objects.equals(this.studyName, study.studyName) &&
                Objects.equals(this.studyPUI, study.studyPUI) &&
                Objects.equals(this.studyType, study.studyType) &&
                Objects.equals(this.trialDbId, study.trialDbId) &&
                Objects.equals(this.trialName, study.trialName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(active, additionalInfo, commonCropName, contacts, culturalPractices, dataLinks, documentationURL, endDate, environmentParameters, experimentalDesign, externalReferences, growthFacility, lastUpdate, license, locationDbId, locationName, observationLevels, observationUnitsDescription, observationVariableDbIds, seasons, startDate, studyCode, studyDbId, studyDescription, studyName, studyPUI, studyType, trialDbId, trialName);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Study {\n");

        sb.append("    active: ").append(toIndentedString(active)).append("\n");
        sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
        sb.append("    commonCropName: ").append(toIndentedString(commonCropName)).append("\n");
        sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
        sb.append("    culturalPractices: ").append(toIndentedString(culturalPractices)).append("\n");
        sb.append("    dataLinks: ").append(toIndentedString(dataLinks)).append("\n");
        sb.append("    documentationURL: ").append(toIndentedString(documentationURL)).append("\n");
        sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
        sb.append("    environmentParameters: ").append(toIndentedString(environmentParameters)).append("\n");
        sb.append("    experimentalDesign: ").append(toIndentedString(experimentalDesign)).append("\n");
        sb.append("    externalReferences: ").append(toIndentedString(externalReferences)).append("\n");
        sb.append("    growthFacility: ").append(toIndentedString(growthFacility)).append("\n");
        sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
        sb.append("    license: ").append(toIndentedString(license)).append("\n");
        sb.append("    locationDbId: ").append(toIndentedString(locationDbId)).append("\n");
        sb.append("    locationName: ").append(toIndentedString(locationName)).append("\n");
        sb.append("    observationLevels: ").append(toIndentedString(observationLevels)).append("\n");
        sb.append("    observationUnitsDescription: ").append(toIndentedString(observationUnitsDescription)).append("\n");
        sb.append("    observationVariableDbIds: ").append(toIndentedString(observationVariableDbIds)).append("\n");
        sb.append("    seasons: ").append(toIndentedString(seasons)).append("\n");
        sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
        sb.append("    studyCode: ").append(toIndentedString(studyCode)).append("\n");
        sb.append("    studyDbId: ").append(toIndentedString(studyDbId)).append("\n");
        sb.append("    studyDescription: ").append(toIndentedString(studyDescription)).append("\n");
        sb.append("    studyName: ").append(toIndentedString(studyName)).append("\n");
        sb.append("    studyPUI: ").append(toIndentedString(studyPUI)).append("\n");
        sb.append("    studyType: ").append(toIndentedString(studyType)).append("\n");
        sb.append("    trialDbId: ").append(toIndentedString(trialDbId)).append("\n");
        sb.append("    trialName: ").append(toIndentedString(trialName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

/*
 * BrAPI-Genotyping
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/RESTfulness\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Response_Structure\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Dates_and_Times\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Location_Coordinates\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Error_Handling\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Search_Services\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.model.v21.genotype;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * GenomeMap
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-25T14:54:00.515Z[GMT]")
public class GenomeMap {
    @SerializedName("additionalInfo")
    private Map<String, String> additionalInfo = null;

    @SerializedName("comments")
    private String comments = null;

    @SerializedName("commonCropName")
    private String commonCropName = null;

    @SerializedName("documentationURL")
    private String documentationURL = null;

    @SerializedName("linkageGroupCount")
    private Integer linkageGroupCount = null;

    @SerializedName("mapDbId")
    private String mapDbId = null;

    @SerializedName("mapName")
    private String mapName = null;

    @SerializedName("mapPUI")
    private String mapPUI = null;

    @SerializedName("markerCount")
    private Integer markerCount = null;

    @SerializedName("publishedDate")
    private OffsetDateTime publishedDate = null;

    @SerializedName("scientificName")
    private String scientificName = null;

    @SerializedName("type")
    private String type = null;

    @SerializedName("unit")
    private String unit = null;

    public GenomeMap additionalInfo(Map<String, String> additionalInfo) {
        this.additionalInfo = additionalInfo;
        return this;
    }

    public GenomeMap putAdditionalInfoItem(String key, String additionalInfoItem) {
        if (this.additionalInfo == null) {
            this.additionalInfo = new HashMap<String, String>();
        }
        this.additionalInfo.put(key, additionalInfoItem);
        return this;
    }

    /**
     * A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.
     *
     * @return additionalInfo
     **/
    @Schema(description = "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.")
    public Map<String, String> getAdditionalInfo() {
        return additionalInfo;
    }

    public void setAdditionalInfo(Map<String, String> additionalInfo) {
        this.additionalInfo = additionalInfo;
    }

    public GenomeMap comments(String comments) {
        this.comments = comments;
        return this;
    }

    /**
     * Additional comments about a &#x60;GenomeMap&#x60;
     *
     * @return comments
     **/
    @Schema(example = "Comments about this map", description = "Additional comments about a `GenomeMap`")
    public String getComments() {
        return comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    public GenomeMap commonCropName(String commonCropName) {
        this.commonCropName = commonCropName;
        return this;
    }

    /**
     * The common name of the &#x60;Crop&#x60;
     *
     * @return commonCropName
     **/
    @Schema(example = "Paw Paw", required = true, description = "The common name of the `Crop`")
    public String getCommonCropName() {
        return commonCropName;
    }

    public void setCommonCropName(String commonCropName) {
        this.commonCropName = commonCropName;
    }

    public GenomeMap documentationURL(String documentationURL) {
        this.documentationURL = documentationURL;
        return this;
    }

    /**
     * A URL to the human readable documentation of an object
     *
     * @return documentationURL
     **/
    @Schema(example = "https://brapi.org", description = "A URL to the human readable documentation of an object")
    public String getDocumentationURL() {
        return documentationURL;
    }

    public void setDocumentationURL(String documentationURL) {
        this.documentationURL = documentationURL;
    }

    public GenomeMap linkageGroupCount(Integer linkageGroupCount) {
        this.linkageGroupCount = linkageGroupCount;
        return this;
    }

    /**
     * The number of linkage groups present in a &#x60;GenomeMap&#x60;
     *
     * @return linkageGroupCount
     **/
    @Schema(example = "5", description = "The number of linkage groups present in a `GenomeMap`")
    public Integer getLinkageGroupCount() {
        return linkageGroupCount;
    }

    public void setLinkageGroupCount(Integer linkageGroupCount) {
        this.linkageGroupCount = linkageGroupCount;
    }

    public GenomeMap mapDbId(String mapDbId) {
        this.mapDbId = mapDbId;
        return this;
    }

    /**
     * The ID which uniquely identifies a &#x60;GenomeMap&#x60;
     *
     * @return mapDbId
     **/
    @Schema(example = "142cffd5", required = true, description = "The ID which uniquely identifies a `GenomeMap`")
    public String getMapDbId() {
        return mapDbId;
    }

    public void setMapDbId(String mapDbId) {
        this.mapDbId = mapDbId;
    }

    public GenomeMap mapName(String mapName) {
        this.mapName = mapName;
        return this;
    }

    /**
     * A human readable name for a &#x60;GenomeMap&#x60;
     *
     * @return mapName
     **/
    @Schema(example = "Genome Map 1", description = "A human readable name for a `GenomeMap`")
    public String getMapName() {
        return mapName;
    }

    public void setMapName(String mapName) {
        this.mapName = mapName;
    }

    public GenomeMap mapPUI(String mapPUI) {
        this.mapPUI = mapPUI;
        return this;
    }

    /**
     * The DOI or other permanent identifier for a &#x60;GenomeMap&#x60;
     *
     * @return mapPUI
     **/
    @Schema(example = "doi:10.3207/2959859860", description = "The DOI or other permanent identifier for a `GenomeMap`")
    public String getMapPUI() {
        return mapPUI;
    }

    public void setMapPUI(String mapPUI) {
        this.mapPUI = mapPUI;
    }

    public GenomeMap markerCount(Integer markerCount) {
        this.markerCount = markerCount;
        return this;
    }

    /**
     * The number of markers present in a &#x60;GenomeMap&#x60;
     *
     * @return markerCount
     **/
    @Schema(example = "1100", description = "The number of markers present in a `GenomeMap`")
    public Integer getMarkerCount() {
        return markerCount;
    }

    public void setMarkerCount(Integer markerCount) {
        this.markerCount = markerCount;
    }

    public GenomeMap publishedDate(OffsetDateTime publishedDate) {
        this.publishedDate = publishedDate;
        return this;
    }

    /**
     * The date this &#x60;GenomeMap&#x60; was published
     *
     * @return publishedDate
     **/
    @Schema(description = "The date this `GenomeMap` was published")
    public OffsetDateTime getPublishedDate() {
        return publishedDate;
    }

    public void setPublishedDate(OffsetDateTime publishedDate) {
        this.publishedDate = publishedDate;
    }

    public GenomeMap scientificName(String scientificName) {
        this.scientificName = scientificName;
        return this;
    }

    /**
     * Full scientific binomial format name. This includes Genus, Species, and Sub-species
     *
     * @return scientificName
     **/
    @Schema(example = "Zea mays", description = "Full scientific binomial format name. This includes Genus, Species, and Sub-species")
    public String getScientificName() {
        return scientificName;
    }

    public void setScientificName(String scientificName) {
        this.scientificName = scientificName;
    }

    public GenomeMap type(String type) {
        this.type = type;
        return this;
    }

    /**
     * The type of map this represents, usually \&quot;Genetic\&quot; or \&quot;Physical\&quot;
     *
     * @return type
     **/
    @Schema(example = "Genetic", required = true, description = "The type of map this represents, usually \"Genetic\" or \"Physical\"")
    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public GenomeMap unit(String unit) {
        this.unit = unit;
        return this;
    }

    /**
     * The units used to describe the data in a &#x60;GenomeMap&#x60;
     *
     * @return unit
     **/
    @Schema(example = "cM", description = "The units used to describe the data in a `GenomeMap`")
    public String getUnit() {
        return unit;
    }

    public void setUnit(String unit) {
        this.unit = unit;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GenomeMap genomeMap = (GenomeMap) o;
        return Objects.equals(this.additionalInfo, genomeMap.additionalInfo) &&
                Objects.equals(this.comments, genomeMap.comments) &&
                Objects.equals(this.commonCropName, genomeMap.commonCropName) &&
                Objects.equals(this.documentationURL, genomeMap.documentationURL) &&
                Objects.equals(this.linkageGroupCount, genomeMap.linkageGroupCount) &&
                Objects.equals(this.mapDbId, genomeMap.mapDbId) &&
                Objects.equals(this.mapName, genomeMap.mapName) &&
                Objects.equals(this.mapPUI, genomeMap.mapPUI) &&
                Objects.equals(this.markerCount, genomeMap.markerCount) &&
                Objects.equals(this.publishedDate, genomeMap.publishedDate) &&
                Objects.equals(this.scientificName, genomeMap.scientificName) &&
                Objects.equals(this.type, genomeMap.type) &&
                Objects.equals(this.unit, genomeMap.unit);
    }

    @Override
    public int hashCode() {
        return Objects.hash(additionalInfo, comments, commonCropName, documentationURL, linkageGroupCount, mapDbId, mapName, mapPUI, markerCount, publishedDate, scientificName, type, unit);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GenomeMap {\n");

        sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
        sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
        sb.append("    commonCropName: ").append(toIndentedString(commonCropName)).append("\n");
        sb.append("    documentationURL: ").append(toIndentedString(documentationURL)).append("\n");
        sb.append("    linkageGroupCount: ").append(toIndentedString(linkageGroupCount)).append("\n");
        sb.append("    mapDbId: ").append(toIndentedString(mapDbId)).append("\n");
        sb.append("    mapName: ").append(toIndentedString(mapName)).append("\n");
        sb.append("    mapPUI: ").append(toIndentedString(mapPUI)).append("\n");
        sb.append("    markerCount: ").append(toIndentedString(markerCount)).append("\n");
        sb.append("    publishedDate: ").append(toIndentedString(publishedDate)).append("\n");
        sb.append("    scientificName: ").append(toIndentedString(scientificName)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

/*
 * BrAPI-Germplasm
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/RESTfulness\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Response_Structure\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Dates_and_Times\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Location_Coordinates\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Error_Handling\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Search_Services\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.model.v21.germplasm;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * GermplasmSearchRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-25T17:45:22.672Z[GMT]")
public class GermplasmSearchRequest {
    @SerializedName("accessionNumbers")
    private List<String> accessionNumbers = null;

    @SerializedName("binomialNames")
    private List<String> binomialNames = null;

    @SerializedName("collections")
    private List<String> collections = null;

    @SerializedName("commonCropNames")
    private List<String> commonCropNames = null;

    @SerializedName("externalReferenceIDs")
    private List<String> externalReferenceIDs = null;

    @SerializedName("externalReferenceIds")
    private List<String> externalReferenceIds = null;

    @SerializedName("externalReferenceSources")
    private List<String> externalReferenceSources = null;

    @SerializedName("familyCodes")
    private List<String> familyCodes = null;

    @SerializedName("genus")
    private List<String> genus = null;

    @SerializedName("germplasmDbIds")
    private List<String> germplasmDbIds = null;

    @SerializedName("germplasmNames")
    private List<String> germplasmNames = null;

    @SerializedName("germplasmPUIs")
    private List<String> germplasmPUIs = null;

    @SerializedName("instituteCodes")
    private List<String> instituteCodes = null;

    @SerializedName("page")
    private Integer page = null;

    @SerializedName("pageSize")
    private Integer pageSize = null;

    @SerializedName("parentDbIds")
    private List<String> parentDbIds = null;

    @SerializedName("progenyDbIds")
    private List<String> progenyDbIds = null;

    @SerializedName("programDbIds")
    private List<String> programDbIds = null;

    @SerializedName("programNames")
    private List<String> programNames = null;

    @SerializedName("species")
    private List<String> species = null;

    @SerializedName("studyDbIds")
    private List<String> studyDbIds = null;

    @SerializedName("studyNames")
    private List<String> studyNames = null;

    @SerializedName("synonyms")
    private List<String> synonyms = null;

    @SerializedName("trialDbIds")
    private List<String> trialDbIds = null;

    @SerializedName("trialNames")
    private List<String> trialNames = null;

    public GermplasmSearchRequest accessionNumbers(List<String> accessionNumbers) {
        this.accessionNumbers = accessionNumbers;
        return this;
    }

    public GermplasmSearchRequest addAccessionNumbersItem(String accessionNumbersItem) {
        if (this.accessionNumbers == null) {
            this.accessionNumbers = new ArrayList<String>();
        }
        this.accessionNumbers.add(accessionNumbersItem);
        return this;
    }

    /**
     * A collection of unique identifiers for materials or germplasm within a genebank  MCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. \&quot;PI 113869\&quot;).
     *
     * @return accessionNumbers
     **/
    @Schema(example = "[\"A0000003\",\"A0000477\"]", description = "A collection of unique identifiers for materials or germplasm within a genebank  MCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. \"PI 113869\").")
    public List<String> getAccessionNumbers() {
        return accessionNumbers;
    }

    public void setAccessionNumbers(List<String> accessionNumbers) {
        this.accessionNumbers = accessionNumbers;
    }

    public GermplasmSearchRequest binomialNames(List<String> binomialNames) {
        this.binomialNames = binomialNames;
        return this;
    }

    public GermplasmSearchRequest addBinomialNamesItem(String binomialNamesItem) {
        if (this.binomialNames == null) {
            this.binomialNames = new ArrayList<String>();
        }
        this.binomialNames.add(binomialNamesItem);
        return this;
    }

    /**
     * List of the full binomial name (scientific name) to identify a germplasm
     *
     * @return binomialNames
     **/
    @Schema(example = "[\"Aspergillus fructus\",\"Zea mays\"]", description = "List of the full binomial name (scientific name) to identify a germplasm")
    public List<String> getBinomialNames() {
        return binomialNames;
    }

    public void setBinomialNames(List<String> binomialNames) {
        this.binomialNames = binomialNames;
    }

    public GermplasmSearchRequest collections(List<String> collections) {
        this.collections = collections;
        return this;
    }

    public GermplasmSearchRequest addCollectionsItem(String collectionsItem) {
        if (this.collections == null) {
            this.collections = new ArrayList<String>();
        }
        this.collections.add(collectionsItem);
        return this;
    }

    /**
     * A specific panel/collection/population name this germplasm belongs to.
     *
     * @return collections
     **/
    @Schema(example = "[\"RDP1\",\"MDP1\"]", description = "A specific panel/collection/population name this germplasm belongs to.")
    public List<String> getCollections() {
        return collections;
    }

    public void setCollections(List<String> collections) {
        this.collections = collections;
    }

    public GermplasmSearchRequest commonCropNames(List<String> commonCropNames) {
        this.commonCropNames = commonCropNames;
        return this;
    }

    public GermplasmSearchRequest addCommonCropNamesItem(String commonCropNamesItem) {
        if (this.commonCropNames == null) {
            this.commonCropNames = new ArrayList<String>();
        }
        this.commonCropNames.add(commonCropNamesItem);
        return this;
    }

    /**
     * The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like &#x27;Maize&#x27;, &#x27;Wheat&#x27;, and &#x27;Rice&#x27; are examples of common crop names.  Use this parameter to only return results associated with the given crops.   Use &#x60;GET /commoncropnames&#x60; to find the list of available crops on a server.
     *
     * @return commonCropNames
     **/
    @Schema(example = "[\"Tomatillo\",\"Paw Paw\"]", description = "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.  Use this parameter to only return results associated with the given crops.   Use `GET /commoncropnames` to find the list of available crops on a server.")
    public List<String> getCommonCropNames() {
        return commonCropNames;
    }

    public void setCommonCropNames(List<String> commonCropNames) {
        this.commonCropNames = commonCropNames;
    }

    public GermplasmSearchRequest externalReferenceIDs(List<String> externalReferenceIDs) {
        this.externalReferenceIDs = externalReferenceIDs;
        return this;
    }

    public GermplasmSearchRequest addExternalReferenceIDsItem(String externalReferenceIDsItem) {
        if (this.externalReferenceIDs == null) {
            this.externalReferenceIDs = new ArrayList<String>();
        }
        this.externalReferenceIDs.add(externalReferenceIDsItem);
        return this;
    }

    /**
     * **Deprecated in v2.1** Please use &#x60;externalReferenceIds&#x60;. Github issue number #460  &lt;br&gt;List of external reference IDs. Could be a simple strings or a URIs. (use with &#x60;externalReferenceSources&#x60; parameter)
     *
     * @return externalReferenceIDs
     **/
    @Schema(example = "[\"doi:10.155454/12341234\",\"14a19841\"]", description = "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460  <br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)")
    public List<String> getExternalReferenceIDs() {
        return externalReferenceIDs;
    }

    public void setExternalReferenceIDs(List<String> externalReferenceIDs) {
        this.externalReferenceIDs = externalReferenceIDs;
    }

    public GermplasmSearchRequest externalReferenceIds(List<String> externalReferenceIds) {
        this.externalReferenceIds = externalReferenceIds;
        return this;
    }

    public GermplasmSearchRequest addExternalReferenceIdsItem(String externalReferenceIdsItem) {
        if (this.externalReferenceIds == null) {
            this.externalReferenceIds = new ArrayList<String>();
        }
        this.externalReferenceIds.add(externalReferenceIdsItem);
        return this;
    }

    /**
     * List of external reference IDs. Could be a simple strings or a URIs. (use with &#x60;externalReferenceSources&#x60; parameter)
     *
     * @return externalReferenceIds
     **/
    @Schema(example = "[\"doi:10.155454/12341234\",\"14a19841\"]", description = "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)")
    public List<String> getExternalReferenceIds() {
        return externalReferenceIds;
    }

    public void setExternalReferenceIds(List<String> externalReferenceIds) {
        this.externalReferenceIds = externalReferenceIds;
    }

    public GermplasmSearchRequest externalReferenceSources(List<String> externalReferenceSources) {
        this.externalReferenceSources = externalReferenceSources;
        return this;
    }

    public GermplasmSearchRequest addExternalReferenceSourcesItem(String externalReferenceSourcesItem) {
        if (this.externalReferenceSources == null) {
            this.externalReferenceSources = new ArrayList<String>();
        }
        this.externalReferenceSources.add(externalReferenceSourcesItem);
        return this;
    }

    /**
     * List of identifiers for the source system or database of an external reference (use with &#x60;externalReferenceIDs&#x60; parameter)
     *
     * @return externalReferenceSources
     **/
    @Schema(example = "[\"DOI\",\"Field App Name\"]", description = "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)")
    public List<String> getExternalReferenceSources() {
        return externalReferenceSources;
    }

    public void setExternalReferenceSources(List<String> externalReferenceSources) {
        this.externalReferenceSources = externalReferenceSources;
    }

    public GermplasmSearchRequest familyCodes(List<String> familyCodes) {
        this.familyCodes = familyCodes;
        return this;
    }

    public GermplasmSearchRequest addFamilyCodesItem(String familyCodesItem) {
        if (this.familyCodes == null) {
            this.familyCodes = new ArrayList<String>();
        }
        this.familyCodes.add(familyCodesItem);
        return this;
    }

    /**
     * A familyCode representing the family this germplasm belongs to.
     *
     * @return familyCodes
     **/
    @Schema(example = "[\"fa000203\",\"fa009965\"]", description = "A familyCode representing the family this germplasm belongs to.")
    public List<String> getFamilyCodes() {
        return familyCodes;
    }

    public void setFamilyCodes(List<String> familyCodes) {
        this.familyCodes = familyCodes;
    }

    public GermplasmSearchRequest genus(List<String> genus) {
        this.genus = genus;
        return this;
    }

    public GermplasmSearchRequest addGenusItem(String genusItem) {
        if (this.genus == null) {
            this.genus = new ArrayList<String>();
        }
        this.genus.add(genusItem);
        return this;
    }

    /**
     * List of Genus names to identify germplasm
     *
     * @return genus
     **/
    @Schema(example = "[\"Aspergillus\",\"Zea\"]", description = "List of Genus names to identify germplasm")
    public List<String> getGenus() {
        return genus;
    }

    public void setGenus(List<String> genus) {
        this.genus = genus;
    }

    public GermplasmSearchRequest germplasmDbIds(List<String> germplasmDbIds) {
        this.germplasmDbIds = germplasmDbIds;
        return this;
    }

    public GermplasmSearchRequest addGermplasmDbIdsItem(String germplasmDbIdsItem) {
        if (this.germplasmDbIds == null) {
            this.germplasmDbIds = new ArrayList<String>();
        }
        this.germplasmDbIds.add(germplasmDbIdsItem);
        return this;
    }

    /**
     * List of IDs which uniquely identify germplasm to search for
     *
     * @return germplasmDbIds
     **/
    @Schema(example = "[\"e9c6edd7\",\"1b1df4a6\"]", description = "List of IDs which uniquely identify germplasm to search for")
    public List<String> getGermplasmDbIds() {
        return germplasmDbIds;
    }

    public void setGermplasmDbIds(List<String> germplasmDbIds) {
        this.germplasmDbIds = germplasmDbIds;
    }

    public GermplasmSearchRequest germplasmNames(List<String> germplasmNames) {
        this.germplasmNames = germplasmNames;
        return this;
    }

    public GermplasmSearchRequest addGermplasmNamesItem(String germplasmNamesItem) {
        if (this.germplasmNames == null) {
            this.germplasmNames = new ArrayList<String>();
        }
        this.germplasmNames.add(germplasmNamesItem);
        return this;
    }

    /**
     * List of human readable names to identify germplasm to search for
     *
     * @return germplasmNames
     **/
    @Schema(example = "[\"A0000003\",\"A0000477\"]", description = "List of human readable names to identify germplasm to search for")
    public List<String> getGermplasmNames() {
        return germplasmNames;
    }

    public void setGermplasmNames(List<String> germplasmNames) {
        this.germplasmNames = germplasmNames;
    }

    public GermplasmSearchRequest germplasmPUIs(List<String> germplasmPUIs) {
        this.germplasmPUIs = germplasmPUIs;
        return this;
    }

    public GermplasmSearchRequest addGermplasmPUIsItem(String germplasmPUIsItem) {
        if (this.germplasmPUIs == null) {
            this.germplasmPUIs = new ArrayList<String>();
        }
        this.germplasmPUIs.add(germplasmPUIsItem);
        return this;
    }

    /**
     * List of Permanent Unique Identifiers to identify germplasm
     *
     * @return germplasmPUIs
     **/
    @Schema(example = "[\"http://pui.per/accession/A0000003\",\"http://pui.per/accession/A0000477\"]", description = "List of Permanent Unique Identifiers to identify germplasm")
    public List<String> getGermplasmPUIs() {
        return germplasmPUIs;
    }

    public void setGermplasmPUIs(List<String> germplasmPUIs) {
        this.germplasmPUIs = germplasmPUIs;
    }

    public GermplasmSearchRequest instituteCodes(List<String> instituteCodes) {
        this.instituteCodes = instituteCodes;
        return this;
    }

    public GermplasmSearchRequest addInstituteCodesItem(String instituteCodesItem) {
        if (this.instituteCodes == null) {
            this.instituteCodes = new ArrayList<String>();
        }
        this.instituteCodes.add(instituteCodesItem);
        return this;
    }

    /**
     * The code for the institute that maintains the material.  &lt;br/&gt; MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with \&quot;obsolete\&quot; codes, see \&quot;Common formatting rules (v)\&quot;.
     *
     * @return instituteCodes
     **/
    @Schema(example = "[\"PER001\",\"NOR001\"]", description = "The code for the institute that maintains the material.  <br/> MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with \"obsolete\" codes, see \"Common formatting rules (v)\".")
    public List<String> getInstituteCodes() {
        return instituteCodes;
    }

    public void setInstituteCodes(List<String> instituteCodes) {
        this.instituteCodes = instituteCodes;
    }

    public GermplasmSearchRequest page(Integer page) {
        this.page = page;
        return this;
    }

    /**
     * Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;.
     *
     * @return page
     **/
    @Schema(example = "0", description = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.")
    public Integer getPage() {
        return page;
    }

    public void setPage(Integer page) {
        this.page = page;
    }

    public GermplasmSearchRequest pageSize(Integer pageSize) {
        this.pageSize = pageSize;
        return this;
    }

    /**
     * The size of the pages to be returned. Default is &#x60;1000&#x60;.
     *
     * @return pageSize
     **/
    @Schema(example = "1000", description = "The size of the pages to be returned. Default is `1000`.")
    public Integer getPageSize() {
        return pageSize;
    }

    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }

    public GermplasmSearchRequest parentDbIds(List<String> parentDbIds) {
        this.parentDbIds = parentDbIds;
        return this;
    }

    public GermplasmSearchRequest addParentDbIdsItem(String parentDbIdsItem) {
        if (this.parentDbIds == null) {
            this.parentDbIds = new ArrayList<String>();
        }
        this.parentDbIds.add(parentDbIdsItem);
        return this;
    }

    /**
     * Search for Germplasm with these parents
     *
     * @return parentDbIds
     **/
    @Schema(example = "[\"72c1001f\",\"7346c553\"]", description = "Search for Germplasm with these parents")
    public List<String> getParentDbIds() {
        return parentDbIds;
    }

    public void setParentDbIds(List<String> parentDbIds) {
        this.parentDbIds = parentDbIds;
    }

    public GermplasmSearchRequest progenyDbIds(List<String> progenyDbIds) {
        this.progenyDbIds = progenyDbIds;
        return this;
    }

    public GermplasmSearchRequest addProgenyDbIdsItem(String progenyDbIdsItem) {
        if (this.progenyDbIds == null) {
            this.progenyDbIds = new ArrayList<String>();
        }
        this.progenyDbIds.add(progenyDbIdsItem);
        return this;
    }

    /**
     * Search for Germplasm with these children
     *
     * @return progenyDbIds
     **/
    @Schema(example = "[\"16e16a7e\",\"ce06cf9e\"]", description = "Search for Germplasm with these children")
    public List<String> getProgenyDbIds() {
        return progenyDbIds;
    }

    public void setProgenyDbIds(List<String> progenyDbIds) {
        this.progenyDbIds = progenyDbIds;
    }

    public GermplasmSearchRequest programDbIds(List<String> programDbIds) {
        this.programDbIds = programDbIds;
        return this;
    }

    public GermplasmSearchRequest addProgramDbIdsItem(String programDbIdsItem) {
        if (this.programDbIds == null) {
            this.programDbIds = new ArrayList<String>();
        }
        this.programDbIds.add(programDbIdsItem);
        return this;
    }

    /**
     * A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs.   Use this parameter to only return results associated with the given programs.   Use &#x60;GET /programs&#x60; to find the list of available programs on a server.
     *
     * @return programDbIds
     **/
    @Schema(example = "[\"8f5de35b\",\"0e2d4a13\"]", description = "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs.   Use this parameter to only return results associated with the given programs.   Use `GET /programs` to find the list of available programs on a server.")
    public List<String> getProgramDbIds() {
        return programDbIds;
    }

    public void setProgramDbIds(List<String> programDbIds) {
        this.programDbIds = programDbIds;
    }

    public GermplasmSearchRequest programNames(List<String> programNames) {
        this.programNames = programNames;
        return this;
    }

    public GermplasmSearchRequest addProgramNamesItem(String programNamesItem) {
        if (this.programNames == null) {
            this.programNames = new ArrayList<String>();
        }
        this.programNames.add(programNamesItem);
        return this;
    }

    /**
     * Use this parameter to only return results associated with the given program names. Program names are not required to be unique.  Use &#x60;GET /programs&#x60; to find the list of available programs on a server.
     *
     * @return programNames
     **/
    @Schema(example = "[\"Better Breeding Program\",\"Best Breeding Program\"]", description = "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.  Use `GET /programs` to find the list of available programs on a server.")
    public List<String> getProgramNames() {
        return programNames;
    }

    public void setProgramNames(List<String> programNames) {
        this.programNames = programNames;
    }

    public GermplasmSearchRequest species(List<String> species) {
        this.species = species;
        return this;
    }

    public GermplasmSearchRequest addSpeciesItem(String speciesItem) {
        if (this.species == null) {
            this.species = new ArrayList<String>();
        }
        this.species.add(speciesItem);
        return this;
    }

    /**
     * List of Species names to identify germplasm
     *
     * @return species
     **/
    @Schema(example = "[\"fructus\",\"mays\"]", description = "List of Species names to identify germplasm")
    public List<String> getSpecies() {
        return species;
    }

    public void setSpecies(List<String> species) {
        this.species = species;
    }

    public GermplasmSearchRequest studyDbIds(List<String> studyDbIds) {
        this.studyDbIds = studyDbIds;
        return this;
    }

    public GermplasmSearchRequest addStudyDbIdsItem(String studyDbIdsItem) {
        if (this.studyDbIds == null) {
            this.studyDbIds = new ArrayList<String>();
        }
        this.studyDbIds.add(studyDbIdsItem);
        return this;
    }

    /**
     * List of study identifiers to search for
     *
     * @return studyDbIds
     **/
    @Schema(example = "[\"cf6c4bd4\",\"691e69d6\"]", description = "List of study identifiers to search for")
    public List<String> getStudyDbIds() {
        return studyDbIds;
    }

    public void setStudyDbIds(List<String> studyDbIds) {
        this.studyDbIds = studyDbIds;
    }

    public GermplasmSearchRequest studyNames(List<String> studyNames) {
        this.studyNames = studyNames;
        return this;
    }

    public GermplasmSearchRequest addStudyNamesItem(String studyNamesItem) {
        if (this.studyNames == null) {
            this.studyNames = new ArrayList<String>();
        }
        this.studyNames.add(studyNamesItem);
        return this;
    }

    /**
     * List of study names to filter search results
     *
     * @return studyNames
     **/
    @Schema(example = "[\"The First Bob Study 2017\",\"Wheat Yield Trial 246\"]", description = "List of study names to filter search results")
    public List<String> getStudyNames() {
        return studyNames;
    }

    public void setStudyNames(List<String> studyNames) {
        this.studyNames = studyNames;
    }

    public GermplasmSearchRequest synonyms(List<String> synonyms) {
        this.synonyms = synonyms;
        return this;
    }

    public GermplasmSearchRequest addSynonymsItem(String synonymsItem) {
        if (this.synonyms == null) {
            this.synonyms = new ArrayList<String>();
        }
        this.synonyms.add(synonymsItem);
        return this;
    }

    /**
     * List of alternative names or IDs used to reference this germplasm
     *
     * @return synonyms
     **/
    @Schema(example = "[\"variety_1\",\"2c38f9b6\"]", description = "List of alternative names or IDs used to reference this germplasm")
    public List<String> getSynonyms() {
        return synonyms;
    }

    public void setSynonyms(List<String> synonyms) {
        this.synonyms = synonyms;
    }

    public GermplasmSearchRequest trialDbIds(List<String> trialDbIds) {
        this.trialDbIds = trialDbIds;
        return this;
    }

    public GermplasmSearchRequest addTrialDbIdsItem(String trialDbIdsItem) {
        if (this.trialDbIds == null) {
            this.trialDbIds = new ArrayList<String>();
        }
        this.trialDbIds.add(trialDbIdsItem);
        return this;
    }

    /**
     * The ID which uniquely identifies a trial to search for
     *
     * @return trialDbIds
     **/
    @Schema(example = "[\"d2593dc2\",\"9431a731\"]", description = "The ID which uniquely identifies a trial to search for")
    public List<String> getTrialDbIds() {
        return trialDbIds;
    }

    public void setTrialDbIds(List<String> trialDbIds) {
        this.trialDbIds = trialDbIds;
    }

    public GermplasmSearchRequest trialNames(List<String> trialNames) {
        this.trialNames = trialNames;
        return this;
    }

    public GermplasmSearchRequest addTrialNamesItem(String trialNamesItem) {
        if (this.trialNames == null) {
            this.trialNames = new ArrayList<String>();
        }
        this.trialNames.add(trialNamesItem);
        return this;
    }

    /**
     * The human readable name of a trial to search for
     *
     * @return trialNames
     **/
    @Schema(example = "[\"All Yield Trials 2016\",\"Disease Resistance Study Comparison Group\"]", description = "The human readable name of a trial to search for")
    public List<String> getTrialNames() {
        return trialNames;
    }

    public void setTrialNames(List<String> trialNames) {
        this.trialNames = trialNames;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GermplasmSearchRequest germplasmSearchRequest = (GermplasmSearchRequest) o;
        return Objects.equals(this.accessionNumbers, germplasmSearchRequest.accessionNumbers) &&
                Objects.equals(this.binomialNames, germplasmSearchRequest.binomialNames) &&
                Objects.equals(this.collections, germplasmSearchRequest.collections) &&
                Objects.equals(this.commonCropNames, germplasmSearchRequest.commonCropNames) &&
                Objects.equals(this.externalReferenceIDs, germplasmSearchRequest.externalReferenceIDs) &&
                Objects.equals(this.externalReferenceIds, germplasmSearchRequest.externalReferenceIds) &&
                Objects.equals(this.externalReferenceSources, germplasmSearchRequest.externalReferenceSources) &&
                Objects.equals(this.familyCodes, germplasmSearchRequest.familyCodes) &&
                Objects.equals(this.genus, germplasmSearchRequest.genus) &&
                Objects.equals(this.germplasmDbIds, germplasmSearchRequest.germplasmDbIds) &&
                Objects.equals(this.germplasmNames, germplasmSearchRequest.germplasmNames) &&
                Objects.equals(this.germplasmPUIs, germplasmSearchRequest.germplasmPUIs) &&
                Objects.equals(this.instituteCodes, germplasmSearchRequest.instituteCodes) &&
                Objects.equals(this.page, germplasmSearchRequest.page) &&
                Objects.equals(this.pageSize, germplasmSearchRequest.pageSize) &&
                Objects.equals(this.parentDbIds, germplasmSearchRequest.parentDbIds) &&
                Objects.equals(this.progenyDbIds, germplasmSearchRequest.progenyDbIds) &&
                Objects.equals(this.programDbIds, germplasmSearchRequest.programDbIds) &&
                Objects.equals(this.programNames, germplasmSearchRequest.programNames) &&
                Objects.equals(this.species, germplasmSearchRequest.species) &&
                Objects.equals(this.studyDbIds, germplasmSearchRequest.studyDbIds) &&
                Objects.equals(this.studyNames, germplasmSearchRequest.studyNames) &&
                Objects.equals(this.synonyms, germplasmSearchRequest.synonyms) &&
                Objects.equals(this.trialDbIds, germplasmSearchRequest.trialDbIds) &&
                Objects.equals(this.trialNames, germplasmSearchRequest.trialNames);
    }

    @Override
    public int hashCode() {
        return Objects.hash(accessionNumbers, binomialNames, collections, commonCropNames, externalReferenceIDs, externalReferenceIds, externalReferenceSources, familyCodes, genus, germplasmDbIds, germplasmNames, germplasmPUIs, instituteCodes, page, pageSize, parentDbIds, progenyDbIds, programDbIds, programNames, species, studyDbIds, studyNames, synonyms, trialDbIds, trialNames);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GermplasmSearchRequest {\n");

        sb.append("    accessionNumbers: ").append(toIndentedString(accessionNumbers)).append("\n");
        sb.append("    binomialNames: ").append(toIndentedString(binomialNames)).append("\n");
        sb.append("    collections: ").append(toIndentedString(collections)).append("\n");
        sb.append("    commonCropNames: ").append(toIndentedString(commonCropNames)).append("\n");
        sb.append("    externalReferenceIDs: ").append(toIndentedString(externalReferenceIDs)).append("\n");
        sb.append("    externalReferenceIds: ").append(toIndentedString(externalReferenceIds)).append("\n");
        sb.append("    externalReferenceSources: ").append(toIndentedString(externalReferenceSources)).append("\n");
        sb.append("    familyCodes: ").append(toIndentedString(familyCodes)).append("\n");
        sb.append("    genus: ").append(toIndentedString(genus)).append("\n");
        sb.append("    germplasmDbIds: ").append(toIndentedString(germplasmDbIds)).append("\n");
        sb.append("    germplasmNames: ").append(toIndentedString(germplasmNames)).append("\n");
        sb.append("    germplasmPUIs: ").append(toIndentedString(germplasmPUIs)).append("\n");
        sb.append("    instituteCodes: ").append(toIndentedString(instituteCodes)).append("\n");
        sb.append("    page: ").append(toIndentedString(page)).append("\n");
        sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
        sb.append("    parentDbIds: ").append(toIndentedString(parentDbIds)).append("\n");
        sb.append("    progenyDbIds: ").append(toIndentedString(progenyDbIds)).append("\n");
        sb.append("    programDbIds: ").append(toIndentedString(programDbIds)).append("\n");
        sb.append("    programNames: ").append(toIndentedString(programNames)).append("\n");
        sb.append("    species: ").append(toIndentedString(species)).append("\n");
        sb.append("    studyDbIds: ").append(toIndentedString(studyDbIds)).append("\n");
        sb.append("    studyNames: ").append(toIndentedString(studyNames)).append("\n");
        sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
        sb.append("    trialDbIds: ").append(toIndentedString(trialDbIds)).append("\n");
        sb.append("    trialNames: ").append(toIndentedString(trialNames)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

/*
 * BrAPI-Phenotyping
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/RESTfulness\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Response_Structure\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Dates_and_Times\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Location_Coordinates\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Error_Handling\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Search_Services\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.model.v21.phenotype;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.util.*;

/**
 * Event
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-25T17:44:48.481Z[GMT]")
public class Event {
    @SerializedName("additionalInfo")
    private Map<String, String> additionalInfo = null;

    @SerializedName("date")
    private List<OffsetDateTime> date = null;

    @SerializedName("eventDateRange")
    private EventEventDateRange eventDateRange = null;

    @SerializedName("eventDbId")
    private String eventDbId = null;

    @SerializedName("eventDescription")
    private String eventDescription = null;

    @SerializedName("eventParameters")
    private List<EventEventParameters> eventParameters = null;

    @SerializedName("eventType")
    private String eventType = null;

    @SerializedName("eventTypeDbId")
    private String eventTypeDbId = null;

    @SerializedName("observationUnitDbIds")
    private List<String> observationUnitDbIds = null;

    @SerializedName("studyDbId")
    private String studyDbId = null;

    @SerializedName("studyName")
    private String studyName = null;

    public Event additionalInfo(Map<String, String> additionalInfo) {
        this.additionalInfo = additionalInfo;
        return this;
    }

    public Event putAdditionalInfoItem(String key, String additionalInfoItem) {
        if (this.additionalInfo == null) {
            this.additionalInfo = new HashMap<String, String>();
        }
        this.additionalInfo.put(key, additionalInfoItem);
        return this;
    }

    /**
     * A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.
     *
     * @return additionalInfo
     **/
    @Schema(description = "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.")
    public Map<String, String> getAdditionalInfo() {
        return additionalInfo;
    }

    public void setAdditionalInfo(Map<String, String> additionalInfo) {
        this.additionalInfo = additionalInfo;
    }

    public Event date(List<OffsetDateTime> date) {
        this.date = date;
        return this;
    }

    public Event addDateItem(OffsetDateTime dateItem) {
        if (this.date == null) {
            this.date = new ArrayList<OffsetDateTime>();
        }
        this.date.add(dateItem);
        return this;
    }

    /**
     * **Deprecated in v2.1** Please use &#x60;eventDateRange.discreteDates&#x60;. Github issue number #440              &lt;br&gt;A list of dates when the event occurred &lt;br&gt;MIAPPE V1.1 (DM-68) Event date - Date and time of the event.
     *
     * @return date
     **/
    @Schema(example = "[\"2018-10-08T18:15:11Z\",\"2018-11-09T18:16:12Z\"]", description = "**Deprecated in v2.1** Please use `eventDateRange.discreteDates`. Github issue number #440              <br>A list of dates when the event occurred <br>MIAPPE V1.1 (DM-68) Event date - Date and time of the event.")
    public List<OffsetDateTime> getDate() {
        return date;
    }

    public void setDate(List<OffsetDateTime> date) {
        this.date = date;
    }

    public Event eventDateRange(EventEventDateRange eventDateRange) {
        this.eventDateRange = eventDateRange;
        return this;
    }

    /**
     * Get eventDateRange
     *
     * @return eventDateRange
     **/
    @Schema(description = "")
    public EventEventDateRange getEventDateRange() {
        return eventDateRange;
    }

    public void setEventDateRange(EventEventDateRange eventDateRange) {
        this.eventDateRange = eventDateRange;
    }

    public Event eventDbId(String eventDbId) {
        this.eventDbId = eventDbId;
        return this;
    }

    /**
     * Internal database identifier
     *
     * @return eventDbId
     **/
    @Schema(example = "8566d4cb", required = true, description = "Internal database identifier")
    public String getEventDbId() {
        return eventDbId;
    }

    public void setEventDbId(String eventDbId) {
        this.eventDbId = eventDbId;
    }

    public Event eventDescription(String eventDescription) {
        this.eventDescription = eventDescription;
        return this;
    }

    /**
     * A detailed, human-readable description of this event &lt;br/&gt;MIAPPE V1.1 (DM-67) Event description - Description of the event, including details such as amount applied and possibly duration of the event.
     *
     * @return eventDescription
     **/
    @Schema(example = "A set of plots was watered", description = "A detailed, human-readable description of this event <br/>MIAPPE V1.1 (DM-67) Event description - Description of the event, including details such as amount applied and possibly duration of the event. ")
    public String getEventDescription() {
        return eventDescription;
    }

    public void setEventDescription(String eventDescription) {
        this.eventDescription = eventDescription;
    }

    public Event eventParameters(List<EventEventParameters> eventParameters) {
        this.eventParameters = eventParameters;
        return this;
    }

    public Event addEventParametersItem(EventEventParameters eventParametersItem) {
        if (this.eventParameters == null) {
            this.eventParameters = new ArrayList<EventEventParameters>();
        }
        this.eventParameters.add(eventParametersItem);
        return this;
    }

    /**
     * A list of objects describing additional event parameters. Each of the following accepts a human-readable value or URI
     *
     * @return eventParameters
     **/
    @Schema(example = "[{\"code\":\"tiimp\",\"description\":\"Implement or tool used for tillage\",\"name\":\"tillage_implement\",\"unit\":\"code\",\"value\":\"TI001\",\"valueDescription\":\"Standard V-Ripper (TI001)\"},{\"code\":\"tidep\",\"description\":\"Tillage operations depth in centimeters\",\"name\":\"tillage_operations_depth\",\"unit\":\"cm\",\"valuesByDate\":[\"20\",\"50\",\"40\"]},{\"code\":\"timix\",\"description\":\"Tillage operations mixing effectiveness\",\"name\":\"till_mix_effectiveness\",\"unit\":\"percent\",\"value\":\"50\"}]", description = "A list of objects describing additional event parameters. Each of the following accepts a human-readable value or URI")
    public List<EventEventParameters> getEventParameters() {
        return eventParameters;
    }

    public void setEventParameters(List<EventEventParameters> eventParameters) {
        this.eventParameters = eventParameters;
    }

    public Event eventType(String eventType) {
        this.eventType = eventType;
        return this;
    }

    /**
     * General category for this event (e.g. fertilizer, irrigation, tillage). Each eventType should correspond to exactly one eventTypeDbId, if provided. &lt;br/&gt;ICASA Management events allow for the following types: planting, fertilizer, irrigation, tillage, organic_material, harvest, bed_prep, inorg_mulch, inorg_mul_rem, chemicals, mowing, observation, weeding, puddling, flood_level, other &lt;br/&gt;MIAPPE V1.1 (DM-65) Event type - Short name of the event.
     *
     * @return eventType
     **/
    @Schema(example = "tillage", required = true, description = "General category for this event (e.g. fertilizer, irrigation, tillage). Each eventType should correspond to exactly one eventTypeDbId, if provided. <br/>ICASA Management events allow for the following types: planting, fertilizer, irrigation, tillage, organic_material, harvest, bed_prep, inorg_mulch, inorg_mul_rem, chemicals, mowing, observation, weeding, puddling, flood_level, other <br/>MIAPPE V1.1 (DM-65) Event type - Short name of the event.")
    public String getEventType() {
        return eventType;
    }

    public void setEventType(String eventType) {
        this.eventType = eventType;
    }

    public Event eventTypeDbId(String eventTypeDbId) {
        this.eventTypeDbId = eventTypeDbId;
        return this;
    }

    /**
     * An identifier for this event type, in the form of an ontology class reference &lt;br/&gt;ICASA Management events allow for the following types: planting, fertilizer, irrigation, tillage, organic_material, harvest, bed_prep, inorg_mulch, inorg_mul_rem, chemicals, mowing, observation, weeding, puddling, flood_level, other &lt;br/&gt;MIAPPE V1.1 (DM-66) Event accession number - Accession number of the event type in a suitable controlled vocabulary (Crop Ontology).
     *
     * @return eventTypeDbId
     **/
    @Schema(example = "4e7d691e", description = "An identifier for this event type, in the form of an ontology class reference <br/>ICASA Management events allow for the following types: planting, fertilizer, irrigation, tillage, organic_material, harvest, bed_prep, inorg_mulch, inorg_mul_rem, chemicals, mowing, observation, weeding, puddling, flood_level, other <br/>MIAPPE V1.1 (DM-66) Event accession number - Accession number of the event type in a suitable controlled vocabulary (Crop Ontology).")
    public String getEventTypeDbId() {
        return eventTypeDbId;
    }

    public void setEventTypeDbId(String eventTypeDbId) {
        this.eventTypeDbId = eventTypeDbId;
    }

    public Event observationUnitDbIds(List<String> observationUnitDbIds) {
        this.observationUnitDbIds = observationUnitDbIds;
        return this;
    }

    public Event addObservationUnitDbIdsItem(String observationUnitDbIdsItem) {
        if (this.observationUnitDbIds == null) {
            this.observationUnitDbIds = new ArrayList<String>();
        }
        this.observationUnitDbIds.add(observationUnitDbIdsItem);
        return this;
    }

    /**
     * A list of the affected observation units. If this parameter is not given, it is understood that the event affected all units in the study
     *
     * @return observationUnitDbIds
     **/
    @Schema(example = "[\"8439eaff\",\"d7682e7a\",\"305ae51c\"]", description = "A list of the affected observation units. If this parameter is not given, it is understood that the event affected all units in the study")
    public List<String> getObservationUnitDbIds() {
        return observationUnitDbIds;
    }

    public void setObservationUnitDbIds(List<String> observationUnitDbIds) {
        this.observationUnitDbIds = observationUnitDbIds;
    }

    public Event studyDbId(String studyDbId) {
        this.studyDbId = studyDbId;
        return this;
    }

    /**
     * The study in which the event occurred
     *
     * @return studyDbId
     **/
    @Schema(example = "2cc2001f", description = "The study in which the event occurred")
    public String getStudyDbId() {
        return studyDbId;
    }

    public void setStudyDbId(String studyDbId) {
        this.studyDbId = studyDbId;
    }

    public Event studyName(String studyName) {
        this.studyName = studyName;
        return this;
    }

    /**
     * The human readable name of a study
     *
     * @return studyName
     **/
    @Schema(example = "2cc2001f", description = "The human readable name of a study")
    public String getStudyName() {
        return studyName;
    }

    public void setStudyName(String studyName) {
        this.studyName = studyName;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Event event = (Event) o;
        return Objects.equals(this.additionalInfo, event.additionalInfo) &&
                Objects.equals(this.date, event.date) &&
                Objects.equals(this.eventDateRange, event.eventDateRange) &&
                Objects.equals(this.eventDbId, event.eventDbId) &&
                Objects.equals(this.eventDescription, event.eventDescription) &&
                Objects.equals(this.eventParameters, event.eventParameters) &&
                Objects.equals(this.eventType, event.eventType) &&
                Objects.equals(this.eventTypeDbId, event.eventTypeDbId) &&
                Objects.equals(this.observationUnitDbIds, event.observationUnitDbIds) &&
                Objects.equals(this.studyDbId, event.studyDbId) &&
                Objects.equals(this.studyName, event.studyName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(additionalInfo, date, eventDateRange, eventDbId, eventDescription, eventParameters, eventType, eventTypeDbId, observationUnitDbIds, studyDbId, studyName);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Event {\n");

        sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
        sb.append("    date: ").append(toIndentedString(date)).append("\n");
        sb.append("    eventDateRange: ").append(toIndentedString(eventDateRange)).append("\n");
        sb.append("    eventDbId: ").append(toIndentedString(eventDbId)).append("\n");
        sb.append("    eventDescription: ").append(toIndentedString(eventDescription)).append("\n");
        sb.append("    eventParameters: ").append(toIndentedString(eventParameters)).append("\n");
        sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
        sb.append("    eventTypeDbId: ").append(toIndentedString(eventTypeDbId)).append("\n");
        sb.append("    observationUnitDbIds: ").append(toIndentedString(observationUnitDbIds)).append("\n");
        sb.append("    studyDbId: ").append(toIndentedString(studyDbId)).append("\n");
        sb.append("    studyName: ").append(toIndentedString(studyName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

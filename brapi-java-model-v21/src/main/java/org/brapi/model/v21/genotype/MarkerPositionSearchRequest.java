/*
 * BrAPI-Genotyping
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/RESTfulness\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Response_Structure\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Dates_and_Times\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Location_Coordinates\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Error_Handling\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Search_Services\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.model.v21.genotype;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * MarkerPositionSearchRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-25T14:54:00.515Z[GMT]")
public class MarkerPositionSearchRequest {
    @SerializedName("linkageGroupNames")
    private List<String> linkageGroupNames = null;

    @SerializedName("mapDbIds")
    private List<String> mapDbIds = null;

    @SerializedName("maxPosition")
    private Integer maxPosition = null;

    @SerializedName("minPosition")
    private Integer minPosition = null;

    @SerializedName("page")
    private Integer page = null;

    @SerializedName("pageSize")
    private Integer pageSize = null;

    @SerializedName("variantDbIds")
    private List<String> variantDbIds = null;

    public MarkerPositionSearchRequest linkageGroupNames(List<String> linkageGroupNames) {
        this.linkageGroupNames = linkageGroupNames;
        return this;
    }

    public MarkerPositionSearchRequest addLinkageGroupNamesItem(String linkageGroupNamesItem) {
        if (this.linkageGroupNames == null) {
            this.linkageGroupNames = new ArrayList<String>();
        }
        this.linkageGroupNames.add(linkageGroupNamesItem);
        return this;
    }

    /**
     * A list of Uniquely Identifiable linkage group names
     *
     * @return linkageGroupNames
     **/
    @Schema(example = "[\"Chromosome 2\",\"Chromosome 3\"]", description = "A list of Uniquely Identifiable linkage group names")
    public List<String> getLinkageGroupNames() {
        return linkageGroupNames;
    }

    public void setLinkageGroupNames(List<String> linkageGroupNames) {
        this.linkageGroupNames = linkageGroupNames;
    }

    public MarkerPositionSearchRequest mapDbIds(List<String> mapDbIds) {
        this.mapDbIds = mapDbIds;
        return this;
    }

    public MarkerPositionSearchRequest addMapDbIdsItem(String mapDbIdsItem) {
        if (this.mapDbIds == null) {
            this.mapDbIds = new ArrayList<String>();
        }
        this.mapDbIds.add(mapDbIdsItem);
        return this;
    }

    /**
     * A list of IDs which uniquely identify &#x60;GenomeMaps&#x60; within the given database server
     *
     * @return mapDbIds
     **/
    @Schema(example = "[\"7e6fa8aa\",\"bedc418c\"]", description = "A list of IDs which uniquely identify `GenomeMaps` within the given database server")
    public List<String> getMapDbIds() {
        return mapDbIds;
    }

    public void setMapDbIds(List<String> mapDbIds) {
        this.mapDbIds = mapDbIds;
    }

    public MarkerPositionSearchRequest maxPosition(Integer maxPosition) {
        this.maxPosition = maxPosition;
        return this;
    }

    /**
     * The maximum position of markers in a given map
     *
     * @return maxPosition
     **/
    @Schema(example = "4000", description = "The maximum position of markers in a given map")
    public Integer getMaxPosition() {
        return maxPosition;
    }

    public void setMaxPosition(Integer maxPosition) {
        this.maxPosition = maxPosition;
    }

    public MarkerPositionSearchRequest minPosition(Integer minPosition) {
        this.minPosition = minPosition;
        return this;
    }

    /**
     * The minimum position of markers in a given map
     *
     * @return minPosition
     **/
    @Schema(example = "250", description = "The minimum position of markers in a given map")
    public Integer getMinPosition() {
        return minPosition;
    }

    public void setMinPosition(Integer minPosition) {
        this.minPosition = minPosition;
    }

    public MarkerPositionSearchRequest page(Integer page) {
        this.page = page;
        return this;
    }

    /**
     * Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;.
     *
     * @return page
     **/
    @Schema(example = "0", description = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.")
    public Integer getPage() {
        return page;
    }

    public void setPage(Integer page) {
        this.page = page;
    }

    public MarkerPositionSearchRequest pageSize(Integer pageSize) {
        this.pageSize = pageSize;
        return this;
    }

    /**
     * The size of the pages to be returned. Default is &#x60;1000&#x60;.
     *
     * @return pageSize
     **/
    @Schema(example = "1000", description = "The size of the pages to be returned. Default is `1000`.")
    public Integer getPageSize() {
        return pageSize;
    }

    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }

    public MarkerPositionSearchRequest variantDbIds(List<String> variantDbIds) {
        this.variantDbIds = variantDbIds;
        return this;
    }

    public MarkerPositionSearchRequest addVariantDbIdsItem(String variantDbIdsItem) {
        if (this.variantDbIds == null) {
            this.variantDbIds = new ArrayList<String>();
        }
        this.variantDbIds.add(variantDbIdsItem);
        return this;
    }

    /**
     * A list of IDs which uniquely identify &#x60;Variants&#x60; within the given database server
     *
     * @return variantDbIds
     **/
    @Schema(example = "[\"a0caa928\",\"f8894a26\"]", description = "A list of IDs which uniquely identify `Variants` within the given database server")
    public List<String> getVariantDbIds() {
        return variantDbIds;
    }

    public void setVariantDbIds(List<String> variantDbIds) {
        this.variantDbIds = variantDbIds;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MarkerPositionSearchRequest markerPositionSearchRequest = (MarkerPositionSearchRequest) o;
        return Objects.equals(this.linkageGroupNames, markerPositionSearchRequest.linkageGroupNames) &&
                Objects.equals(this.mapDbIds, markerPositionSearchRequest.mapDbIds) &&
                Objects.equals(this.maxPosition, markerPositionSearchRequest.maxPosition) &&
                Objects.equals(this.minPosition, markerPositionSearchRequest.minPosition) &&
                Objects.equals(this.page, markerPositionSearchRequest.page) &&
                Objects.equals(this.pageSize, markerPositionSearchRequest.pageSize) &&
                Objects.equals(this.variantDbIds, markerPositionSearchRequest.variantDbIds);
    }

    @Override
    public int hashCode() {
        return Objects.hash(linkageGroupNames, mapDbIds, maxPosition, minPosition, page, pageSize, variantDbIds);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MarkerPositionSearchRequest {\n");

        sb.append("    linkageGroupNames: ").append(toIndentedString(linkageGroupNames)).append("\n");
        sb.append("    mapDbIds: ").append(toIndentedString(mapDbIds)).append("\n");
        sb.append("    maxPosition: ").append(toIndentedString(maxPosition)).append("\n");
        sb.append("    minPosition: ").append(toIndentedString(minPosition)).append("\n");
        sb.append("    page: ").append(toIndentedString(page)).append("\n");
        sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
        sb.append("    variantDbIds: ").append(toIndentedString(variantDbIds)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

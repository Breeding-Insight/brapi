/*
 * BrAPI-Germplasm
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/RESTfulness\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Response_Structure\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Dates_and_Times\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Location_Coordinates\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Error_Handling\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Search_Services\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.model.v21.germplasm;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.*;

/**
 * CrossingProjectNewRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-25T17:45:22.672Z[GMT]")
public class CrossingProjectNewRequest {
    @SerializedName("additionalInfo")
    private Map<String, String> additionalInfo = null;

    @SerializedName("commonCropName")
    private String commonCropName = null;

    @SerializedName("crossingProjectDescription")
    private String crossingProjectDescription = null;

    @SerializedName("crossingProjectName")
    private String crossingProjectName = null;

    @SerializedName("externalReferences")
    private List<CrossExternalReferences> externalReferences = null;

    @SerializedName("potentialParents")
    private List<CrossParent1> potentialParents = null;

    @SerializedName("programDbId")
    private String programDbId = null;

    @SerializedName("programName")
    private String programName = null;

    public CrossingProjectNewRequest additionalInfo(Map<String, String> additionalInfo) {
        this.additionalInfo = additionalInfo;
        return this;
    }

    public CrossingProjectNewRequest putAdditionalInfoItem(String key, String additionalInfoItem) {
        if (this.additionalInfo == null) {
            this.additionalInfo = new HashMap<String, String>();
        }
        this.additionalInfo.put(key, additionalInfoItem);
        return this;
    }

    /**
     * A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.
     *
     * @return additionalInfo
     **/
    @Schema(description = "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.")
    public Map<String, String> getAdditionalInfo() {
        return additionalInfo;
    }

    public void setAdditionalInfo(Map<String, String> additionalInfo) {
        this.additionalInfo = additionalInfo;
    }

    public CrossingProjectNewRequest commonCropName(String commonCropName) {
        this.commonCropName = commonCropName;
        return this;
    }

    /**
     * the common name of a crop (for multi-crop systems)
     *
     * @return commonCropName
     **/
    @Schema(example = "Cassava", description = "the common name of a crop (for multi-crop systems)")
    public String getCommonCropName() {
        return commonCropName;
    }

    public void setCommonCropName(String commonCropName) {
        this.commonCropName = commonCropName;
    }

    public CrossingProjectNewRequest crossingProjectDescription(String crossingProjectDescription) {
        this.crossingProjectDescription = crossingProjectDescription;
        return this;
    }

    /**
     * the description for a crossing project
     *
     * @return crossingProjectDescription
     **/
    @Schema(example = "Crosses between germplasm X and germplasm Y in male nursery study X_2018 and female nursery study Y_2018", description = "the description for a crossing project")
    public String getCrossingProjectDescription() {
        return crossingProjectDescription;
    }

    public void setCrossingProjectDescription(String crossingProjectDescription) {
        this.crossingProjectDescription = crossingProjectDescription;
    }

    public CrossingProjectNewRequest crossingProjectName(String crossingProjectName) {
        this.crossingProjectName = crossingProjectName;
        return this;
    }

    /**
     * The human readable name for a crossing project
     *
     * @return crossingProjectName
     **/
    @Schema(example = "Crosses_2018", description = "The human readable name for a crossing project")
    public String getCrossingProjectName() {
        return crossingProjectName;
    }

    public void setCrossingProjectName(String crossingProjectName) {
        this.crossingProjectName = crossingProjectName;
    }

    public CrossingProjectNewRequest externalReferences(List<CrossExternalReferences> externalReferences) {
        this.externalReferences = externalReferences;
        return this;
    }

    public CrossingProjectNewRequest addExternalReferencesItem(CrossExternalReferences externalReferencesItem) {
        if (this.externalReferences == null) {
            this.externalReferences = new ArrayList<CrossExternalReferences>();
        }
        this.externalReferences.add(externalReferencesItem);
        return this;
    }

    /**
     * An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
     *
     * @return externalReferences
     **/
    @Schema(example = "[{\"referenceId\":\"doi:10.155454/12341234\",\"referenceSource\":\"DOI\"},{\"referenceId\":\"75a50e76\",\"referenceSource\":\"Remote Data Collection Upload Tool\"}]", description = "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.")
    public List<CrossExternalReferences> getExternalReferences() {
        return externalReferences;
    }

    public void setExternalReferences(List<CrossExternalReferences> externalReferences) {
        this.externalReferences = externalReferences;
    }

    public CrossingProjectNewRequest potentialParents(List<CrossParent1> potentialParents) {
        this.potentialParents = potentialParents;
        return this;
    }

    public CrossingProjectNewRequest addPotentialParentsItem(CrossParent1 potentialParentsItem) {
        if (this.potentialParents == null) {
            this.potentialParents = new ArrayList<CrossParent1>();
        }
        this.potentialParents.add(potentialParentsItem);
        return this;
    }

    /**
     * A list of all the potential parents in the crossing block, available in the crossing project &lt;br/&gt; If the parameter &#x27;includePotentialParents&#x27; is false, the array &#x27;potentialParents&#x27; should be empty, null, or excluded from the response object.
     *
     * @return potentialParents
     **/
    @Schema(description = "A list of all the potential parents in the crossing block, available in the crossing project <br/> If the parameter 'includePotentialParents' is false, the array 'potentialParents' should be empty, null, or excluded from the response object.")
    public List<CrossParent1> getPotentialParents() {
        return potentialParents;
    }

    public void setPotentialParents(List<CrossParent1> potentialParents) {
        this.potentialParents = potentialParents;
    }

    public CrossingProjectNewRequest programDbId(String programDbId) {
        this.programDbId = programDbId;
        return this;
    }

    /**
     * the unique identifier for a program
     *
     * @return programDbId
     **/
    @Schema(example = "a088176c", description = "the unique identifier for a program")
    public String getProgramDbId() {
        return programDbId;
    }

    public void setProgramDbId(String programDbId) {
        this.programDbId = programDbId;
    }

    public CrossingProjectNewRequest programName(String programName) {
        this.programName = programName;
        return this;
    }

    /**
     * the human readable name for a program
     *
     * @return programName
     **/
    @Schema(example = "IITA Cassava", description = "the human readable name for a program")
    public String getProgramName() {
        return programName;
    }

    public void setProgramName(String programName) {
        this.programName = programName;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CrossingProjectNewRequest crossingProjectNewRequest = (CrossingProjectNewRequest) o;
        return Objects.equals(this.additionalInfo, crossingProjectNewRequest.additionalInfo) &&
                Objects.equals(this.commonCropName, crossingProjectNewRequest.commonCropName) &&
                Objects.equals(this.crossingProjectDescription, crossingProjectNewRequest.crossingProjectDescription) &&
                Objects.equals(this.crossingProjectName, crossingProjectNewRequest.crossingProjectName) &&
                Objects.equals(this.externalReferences, crossingProjectNewRequest.externalReferences) &&
                Objects.equals(this.potentialParents, crossingProjectNewRequest.potentialParents) &&
                Objects.equals(this.programDbId, crossingProjectNewRequest.programDbId) &&
                Objects.equals(this.programName, crossingProjectNewRequest.programName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(additionalInfo, commonCropName, crossingProjectDescription, crossingProjectName, externalReferences, potentialParents, programDbId, programName);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CrossingProjectNewRequest {\n");

        sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
        sb.append("    commonCropName: ").append(toIndentedString(commonCropName)).append("\n");
        sb.append("    crossingProjectDescription: ").append(toIndentedString(crossingProjectDescription)).append("\n");
        sb.append("    crossingProjectName: ").append(toIndentedString(crossingProjectName)).append("\n");
        sb.append("    externalReferences: ").append(toIndentedString(externalReferences)).append("\n");
        sb.append("    potentialParents: ").append(toIndentedString(potentialParents)).append("\n");
        sb.append("    programDbId: ").append(toIndentedString(programDbId)).append("\n");
        sb.append("    programName: ").append(toIndentedString(programName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

/*
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AlleleMatrixDetailsResponse;
import io.swagger.client.model.AlleleMatrixSearchRequest;
import io.swagger.client.model.AlleleMatrixValuesResponse;
import io.swagger.client.model.AlleleMatrixValuesResponse1;
import io.swagger.client.model.MarkerProfileDescriptionsResponse;
import io.swagger.client.model.MarkerProfilesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MarkerProfilesApi {
    private ApiClient apiClient;

    public MarkerProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarkerProfilesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for allelematricesGet
     * @param studyDbId restricts the list of matrices to a specific study. (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allelematricesGetCall(String studyDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/allelematrices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (studyDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("studyDbId", studyDbId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allelematricesGetValidateBeforeCall(String studyDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'studyDbId' is set
        if (studyDbId == null) {
            throw new ApiException("Missing the required parameter 'studyDbId' when calling allelematricesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = allelematricesGetCall(studyDbId, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Allele Matrix summaries
     * This resource is used for reading and writing genomic matrices  GET provides a list of available matrices, optionally filtered by study;
     * @param studyDbId restricts the list of matrices to a specific study. (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return AlleleMatrixDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlleleMatrixDetailsResponse allelematricesGet(String studyDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<AlleleMatrixDetailsResponse> resp = allelematricesGetWithHttpInfo(studyDbId, page, pageSize);
        return resp.getData();
    }

    /**
     * Get the Allele Matrix summaries
     * This resource is used for reading and writing genomic matrices  GET provides a list of available matrices, optionally filtered by study;
     * @param studyDbId restricts the list of matrices to a specific study. (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;AlleleMatrixDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlleleMatrixDetailsResponse> allelematricesGetWithHttpInfo(String studyDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = allelematricesGetValidateBeforeCall(studyDbId, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<AlleleMatrixDetailsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Allele Matrix summaries (asynchronously)
     * This resource is used for reading and writing genomic matrices  GET provides a list of available matrices, optionally filtered by study;
     * @param studyDbId restricts the list of matrices to a specific study. (required)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allelematricesGetAsync(String studyDbId, Integer page, Integer pageSize, String authorization, final ApiCallback<AlleleMatrixDetailsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allelematricesGetValidateBeforeCall(studyDbId, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlleleMatrixDetailsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for allelematricesSearchGet
     * @param markerprofileDbId DEPRECATED in v1.3 - see \&quot;markerProfileDbId\&quot; (camel case) (optional)
     * @param markerProfileDbId The marker Profile db ids. Not Required if &#x27;markerDbId&#x27; or &#x27;matrixDbId&#x27; is present. (optional)
     * @param markerDbId ids of the markers. if none are specified, results are returned for all markers in the database. Not Required if &#x27;markerProfileDbId&#x27; or &#x27;matrixDbId&#x27; is present. (optional)
     * @param matrixDbId  (optional)
     * @param format format for the datafile to be downloaded. tsv and csv currently supported; flapjack may be supported. (optional)
     * @param expandHomozygotes Should homozygotes NOT be collapsed into a single occurrence? (optional)
     * @param unknownString The string to use as a representation for missing data or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepPhased The string to use as a separator for phased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepUnphased The string to use as a separator for unphased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allelematricesSearchGetCall(List<String> markerprofileDbId, List<String> markerProfileDbId, List<String> markerDbId, List<String> matrixDbId, String format, Boolean expandHomozygotes, String unknownString, String sepPhased, String sepUnphased, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/allelematrices-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (markerprofileDbId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "markerprofileDbId", markerprofileDbId));
        if (markerProfileDbId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "markerProfileDbId", markerProfileDbId));
        if (markerDbId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "markerDbId", markerDbId));
        if (matrixDbId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "matrixDbId", matrixDbId));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));
        if (expandHomozygotes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expandHomozygotes", expandHomozygotes));
        if (unknownString != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("unknownString", unknownString));
        if (sepPhased != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sepPhased", sepPhased));
        if (sepUnphased != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sepUnphased", sepUnphased));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allelematricesSearchGetValidateBeforeCall(List<String> markerprofileDbId, List<String> markerProfileDbId, List<String> markerDbId, List<String> matrixDbId, String format, Boolean expandHomozygotes, String unknownString, String sepPhased, String sepUnphased, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = allelematricesSearchGetCall(markerprofileDbId, markerProfileDbId, markerDbId, matrixDbId, format, expandHomozygotes, unknownString, sepPhased, sepUnphased, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the a Matrix of Allele data
     * See Search Services for additional implementation details.  This uses a more efficient data structure and pagination for large number of markers.  See Search Services for additional implementation details.  Use GET when parameter size is less than 2K bytes.  This method may support asynchronous processing.
     * @param markerprofileDbId DEPRECATED in v1.3 - see \&quot;markerProfileDbId\&quot; (camel case) (optional)
     * @param markerProfileDbId The marker Profile db ids. Not Required if &#x27;markerDbId&#x27; or &#x27;matrixDbId&#x27; is present. (optional)
     * @param markerDbId ids of the markers. if none are specified, results are returned for all markers in the database. Not Required if &#x27;markerProfileDbId&#x27; or &#x27;matrixDbId&#x27; is present. (optional)
     * @param matrixDbId  (optional)
     * @param format format for the datafile to be downloaded. tsv and csv currently supported; flapjack may be supported. (optional)
     * @param expandHomozygotes Should homozygotes NOT be collapsed into a single occurrence? (optional)
     * @param unknownString The string to use as a representation for missing data or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepPhased The string to use as a separator for phased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepUnphased The string to use as a separator for unphased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return AlleleMatrixValuesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlleleMatrixValuesResponse allelematricesSearchGet(List<String> markerprofileDbId, List<String> markerProfileDbId, List<String> markerDbId, List<String> matrixDbId, String format, Boolean expandHomozygotes, String unknownString, String sepPhased, String sepUnphased, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<AlleleMatrixValuesResponse> resp = allelematricesSearchGetWithHttpInfo(markerprofileDbId, markerProfileDbId, markerDbId, matrixDbId, format, expandHomozygotes, unknownString, sepPhased, sepUnphased, page, pageSize);
        return resp.getData();
    }

    /**
     * Get the a Matrix of Allele data
     * See Search Services for additional implementation details.  This uses a more efficient data structure and pagination for large number of markers.  See Search Services for additional implementation details.  Use GET when parameter size is less than 2K bytes.  This method may support asynchronous processing.
     * @param markerprofileDbId DEPRECATED in v1.3 - see \&quot;markerProfileDbId\&quot; (camel case) (optional)
     * @param markerProfileDbId The marker Profile db ids. Not Required if &#x27;markerDbId&#x27; or &#x27;matrixDbId&#x27; is present. (optional)
     * @param markerDbId ids of the markers. if none are specified, results are returned for all markers in the database. Not Required if &#x27;markerProfileDbId&#x27; or &#x27;matrixDbId&#x27; is present. (optional)
     * @param matrixDbId  (optional)
     * @param format format for the datafile to be downloaded. tsv and csv currently supported; flapjack may be supported. (optional)
     * @param expandHomozygotes Should homozygotes NOT be collapsed into a single occurrence? (optional)
     * @param unknownString The string to use as a representation for missing data or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepPhased The string to use as a separator for phased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepUnphased The string to use as a separator for unphased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;AlleleMatrixValuesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlleleMatrixValuesResponse> allelematricesSearchGetWithHttpInfo(List<String> markerprofileDbId, List<String> markerProfileDbId, List<String> markerDbId, List<String> matrixDbId, String format, Boolean expandHomozygotes, String unknownString, String sepPhased, String sepUnphased, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = allelematricesSearchGetValidateBeforeCall(markerprofileDbId, markerProfileDbId, markerDbId, matrixDbId, format, expandHomozygotes, unknownString, sepPhased, sepUnphased, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<AlleleMatrixValuesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the a Matrix of Allele data (asynchronously)
     * See Search Services for additional implementation details.  This uses a more efficient data structure and pagination for large number of markers.  See Search Services for additional implementation details.  Use GET when parameter size is less than 2K bytes.  This method may support asynchronous processing.
     * @param markerprofileDbId DEPRECATED in v1.3 - see \&quot;markerProfileDbId\&quot; (camel case) (optional)
     * @param markerProfileDbId The marker Profile db ids. Not Required if &#x27;markerDbId&#x27; or &#x27;matrixDbId&#x27; is present. (optional)
     * @param markerDbId ids of the markers. if none are specified, results are returned for all markers in the database. Not Required if &#x27;markerProfileDbId&#x27; or &#x27;matrixDbId&#x27; is present. (optional)
     * @param matrixDbId  (optional)
     * @param format format for the datafile to be downloaded. tsv and csv currently supported; flapjack may be supported. (optional)
     * @param expandHomozygotes Should homozygotes NOT be collapsed into a single occurrence? (optional)
     * @param unknownString The string to use as a representation for missing data or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepPhased The string to use as a separator for phased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepUnphased The string to use as a separator for unphased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allelematricesSearchGetAsync(List<String> markerprofileDbId, List<String> markerProfileDbId, List<String> markerDbId, List<String> matrixDbId, String format, Boolean expandHomozygotes, String unknownString, String sepPhased, String sepUnphased, Integer page, Integer pageSize, String authorization, final ApiCallback<AlleleMatrixValuesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allelematricesSearchGetValidateBeforeCall(markerprofileDbId, markerProfileDbId, markerDbId, matrixDbId, format, expandHomozygotes, unknownString, sepPhased, sepUnphased, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlleleMatrixValuesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for allelematricesSearchPost
     * @param body The marker profile db ids. Not Required if &#x27;markerDbId&#x27; or &#x27;matrixDbId&#x27; is present. (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allelematricesSearchPostCall(AlleleMatrixSearchRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/allelematrices-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/tsv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allelematricesSearchPostValidateBeforeCall(AlleleMatrixSearchRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling allelematricesSearchPost(Async)");
        }
        
        com.squareup.okhttp.Call call = allelematricesSearchPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Submit a request to get a Matrix of Allele data
     * See Search Services for additional implementation details.  This uses a more efficient data structure and pagination for large number of markers.  Use POST when parameter size is greater than 2K bytes.  - If no format is specified, this call returns the data in JSON form.  - If a format (other than JSON) is specified and the server supports this format, it will return the link to the exported data file in the \&quot;datafiles\&quot; field of the \&quot;metadata\&quot;.  - If more than one format is requested at a time, the server will throw a \&quot;501 Not Implemented\&quot; error.  The format of the tsv response can be found on GitHub (https://github.com/plantbreeding/Documentation/wiki/BrAPI-TSV-Expected-Formats)&#x27;
     * @param body The marker profile db ids. Not Required if &#x27;markerDbId&#x27; or &#x27;matrixDbId&#x27; is present. (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return AlleleMatrixValuesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlleleMatrixValuesResponse allelematricesSearchPost(AlleleMatrixSearchRequest body, String authorization) throws ApiException {
        ApiResponse<AlleleMatrixValuesResponse> resp = allelematricesSearchPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Submit a request to get a Matrix of Allele data
     * See Search Services for additional implementation details.  This uses a more efficient data structure and pagination for large number of markers.  Use POST when parameter size is greater than 2K bytes.  - If no format is specified, this call returns the data in JSON form.  - If a format (other than JSON) is specified and the server supports this format, it will return the link to the exported data file in the \&quot;datafiles\&quot; field of the \&quot;metadata\&quot;.  - If more than one format is requested at a time, the server will throw a \&quot;501 Not Implemented\&quot; error.  The format of the tsv response can be found on GitHub (https://github.com/plantbreeding/Documentation/wiki/BrAPI-TSV-Expected-Formats)&#x27;
     * @param body The marker profile db ids. Not Required if &#x27;markerDbId&#x27; or &#x27;matrixDbId&#x27; is present. (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;AlleleMatrixValuesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlleleMatrixValuesResponse> allelematricesSearchPostWithHttpInfo(AlleleMatrixSearchRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = allelematricesSearchPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<AlleleMatrixValuesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submit a request to get a Matrix of Allele data (asynchronously)
     * See Search Services for additional implementation details.  This uses a more efficient data structure and pagination for large number of markers.  Use POST when parameter size is greater than 2K bytes.  - If no format is specified, this call returns the data in JSON form.  - If a format (other than JSON) is specified and the server supports this format, it will return the link to the exported data file in the \&quot;datafiles\&quot; field of the \&quot;metadata\&quot;.  - If more than one format is requested at a time, the server will throw a \&quot;501 Not Implemented\&quot; error.  The format of the tsv response can be found on GitHub (https://github.com/plantbreeding/Documentation/wiki/BrAPI-TSV-Expected-Formats)&#x27;
     * @param body The marker profile db ids. Not Required if &#x27;markerDbId&#x27; or &#x27;matrixDbId&#x27; is present. (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allelematricesSearchPostAsync(AlleleMatrixSearchRequest body, String authorization, final ApiCallback<AlleleMatrixValuesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allelematricesSearchPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlleleMatrixValuesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for allelematrixSearchGet
     * @param markerprofileDbId The marker profile db ids. Not Required if &#x27;markerDbId&#x27; or &#x27;matrixDbId&#x27; is present. (optional)
     * @param markerDbId ids of the markers. if none are specified, results are returned for all markers in the database. Not Required if &#x27;markerprofileDbId&#x27; or &#x27;matrixDbId&#x27; is present. (optional)
     * @param matrixDbId  (optional)
     * @param format format for the datafile to be downloaded. tsv and csv currently supported; flapjack may be supported. (optional)
     * @param expandHomozygotes Should homozygotes NOT be collapsed into a single occurrence? (optional)
     * @param unknownString The string to use as a representation for missing data or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepPhased The string to use as a separator for phased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepUnphased The string to use as a separator for unphased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allelematrixSearchGetCall(List<String> markerprofileDbId, List<String> markerDbId, List<String> matrixDbId, String format, Boolean expandHomozygotes, String unknownString, String sepPhased, String sepUnphased, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/allelematrix-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (markerprofileDbId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "markerprofileDbId", markerprofileDbId));
        if (markerDbId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "markerDbId", markerDbId));
        if (matrixDbId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "matrixDbId", matrixDbId));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));
        if (expandHomozygotes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expandHomozygotes", expandHomozygotes));
        if (unknownString != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("unknownString", unknownString));
        if (sepPhased != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sepPhased", sepPhased));
        if (sepUnphased != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sepUnphased", sepUnphased));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allelematrixSearchGetValidateBeforeCall(List<String> markerprofileDbId, List<String> markerDbId, List<String> matrixDbId, String format, Boolean expandHomozygotes, String unknownString, String sepPhased, String sepUnphased, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = allelematrixSearchGetCall(markerprofileDbId, markerDbId, matrixDbId, format, expandHomozygotes, unknownString, sepPhased, sepUnphased, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Scores through GET
     * Status: ACCEPTED.  Implemented by: Germinate (POST only), Cassavabase  Used by: Flapjack (POST only)  See Search Services for additional implementation details.  This uses a more efficient data structure and pagination for large number of markers.  See Search Services for additional implementation details.    This uses a more efficient data structure and pagination for large number of markers.     Use GET when parameter size is less than 2K bytes. This method may support asynchronous processing.
     * @param markerprofileDbId The marker profile db ids. Not Required if &#x27;markerDbId&#x27; or &#x27;matrixDbId&#x27; is present. (optional)
     * @param markerDbId ids of the markers. if none are specified, results are returned for all markers in the database. Not Required if &#x27;markerprofileDbId&#x27; or &#x27;matrixDbId&#x27; is present. (optional)
     * @param matrixDbId  (optional)
     * @param format format for the datafile to be downloaded. tsv and csv currently supported; flapjack may be supported. (optional)
     * @param expandHomozygotes Should homozygotes NOT be collapsed into a single occurrence? (optional)
     * @param unknownString The string to use as a representation for missing data or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepPhased The string to use as a separator for phased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepUnphased The string to use as a separator for unphased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @return AlleleMatrixValuesResponse1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlleleMatrixValuesResponse1 allelematrixSearchGet(List<String> markerprofileDbId, List<String> markerDbId, List<String> matrixDbId, String format, Boolean expandHomozygotes, String unknownString, String sepPhased, String sepUnphased, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<AlleleMatrixValuesResponse1> resp = allelematrixSearchGetWithHttpInfo(markerprofileDbId, markerDbId, matrixDbId, format, expandHomozygotes, unknownString, sepPhased, sepUnphased, page, pageSize);
        return resp.getData();
    }

    /**
     * Scores through GET
     * Status: ACCEPTED.  Implemented by: Germinate (POST only), Cassavabase  Used by: Flapjack (POST only)  See Search Services for additional implementation details.  This uses a more efficient data structure and pagination for large number of markers.  See Search Services for additional implementation details.    This uses a more efficient data structure and pagination for large number of markers.     Use GET when parameter size is less than 2K bytes. This method may support asynchronous processing.
     * @param markerprofileDbId The marker profile db ids. Not Required if &#x27;markerDbId&#x27; or &#x27;matrixDbId&#x27; is present. (optional)
     * @param markerDbId ids of the markers. if none are specified, results are returned for all markers in the database. Not Required if &#x27;markerprofileDbId&#x27; or &#x27;matrixDbId&#x27; is present. (optional)
     * @param matrixDbId  (optional)
     * @param format format for the datafile to be downloaded. tsv and csv currently supported; flapjack may be supported. (optional)
     * @param expandHomozygotes Should homozygotes NOT be collapsed into a single occurrence? (optional)
     * @param unknownString The string to use as a representation for missing data or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepPhased The string to use as a separator for phased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepUnphased The string to use as a separator for unphased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @return ApiResponse&lt;AlleleMatrixValuesResponse1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlleleMatrixValuesResponse1> allelematrixSearchGetWithHttpInfo(List<String> markerprofileDbId, List<String> markerDbId, List<String> matrixDbId, String format, Boolean expandHomozygotes, String unknownString, String sepPhased, String sepUnphased, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = allelematrixSearchGetValidateBeforeCall(markerprofileDbId, markerDbId, matrixDbId, format, expandHomozygotes, unknownString, sepPhased, sepUnphased, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<AlleleMatrixValuesResponse1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Scores through GET (asynchronously)
     * Status: ACCEPTED.  Implemented by: Germinate (POST only), Cassavabase  Used by: Flapjack (POST only)  See Search Services for additional implementation details.  This uses a more efficient data structure and pagination for large number of markers.  See Search Services for additional implementation details.    This uses a more efficient data structure and pagination for large number of markers.     Use GET when parameter size is less than 2K bytes. This method may support asynchronous processing.
     * @param markerprofileDbId The marker profile db ids. Not Required if &#x27;markerDbId&#x27; or &#x27;matrixDbId&#x27; is present. (optional)
     * @param markerDbId ids of the markers. if none are specified, results are returned for all markers in the database. Not Required if &#x27;markerprofileDbId&#x27; or &#x27;matrixDbId&#x27; is present. (optional)
     * @param matrixDbId  (optional)
     * @param format format for the datafile to be downloaded. tsv and csv currently supported; flapjack may be supported. (optional)
     * @param expandHomozygotes Should homozygotes NOT be collapsed into a single occurrence? (optional)
     * @param unknownString The string to use as a representation for missing data or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepPhased The string to use as a separator for phased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepUnphased The string to use as a separator for unphased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allelematrixSearchGetAsync(List<String> markerprofileDbId, List<String> markerDbId, List<String> matrixDbId, String format, Boolean expandHomozygotes, String unknownString, String sepPhased, String sepUnphased, Integer page, Integer pageSize, final ApiCallback<AlleleMatrixValuesResponse1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allelematrixSearchGetValidateBeforeCall(markerprofileDbId, markerDbId, matrixDbId, format, expandHomozygotes, unknownString, sepPhased, sepUnphased, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlleleMatrixValuesResponse1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for allelematrixSearchPost
     * @param body The markerprofile db ids. Not Required if &#x27;markerDbId&#x27; or &#x27;matrixDbId&#x27; is present. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allelematrixSearchPostCall(AlleleMatrixSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/allelematrix-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/tsv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allelematrixSearchPostValidateBeforeCall(AlleleMatrixSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling allelematrixSearchPost(Async)");
        }
        
        com.squareup.okhttp.Call call = allelematrixSearchPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Scores through POST
     * Status: ACCEPTED.  Implemented by: Germinate (POST only), Cassavabase  Used by: Flapjack (POST only)  See Search Services for additional implementation details.  This uses a more efficient data structure and pagination for large number of markers.  Use POST when parameter size is greater than 2K bytes.  - If no format is specified, this call returns the data in JSON form.  - If a format (other than JSON) is specified and the server supports this format, it will return the link to the exported data file in the \&quot;datafiles\&quot; field of the \&quot;metadata\&quot;.  - If more than one format is requested at a time, the server will throw a \&quot;501 Not Implemented\&quot; error.  The format of the tsv response can be found on GitHub (https://github.com/plantbreeding/Documentation/wiki/BrAPI-TSV-Expected-Formats)
     * @param body The markerprofile db ids. Not Required if &#x27;markerDbId&#x27; or &#x27;matrixDbId&#x27; is present. (required)
     * @return AlleleMatrixValuesResponse1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlleleMatrixValuesResponse1 allelematrixSearchPost(AlleleMatrixSearchRequest body) throws ApiException {
        ApiResponse<AlleleMatrixValuesResponse1> resp = allelematrixSearchPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Scores through POST
     * Status: ACCEPTED.  Implemented by: Germinate (POST only), Cassavabase  Used by: Flapjack (POST only)  See Search Services for additional implementation details.  This uses a more efficient data structure and pagination for large number of markers.  Use POST when parameter size is greater than 2K bytes.  - If no format is specified, this call returns the data in JSON form.  - If a format (other than JSON) is specified and the server supports this format, it will return the link to the exported data file in the \&quot;datafiles\&quot; field of the \&quot;metadata\&quot;.  - If more than one format is requested at a time, the server will throw a \&quot;501 Not Implemented\&quot; error.  The format of the tsv response can be found on GitHub (https://github.com/plantbreeding/Documentation/wiki/BrAPI-TSV-Expected-Formats)
     * @param body The markerprofile db ids. Not Required if &#x27;markerDbId&#x27; or &#x27;matrixDbId&#x27; is present. (required)
     * @return ApiResponse&lt;AlleleMatrixValuesResponse1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlleleMatrixValuesResponse1> allelematrixSearchPostWithHttpInfo(AlleleMatrixSearchRequest body) throws ApiException {
        com.squareup.okhttp.Call call = allelematrixSearchPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<AlleleMatrixValuesResponse1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Scores through POST (asynchronously)
     * Status: ACCEPTED.  Implemented by: Germinate (POST only), Cassavabase  Used by: Flapjack (POST only)  See Search Services for additional implementation details.  This uses a more efficient data structure and pagination for large number of markers.  Use POST when parameter size is greater than 2K bytes.  - If no format is specified, this call returns the data in JSON form.  - If a format (other than JSON) is specified and the server supports this format, it will return the link to the exported data file in the \&quot;datafiles\&quot; field of the \&quot;metadata\&quot;.  - If more than one format is requested at a time, the server will throw a \&quot;501 Not Implemented\&quot; error.  The format of the tsv response can be found on GitHub (https://github.com/plantbreeding/Documentation/wiki/BrAPI-TSV-Expected-Formats)
     * @param body The markerprofile db ids. Not Required if &#x27;markerDbId&#x27; or &#x27;matrixDbId&#x27; is present. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allelematrixSearchPostAsync(AlleleMatrixSearchRequest body, final ApiCallback<AlleleMatrixValuesResponse1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allelematrixSearchPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlleleMatrixValuesResponse1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for markerprofilesGet
     * @param germplasmDbId The server&#x27;s internal ids for the Germplasm IDs, as returned by the Find marker profile by Germplasm service. (optional)
     * @param studyDbId The server&#x27;s internal id for the StudyDbId (optional)
     * @param sampleDbId The server&#x27;s internal id for the SampleDbId (optional)
     * @param extractDbId The server&#x27;s internal id for the ExtractDbId (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call markerprofilesGetCall(String germplasmDbId, String studyDbId, String sampleDbId, String extractDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/markerprofiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (germplasmDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("germplasmDbId", germplasmDbId));
        if (studyDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("studyDbId", studyDbId));
        if (sampleDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sampleDbId", sampleDbId));
        if (extractDbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extractDbId", extractDbId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call markerprofilesGetValidateBeforeCall(String germplasmDbId, String studyDbId, String sampleDbId, String extractDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = markerprofilesGetCall(germplasmDbId, studyDbId, sampleDbId, extractDbId, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Marker Profiles
     * For the requested Germplasm Id and/or Extract Id, returns the Markerprofile Id and number of non-missing allele calls (marker/allele pairs).
     * @param germplasmDbId The server&#x27;s internal ids for the Germplasm IDs, as returned by the Find marker profile by Germplasm service. (optional)
     * @param studyDbId The server&#x27;s internal id for the StudyDbId (optional)
     * @param sampleDbId The server&#x27;s internal id for the SampleDbId (optional)
     * @param extractDbId The server&#x27;s internal id for the ExtractDbId (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return MarkerProfileDescriptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MarkerProfileDescriptionsResponse markerprofilesGet(String germplasmDbId, String studyDbId, String sampleDbId, String extractDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<MarkerProfileDescriptionsResponse> resp = markerprofilesGetWithHttpInfo(germplasmDbId, studyDbId, sampleDbId, extractDbId, page, pageSize);
        return resp.getData();
    }

    /**
     * Get the Marker Profiles
     * For the requested Germplasm Id and/or Extract Id, returns the Markerprofile Id and number of non-missing allele calls (marker/allele pairs).
     * @param germplasmDbId The server&#x27;s internal ids for the Germplasm IDs, as returned by the Find marker profile by Germplasm service. (optional)
     * @param studyDbId The server&#x27;s internal id for the StudyDbId (optional)
     * @param sampleDbId The server&#x27;s internal id for the SampleDbId (optional)
     * @param extractDbId The server&#x27;s internal id for the ExtractDbId (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;MarkerProfileDescriptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MarkerProfileDescriptionsResponse> markerprofilesGetWithHttpInfo(String germplasmDbId, String studyDbId, String sampleDbId, String extractDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = markerprofilesGetValidateBeforeCall(germplasmDbId, studyDbId, sampleDbId, extractDbId, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<MarkerProfileDescriptionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Marker Profiles (asynchronously)
     * For the requested Germplasm Id and/or Extract Id, returns the Markerprofile Id and number of non-missing allele calls (marker/allele pairs).
     * @param germplasmDbId The server&#x27;s internal ids for the Germplasm IDs, as returned by the Find marker profile by Germplasm service. (optional)
     * @param studyDbId The server&#x27;s internal id for the StudyDbId (optional)
     * @param sampleDbId The server&#x27;s internal id for the SampleDbId (optional)
     * @param extractDbId The server&#x27;s internal id for the ExtractDbId (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call markerprofilesGetAsync(String germplasmDbId, String studyDbId, String sampleDbId, String extractDbId, Integer page, Integer pageSize, String authorization, final ApiCallback<MarkerProfileDescriptionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = markerprofilesGetValidateBeforeCall(germplasmDbId, studyDbId, sampleDbId, extractDbId, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MarkerProfileDescriptionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for markerprofilesMarkerProfileDbIdGet
     * @param markerProfileDbId The server&#x27;s internal id for the marker profile (required)
     * @param expandHomozygotes Should homozygotes NOT be collapsed into a single orrucance? (optional)
     * @param unknownString The string to use as a representation for missing data or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepPhased The string to use as a separator for phased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepUnphased The string to use as a separator for unphased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call markerprofilesMarkerProfileDbIdGetCall(String markerProfileDbId, Boolean expandHomozygotes, String unknownString, String sepPhased, String sepUnphased, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/markerprofiles/{markerProfileDbId}"
            .replaceAll("\\{" + "markerProfileDbId" + "\\}", apiClient.escapeString(markerProfileDbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expandHomozygotes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expandHomozygotes", expandHomozygotes));
        if (unknownString != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("unknownString", unknownString));
        if (sepPhased != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sepPhased", sepPhased));
        if (sepUnphased != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sepUnphased", sepUnphased));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call markerprofilesMarkerProfileDbIdGetValidateBeforeCall(String markerProfileDbId, Boolean expandHomozygotes, String unknownString, String sepPhased, String sepUnphased, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'markerProfileDbId' is set
        if (markerProfileDbId == null) {
            throw new ApiException("Missing the required parameter 'markerProfileDbId' when calling markerprofilesMarkerProfileDbIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = markerprofilesMarkerProfileDbIdGetCall(markerProfileDbId, expandHomozygotes, unknownString, sepPhased, sepUnphased, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the details for a specific Marker Profile
     * For the requested marker profile ID, returns the allele call for each marker.           Allele encodings  - Unknown data will by default be encoded by \\\&quot;N\\\&quot;  - Homozygotes are returned as a single occurance, e.g. AA -&gt; A, GG -&gt; G  - Phased heterozygotes are by default separated by a pipe (\\\&quot;|\\\&quot;) and unphased heterozygotes are by default separated by a forward slash (\\\&quot;/\\\&quot;)  - Dominant markers such as DArTs: 1 for present, 0 for absent          - If the user would like to use an empty string (\\\&quot;\\\&quot;) for any of the parameters, the value should be set to the reserved word \\\&quot;empty_string\\\&quot;, e.g. sepUnphased&#x3D;empty_string.  Open issue: The pages of data will need to be sorted sensibly in order for the requested page to be delivered consistently.  By map or genome position? Alphabetically?&#x27;\&quot;
     * @param markerProfileDbId The server&#x27;s internal id for the marker profile (required)
     * @param expandHomozygotes Should homozygotes NOT be collapsed into a single orrucance? (optional)
     * @param unknownString The string to use as a representation for missing data or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepPhased The string to use as a separator for phased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepUnphased The string to use as a separator for unphased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return MarkerProfilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MarkerProfilesResponse markerprofilesMarkerProfileDbIdGet(String markerProfileDbId, Boolean expandHomozygotes, String unknownString, String sepPhased, String sepUnphased, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<MarkerProfilesResponse> resp = markerprofilesMarkerProfileDbIdGetWithHttpInfo(markerProfileDbId, expandHomozygotes, unknownString, sepPhased, sepUnphased, page, pageSize);
        return resp.getData();
    }

    /**
     * Get the details for a specific Marker Profile
     * For the requested marker profile ID, returns the allele call for each marker.           Allele encodings  - Unknown data will by default be encoded by \\\&quot;N\\\&quot;  - Homozygotes are returned as a single occurance, e.g. AA -&gt; A, GG -&gt; G  - Phased heterozygotes are by default separated by a pipe (\\\&quot;|\\\&quot;) and unphased heterozygotes are by default separated by a forward slash (\\\&quot;/\\\&quot;)  - Dominant markers such as DArTs: 1 for present, 0 for absent          - If the user would like to use an empty string (\\\&quot;\\\&quot;) for any of the parameters, the value should be set to the reserved word \\\&quot;empty_string\\\&quot;, e.g. sepUnphased&#x3D;empty_string.  Open issue: The pages of data will need to be sorted sensibly in order for the requested page to be delivered consistently.  By map or genome position? Alphabetically?&#x27;\&quot;
     * @param markerProfileDbId The server&#x27;s internal id for the marker profile (required)
     * @param expandHomozygotes Should homozygotes NOT be collapsed into a single orrucance? (optional)
     * @param unknownString The string to use as a representation for missing data or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepPhased The string to use as a separator for phased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepUnphased The string to use as a separator for unphased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;MarkerProfilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MarkerProfilesResponse> markerprofilesMarkerProfileDbIdGetWithHttpInfo(String markerProfileDbId, Boolean expandHomozygotes, String unknownString, String sepPhased, String sepUnphased, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = markerprofilesMarkerProfileDbIdGetValidateBeforeCall(markerProfileDbId, expandHomozygotes, unknownString, sepPhased, sepUnphased, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<MarkerProfilesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the details for a specific Marker Profile (asynchronously)
     * For the requested marker profile ID, returns the allele call for each marker.           Allele encodings  - Unknown data will by default be encoded by \\\&quot;N\\\&quot;  - Homozygotes are returned as a single occurance, e.g. AA -&gt; A, GG -&gt; G  - Phased heterozygotes are by default separated by a pipe (\\\&quot;|\\\&quot;) and unphased heterozygotes are by default separated by a forward slash (\\\&quot;/\\\&quot;)  - Dominant markers such as DArTs: 1 for present, 0 for absent          - If the user would like to use an empty string (\\\&quot;\\\&quot;) for any of the parameters, the value should be set to the reserved word \\\&quot;empty_string\\\&quot;, e.g. sepUnphased&#x3D;empty_string.  Open issue: The pages of data will need to be sorted sensibly in order for the requested page to be delivered consistently.  By map or genome position? Alphabetically?&#x27;\&quot;
     * @param markerProfileDbId The server&#x27;s internal id for the marker profile (required)
     * @param expandHomozygotes Should homozygotes NOT be collapsed into a single orrucance? (optional)
     * @param unknownString The string to use as a representation for missing data or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepPhased The string to use as a separator for phased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param sepUnphased The string to use as a separator for unphased allele calls or the reserved word \&quot;empty_string\&quot;. (optional)
     * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt;Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call markerprofilesMarkerProfileDbIdGetAsync(String markerProfileDbId, Boolean expandHomozygotes, String unknownString, String sepPhased, String sepUnphased, Integer page, Integer pageSize, String authorization, final ApiCallback<MarkerProfilesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = markerprofilesMarkerProfileDbIdGetValidateBeforeCall(markerProfileDbId, expandHomozygotes, unknownString, sepPhased, sepUnphased, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MarkerProfilesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

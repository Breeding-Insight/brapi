/*
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.LocalDate;
/**
 * GenomeMap
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-08-25T02:56:46.257Z[GMT]")
public class GenomeMap {
  @SerializedName("comments")
  private String comments = null;

  @SerializedName("commonCropName")
  private String commonCropName = null;

  @SerializedName("documentationURL")
  private String documentationURL = null;

  @SerializedName("linkageGroupCount")
  private Integer linkageGroupCount = null;

  @SerializedName("mapDbId")
  private String mapDbId = null;

  @SerializedName("mapName")
  private String mapName = null;

  @SerializedName("markerCount")
  private Integer markerCount = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("publishedDate")
  private LocalDate publishedDate = null;

  @SerializedName("scientificName")
  private String scientificName = null;

  @SerializedName("species")
  private String species = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("unit")
  private String unit = null;

  public GenomeMap comments(String comments) {
    this.comments = comments;
    return this;
  }

   /**
   * Additional comments
   * @return comments
  **/
  @Schema(description = "Additional comments")
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }

  public GenomeMap commonCropName(String commonCropName) {
    this.commonCropName = commonCropName;
    return this;
  }

   /**
   * The common name of the crop, found from \&quot;GET /commoncropnames\&quot;
   * @return commonCropName
  **/
  @Schema(required = true, description = "The common name of the crop, found from \"GET /commoncropnames\"")
  public String getCommonCropName() {
    return commonCropName;
  }

  public void setCommonCropName(String commonCropName) {
    this.commonCropName = commonCropName;
  }

  public GenomeMap documentationURL(String documentationURL) {
    this.documentationURL = documentationURL;
    return this;
  }

   /**
   * A URL to the human readable documentation of this object
   * @return documentationURL
  **/
  @Schema(description = "A URL to the human readable documentation of this object")
  public String getDocumentationURL() {
    return documentationURL;
  }

  public void setDocumentationURL(String documentationURL) {
    this.documentationURL = documentationURL;
  }

  public GenomeMap linkageGroupCount(Integer linkageGroupCount) {
    this.linkageGroupCount = linkageGroupCount;
    return this;
  }

   /**
   * The number of linkage groups present in this genome map
   * @return linkageGroupCount
  **/
  @Schema(description = "The number of linkage groups present in this genome map")
  public Integer getLinkageGroupCount() {
    return linkageGroupCount;
  }

  public void setLinkageGroupCount(Integer linkageGroupCount) {
    this.linkageGroupCount = linkageGroupCount;
  }

  public GenomeMap mapDbId(String mapDbId) {
    this.mapDbId = mapDbId;
    return this;
  }

   /**
   * The ID which uniquely identifies this genome map
   * @return mapDbId
  **/
  @Schema(required = true, description = "The ID which uniquely identifies this genome map")
  public String getMapDbId() {
    return mapDbId;
  }

  public void setMapDbId(String mapDbId) {
    this.mapDbId = mapDbId;
  }

  public GenomeMap mapName(String mapName) {
    this.mapName = mapName;
    return this;
  }

   /**
   * A human readable name for this genome map
   * @return mapName
  **/
  @Schema(description = "A human readable name for this genome map")
  public String getMapName() {
    return mapName;
  }

  public void setMapName(String mapName) {
    this.mapName = mapName;
  }

  public GenomeMap markerCount(Integer markerCount) {
    this.markerCount = markerCount;
    return this;
  }

   /**
   * The number of markers present in this genome map
   * @return markerCount
  **/
  @Schema(description = "The number of markers present in this genome map")
  public Integer getMarkerCount() {
    return markerCount;
  }

  public void setMarkerCount(Integer markerCount) {
    this.markerCount = markerCount;
  }

  public GenomeMap name(String name) {
    this.name = name;
    return this;
  }

   /**
   * DEPRECATED in v1.3 - Use \&quot;mapName\&quot;
   * @return name
  **/
  @Schema(description = "DEPRECATED in v1.3 - Use \"mapName\"")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public GenomeMap publishedDate(LocalDate publishedDate) {
    this.publishedDate = publishedDate;
    return this;
  }

   /**
   * The date this genome was published
   * @return publishedDate
  **/
  @Schema(description = "The date this genome was published")
  public LocalDate getPublishedDate() {
    return publishedDate;
  }

  public void setPublishedDate(LocalDate publishedDate) {
    this.publishedDate = publishedDate;
  }

  public GenomeMap scientificName(String scientificName) {
    this.scientificName = scientificName;
    return this;
  }

   /**
   * Full scientific binomial format name. This includes Genus, Species, and Sub-species
   * @return scientificName
  **/
  @Schema(description = "Full scientific binomial format name. This includes Genus, Species, and Sub-species")
  public String getScientificName() {
    return scientificName;
  }

  public void setScientificName(String scientificName) {
    this.scientificName = scientificName;
  }

  public GenomeMap species(String species) {
    this.species = species;
    return this;
  }

   /**
   * DEPRECATED in v1.3 - See \&quot;scientificName\&quot;
   * @return species
  **/
  @Schema(description = "DEPRECATED in v1.3 - See \"scientificName\"")
  public String getSpecies() {
    return species;
  }

  public void setSpecies(String species) {
    this.species = species;
  }

  public GenomeMap type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of map this represents, ussually \&quot;Genetic\&quot;
   * @return type
  **/
  @Schema(required = true, description = "The type of map this represents, ussually \"Genetic\"")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public GenomeMap unit(String unit) {
    this.unit = unit;
    return this;
  }

   /**
   * The units used to describe the data in this map
   * @return unit
  **/
  @Schema(description = "The units used to describe the data in this map")
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenomeMap genomeMap = (GenomeMap) o;
    return Objects.equals(this.comments, genomeMap.comments) &&
        Objects.equals(this.commonCropName, genomeMap.commonCropName) &&
        Objects.equals(this.documentationURL, genomeMap.documentationURL) &&
        Objects.equals(this.linkageGroupCount, genomeMap.linkageGroupCount) &&
        Objects.equals(this.mapDbId, genomeMap.mapDbId) &&
        Objects.equals(this.mapName, genomeMap.mapName) &&
        Objects.equals(this.markerCount, genomeMap.markerCount) &&
        Objects.equals(this.name, genomeMap.name) &&
        Objects.equals(this.publishedDate, genomeMap.publishedDate) &&
        Objects.equals(this.scientificName, genomeMap.scientificName) &&
        Objects.equals(this.species, genomeMap.species) &&
        Objects.equals(this.type, genomeMap.type) &&
        Objects.equals(this.unit, genomeMap.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, commonCropName, documentationURL, linkageGroupCount, mapDbId, mapName, markerCount, name, publishedDate, scientificName, species, type, unit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenomeMap {\n");
    
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    commonCropName: ").append(toIndentedString(commonCropName)).append("\n");
    sb.append("    documentationURL: ").append(toIndentedString(documentationURL)).append("\n");
    sb.append("    linkageGroupCount: ").append(toIndentedString(linkageGroupCount)).append("\n");
    sb.append("    mapDbId: ").append(toIndentedString(mapDbId)).append("\n");
    sb.append("    mapName: ").append(toIndentedString(mapName)).append("\n");
    sb.append("    markerCount: ").append(toIndentedString(markerCount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    publishedDate: ").append(toIndentedString(publishedDate)).append("\n");
    sb.append("    scientificName: ").append(toIndentedString(scientificName)).append("\n");
    sb.append("    species: ").append(toIndentedString(species)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Ontology
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-08-25T02:56:46.257Z[GMT]")
public class Ontology {
  @SerializedName("authors")
  private String authors = null;

  @SerializedName("copyright")
  private String copyright = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("documentationURL")
  private String documentationURL = null;

  @SerializedName("licence")
  private String licence = null;

  @SerializedName("ontologyDbId")
  private String ontologyDbId = null;

  @SerializedName("ontologyName")
  private String ontologyName = null;

  @SerializedName("version")
  private String version = null;

  public Ontology authors(String authors) {
    this.authors = authors;
    return this;
  }

   /**
   * Ontology&#x27;s list of authors (no specific format)
   * @return authors
  **/
  @Schema(description = "Ontology's list of authors (no specific format)")
  public String getAuthors() {
    return authors;
  }

  public void setAuthors(String authors) {
    this.authors = authors;
  }

  public Ontology copyright(String copyright) {
    this.copyright = copyright;
    return this;
  }

   /**
   * Ontology copyright
   * @return copyright
  **/
  @Schema(description = "Ontology copyright")
  public String getCopyright() {
    return copyright;
  }

  public void setCopyright(String copyright) {
    this.copyright = copyright;
  }

  public Ontology description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Human readable description of Ontology
   * @return description
  **/
  @Schema(description = "Human readable description of Ontology")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Ontology documentationURL(String documentationURL) {
    this.documentationURL = documentationURL;
    return this;
  }

   /**
   * A URL to the human readable documentation of this object
   * @return documentationURL
  **/
  @Schema(description = "A URL to the human readable documentation of this object")
  public String getDocumentationURL() {
    return documentationURL;
  }

  public void setDocumentationURL(String documentationURL) {
    this.documentationURL = documentationURL;
  }

  public Ontology licence(String licence) {
    this.licence = licence;
    return this;
  }

   /**
   * Ontology licence
   * @return licence
  **/
  @Schema(description = "Ontology licence")
  public String getLicence() {
    return licence;
  }

  public void setLicence(String licence) {
    this.licence = licence;
  }

  public Ontology ontologyDbId(String ontologyDbId) {
    this.ontologyDbId = ontologyDbId;
    return this;
  }

   /**
   * Ontology database unique identifier
   * @return ontologyDbId
  **/
  @Schema(required = true, description = "Ontology database unique identifier")
  public String getOntologyDbId() {
    return ontologyDbId;
  }

  public void setOntologyDbId(String ontologyDbId) {
    this.ontologyDbId = ontologyDbId;
  }

  public Ontology ontologyName(String ontologyName) {
    this.ontologyName = ontologyName;
    return this;
  }

   /**
   * Ontology name
   * @return ontologyName
  **/
  @Schema(required = true, description = "Ontology name")
  public String getOntologyName() {
    return ontologyName;
  }

  public void setOntologyName(String ontologyName) {
    this.ontologyName = ontologyName;
  }

  public Ontology version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Ontology version (no specific format)
   * @return version
  **/
  @Schema(description = "Ontology version (no specific format)")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ontology ontology = (Ontology) o;
    return Objects.equals(this.authors, ontology.authors) &&
        Objects.equals(this.copyright, ontology.copyright) &&
        Objects.equals(this.description, ontology.description) &&
        Objects.equals(this.documentationURL, ontology.documentationURL) &&
        Objects.equals(this.licence, ontology.licence) &&
        Objects.equals(this.ontologyDbId, ontology.ontologyDbId) &&
        Objects.equals(this.ontologyName, ontology.ontologyName) &&
        Objects.equals(this.version, ontology.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authors, copyright, description, documentationURL, licence, ontologyDbId, ontologyName, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ontology {\n");
    
    sb.append("    authors: ").append(toIndentedString(authors)).append("\n");
    sb.append("    copyright: ").append(toIndentedString(copyright)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    documentationURL: ").append(toIndentedString(documentationURL)).append("\n");
    sb.append("    licence: ").append(toIndentedString(licence)).append("\n");
    sb.append("    ontologyDbId: ").append(toIndentedString(ontologyDbId)).append("\n");
    sb.append("    ontologyName: ").append(toIndentedString(ontologyName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.client.model.GermplasmMCPDCollectingInfoCollectingInstitutes;
import io.swagger.client.model.GermplasmMCPDCollectingInfoCollectingSite;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
/**
 * Information about the collection of this germplasm
 */
@Schema(description = "Information about the collection of this germplasm")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-08-25T02:56:46.257Z[GMT]")
public class GermplasmMCPDCollectingInfo {
  @SerializedName("collectingDate")
  private String collectingDate = null;

  @SerializedName("collectingInstitutes")
  private List<GermplasmMCPDCollectingInfoCollectingInstitutes> collectingInstitutes = null;

  @SerializedName("collectingMissionIdentifier")
  private String collectingMissionIdentifier = null;

  @SerializedName("collectingNumber")
  private String collectingNumber = null;

  @SerializedName("collectingSite")
  private GermplasmMCPDCollectingInfoCollectingSite collectingSite = null;

  public GermplasmMCPDCollectingInfo collectingDate(String collectingDate) {
    this.collectingDate = collectingDate;
    return this;
  }

   /**
   * MCPD (v2.1) (COLLDATE) 17. Collecting date of the sample [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or \&quot;00\&quot; [double zero].
   * @return collectingDate
  **/
  @Schema(description = "MCPD (v2.1) (COLLDATE) 17. Collecting date of the sample [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or \"00\" [double zero].")
  public String getCollectingDate() {
    return collectingDate;
  }

  public void setCollectingDate(String collectingDate) {
    this.collectingDate = collectingDate;
  }

  public GermplasmMCPDCollectingInfo collectingInstitutes(List<GermplasmMCPDCollectingInfoCollectingInstitutes> collectingInstitutes) {
    this.collectingInstitutes = collectingInstitutes;
    return this;
  }

  public GermplasmMCPDCollectingInfo addCollectingInstitutesItem(GermplasmMCPDCollectingInfoCollectingInstitutes collectingInstitutesItem) {
    if (this.collectingInstitutes == null) {
      this.collectingInstitutes = new ArrayList<GermplasmMCPDCollectingInfoCollectingInstitutes>();
    }
    this.collectingInstitutes.add(collectingInstitutesItem);
    return this;
  }

   /**
   * Institutes which collected the sample
   * @return collectingInstitutes
  **/
  @Schema(description = "Institutes which collected the sample")
  public List<GermplasmMCPDCollectingInfoCollectingInstitutes> getCollectingInstitutes() {
    return collectingInstitutes;
  }

  public void setCollectingInstitutes(List<GermplasmMCPDCollectingInfoCollectingInstitutes> collectingInstitutes) {
    this.collectingInstitutes = collectingInstitutes;
  }

  public GermplasmMCPDCollectingInfo collectingMissionIdentifier(String collectingMissionIdentifier) {
    this.collectingMissionIdentifier = collectingMissionIdentifier;
    return this;
  }

   /**
   * MCPD (v2.1) (COLLMISSID) 4.2 Identifier of the collecting mission used by the Collecting Institute (4 or 4.1) (e.g. \&quot;CIATFOR052\&quot;, \&quot;CN426\&quot;).
   * @return collectingMissionIdentifier
  **/
  @Schema(description = "MCPD (v2.1) (COLLMISSID) 4.2 Identifier of the collecting mission used by the Collecting Institute (4 or 4.1) (e.g. \"CIATFOR052\", \"CN426\").")
  public String getCollectingMissionIdentifier() {
    return collectingMissionIdentifier;
  }

  public void setCollectingMissionIdentifier(String collectingMissionIdentifier) {
    this.collectingMissionIdentifier = collectingMissionIdentifier;
  }

  public GermplasmMCPDCollectingInfo collectingNumber(String collectingNumber) {
    this.collectingNumber = collectingNumber;
    return this;
  }

   /**
   * MCPD (v2.1) (COLLNUMB) 3. Original identifier assigned by the collector(s) of the sample, normally composed of the name or initials of the collector(s) followed by a number (e.g. \&quot;FM9909\&quot;). This identifier is essential for identifying duplicates held in different collections.
   * @return collectingNumber
  **/
  @Schema(description = "MCPD (v2.1) (COLLNUMB) 3. Original identifier assigned by the collector(s) of the sample, normally composed of the name or initials of the collector(s) followed by a number (e.g. \"FM9909\"). This identifier is essential for identifying duplicates held in different collections.")
  public String getCollectingNumber() {
    return collectingNumber;
  }

  public void setCollectingNumber(String collectingNumber) {
    this.collectingNumber = collectingNumber;
  }

  public GermplasmMCPDCollectingInfo collectingSite(GermplasmMCPDCollectingInfoCollectingSite collectingSite) {
    this.collectingSite = collectingSite;
    return this;
  }

   /**
   * Get collectingSite
   * @return collectingSite
  **/
  @Schema(description = "")
  public GermplasmMCPDCollectingInfoCollectingSite getCollectingSite() {
    return collectingSite;
  }

  public void setCollectingSite(GermplasmMCPDCollectingInfoCollectingSite collectingSite) {
    this.collectingSite = collectingSite;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GermplasmMCPDCollectingInfo germplasmMCPDCollectingInfo = (GermplasmMCPDCollectingInfo) o;
    return Objects.equals(this.collectingDate, germplasmMCPDCollectingInfo.collectingDate) &&
        Objects.equals(this.collectingInstitutes, germplasmMCPDCollectingInfo.collectingInstitutes) &&
        Objects.equals(this.collectingMissionIdentifier, germplasmMCPDCollectingInfo.collectingMissionIdentifier) &&
        Objects.equals(this.collectingNumber, germplasmMCPDCollectingInfo.collectingNumber) &&
        Objects.equals(this.collectingSite, germplasmMCPDCollectingInfo.collectingSite);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectingDate, collectingInstitutes, collectingMissionIdentifier, collectingNumber, collectingSite);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GermplasmMCPDCollectingInfo {\n");
    
    sb.append("    collectingDate: ").append(toIndentedString(collectingDate)).append("\n");
    sb.append("    collectingInstitutes: ").append(toIndentedString(collectingInstitutes)).append("\n");
    sb.append("    collectingMissionIdentifier: ").append(toIndentedString(collectingMissionIdentifier)).append("\n");
    sb.append("    collectingNumber: ").append(toIndentedString(collectingNumber)).append("\n");
    sb.append("    collectingSite: ").append(toIndentedString(collectingSite)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

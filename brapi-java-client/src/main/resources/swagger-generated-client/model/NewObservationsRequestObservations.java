/*
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;
/**
 * NewObservationsRequestObservations
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-08-25T02:56:46.257Z[GMT]")
public class NewObservationsRequestObservations {
  @SerializedName("collector")
  private String collector = null;

  @SerializedName("observationDbId")
  private String observationDbId = null;

  @SerializedName("observationTimeStamp")
  private OffsetDateTime observationTimeStamp = null;

  @SerializedName("observationUnitDbId")
  private String observationUnitDbId = null;

  @SerializedName("observationVariableDbId")
  private String observationVariableDbId = null;

  @SerializedName("value")
  private String value = null;

  public NewObservationsRequestObservations collector(String collector) {
    this.collector = collector;
    return this;
  }

   /**
   * Get collector
   * @return collector
  **/
  @Schema(description = "")
  public String getCollector() {
    return collector;
  }

  public void setCollector(String collector) {
    this.collector = collector;
  }

  public NewObservationsRequestObservations observationDbId(String observationDbId) {
    this.observationDbId = observationDbId;
    return this;
  }

   /**
   * Get observationDbId
   * @return observationDbId
  **/
  @Schema(description = "")
  public String getObservationDbId() {
    return observationDbId;
  }

  public void setObservationDbId(String observationDbId) {
    this.observationDbId = observationDbId;
  }

  public NewObservationsRequestObservations observationTimeStamp(OffsetDateTime observationTimeStamp) {
    this.observationTimeStamp = observationTimeStamp;
    return this;
  }

   /**
   * Get observationTimeStamp
   * @return observationTimeStamp
  **/
  @Schema(description = "")
  public OffsetDateTime getObservationTimeStamp() {
    return observationTimeStamp;
  }

  public void setObservationTimeStamp(OffsetDateTime observationTimeStamp) {
    this.observationTimeStamp = observationTimeStamp;
  }

  public NewObservationsRequestObservations observationUnitDbId(String observationUnitDbId) {
    this.observationUnitDbId = observationUnitDbId;
    return this;
  }

   /**
   * Get observationUnitDbId
   * @return observationUnitDbId
  **/
  @Schema(description = "")
  public String getObservationUnitDbId() {
    return observationUnitDbId;
  }

  public void setObservationUnitDbId(String observationUnitDbId) {
    this.observationUnitDbId = observationUnitDbId;
  }

  public NewObservationsRequestObservations observationVariableDbId(String observationVariableDbId) {
    this.observationVariableDbId = observationVariableDbId;
    return this;
  }

   /**
   * Get observationVariableDbId
   * @return observationVariableDbId
  **/
  @Schema(description = "")
  public String getObservationVariableDbId() {
    return observationVariableDbId;
  }

  public void setObservationVariableDbId(String observationVariableDbId) {
    this.observationVariableDbId = observationVariableDbId;
  }

  public NewObservationsRequestObservations value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @Schema(description = "")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewObservationsRequestObservations newObservationsRequestObservations = (NewObservationsRequestObservations) o;
    return Objects.equals(this.collector, newObservationsRequestObservations.collector) &&
        Objects.equals(this.observationDbId, newObservationsRequestObservations.observationDbId) &&
        Objects.equals(this.observationTimeStamp, newObservationsRequestObservations.observationTimeStamp) &&
        Objects.equals(this.observationUnitDbId, newObservationsRequestObservations.observationUnitDbId) &&
        Objects.equals(this.observationVariableDbId, newObservationsRequestObservations.observationVariableDbId) &&
        Objects.equals(this.value, newObservationsRequestObservations.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collector, observationDbId, observationTimeStamp, observationUnitDbId, observationVariableDbId, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewObservationsRequestObservations {\n");
    
    sb.append("    collector: ").append(toIndentedString(collector)).append("\n");
    sb.append("    observationDbId: ").append(toIndentedString(observationDbId)).append("\n");
    sb.append("    observationTimeStamp: ").append(toIndentedString(observationTimeStamp)).append("\n");
    sb.append("    observationUnitDbId: ").append(toIndentedString(observationUnitDbId)).append("\n");
    sb.append("    observationVariableDbId: ").append(toIndentedString(observationVariableDbId)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

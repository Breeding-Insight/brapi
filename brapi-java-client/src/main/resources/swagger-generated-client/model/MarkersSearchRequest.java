/*
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a>  <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * MarkersSearchRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-08-25T02:56:46.257Z[GMT]")
public class MarkersSearchRequest {
  @SerializedName("includeSynonyms")
  private Boolean includeSynonyms = null;

  @SerializedName("markerDbIds")
  private List<String> markerDbIds = null;

  @SerializedName("markerNames")
  private List<String> markerNames = null;

  /**
   * How to perform string matching during search. &#x27;exact&#x27; will search for exact, case sensitive matches only. &#x27;case_insensitive&#x27; will search for exact matches, but case insensitive. &#x27;wildcard&#x27; will allow the special characters &#x27;*&#x27; (star) and &#x27;%&#x27; (percent) to represent variable length arbitrary strings, and the special character &#x27;?&#x27; (question) to represent one arbitrary character.
   */
  @JsonAdapter(MatchMethodEnum.Adapter.class)
  public enum MatchMethodEnum {
    EXACT("exact"),
    CASE_INSENSITIVE("case_insensitive"),
    WILDCARD("wildcard");

    private String value;

    MatchMethodEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MatchMethodEnum fromValue(String text) {
      for (MatchMethodEnum b : MatchMethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MatchMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MatchMethodEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("matchMethod")
  private MatchMethodEnum matchMethod = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("page")
  private Integer page = null;

  @SerializedName("pageSize")
  private Integer pageSize = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("types")
  private List<String> types = null;

  public MarkersSearchRequest includeSynonyms(Boolean includeSynonyms) {
    this.includeSynonyms = includeSynonyms;
    return this;
  }

   /**
   * Should an array of synonyms be included in the response
   * @return includeSynonyms
  **/
  @Schema(description = "Should an array of synonyms be included in the response")
  public Boolean isIncludeSynonyms() {
    return includeSynonyms;
  }

  public void setIncludeSynonyms(Boolean includeSynonyms) {
    this.includeSynonyms = includeSynonyms;
  }

  public MarkersSearchRequest markerDbIds(List<String> markerDbIds) {
    this.markerDbIds = markerDbIds;
    return this;
  }

  public MarkersSearchRequest addMarkerDbIdsItem(String markerDbIdsItem) {
    if (this.markerDbIds == null) {
      this.markerDbIds = new ArrayList<String>();
    }
    this.markerDbIds.add(markerDbIdsItem);
    return this;
  }

   /**
   * List of IDs which uniquely identify markers 
   * @return markerDbIds
  **/
  @Schema(description = "List of IDs which uniquely identify markers ")
  public List<String> getMarkerDbIds() {
    return markerDbIds;
  }

  public void setMarkerDbIds(List<String> markerDbIds) {
    this.markerDbIds = markerDbIds;
  }

  public MarkersSearchRequest markerNames(List<String> markerNames) {
    this.markerNames = markerNames;
    return this;
  }

  public MarkersSearchRequest addMarkerNamesItem(String markerNamesItem) {
    if (this.markerNames == null) {
      this.markerNames = new ArrayList<String>();
    }
    this.markerNames.add(markerNamesItem);
    return this;
  }

   /**
   * The search pattern for the marker name or synonym.
   * @return markerNames
  **/
  @Schema(description = "The search pattern for the marker name or synonym.")
  public List<String> getMarkerNames() {
    return markerNames;
  }

  public void setMarkerNames(List<String> markerNames) {
    this.markerNames = markerNames;
  }

  public MarkersSearchRequest matchMethod(MatchMethodEnum matchMethod) {
    this.matchMethod = matchMethod;
    return this;
  }

   /**
   * How to perform string matching during search. &#x27;exact&#x27; will search for exact, case sensitive matches only. &#x27;case_insensitive&#x27; will search for exact matches, but case insensitive. &#x27;wildcard&#x27; will allow the special characters &#x27;*&#x27; (star) and &#x27;%&#x27; (percent) to represent variable length arbitrary strings, and the special character &#x27;?&#x27; (question) to represent one arbitrary character.
   * @return matchMethod
  **/
  @Schema(description = "How to perform string matching during search. 'exact' will search for exact, case sensitive matches only. 'case_insensitive' will search for exact matches, but case insensitive. 'wildcard' will allow the special characters '*' (star) and '%' (percent) to represent variable length arbitrary strings, and the special character '?' (question) to represent one arbitrary character.")
  public MatchMethodEnum getMatchMethod() {
    return matchMethod;
  }

  public void setMatchMethod(MatchMethodEnum matchMethod) {
    this.matchMethod = matchMethod;
  }

  public MarkersSearchRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * DEPRECATED in v 1.3 - see \&quot;markerNames\&quot;
   * @return name
  **/
  @Schema(description = "DEPRECATED in v 1.3 - see \"markerNames\"")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public MarkersSearchRequest page(Integer page) {
    this.page = page;
    return this;
  }

   /**
   * Which page of the \&quot;data\&quot; array to return. The page indexing starts at 0 (page&#x3D;0 will return the first page). Default is 0.
   * @return page
  **/
  @Schema(description = "Which page of the \"data\" array to return. The page indexing starts at 0 (page=0 will return the first page). Default is 0.")
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }

  public MarkersSearchRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * The maximum number of items to return per page of the \&quot;data\&quot; array. Default is 1000.
   * @return pageSize
  **/
  @Schema(description = "The maximum number of items to return per page of the \"data\" array. Default is 1000.")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public MarkersSearchRequest type(String type) {
    this.type = type;
    return this;
  }

   /**
   * DEPRECATED in v 1.3 - see \&quot;types\&quot;
   * @return type
  **/
  @Schema(description = "DEPRECATED in v 1.3 - see \"types\"")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public MarkersSearchRequest types(List<String> types) {
    this.types = types;
    return this;
  }

  public MarkersSearchRequest addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<String>();
    }
    this.types.add(typesItem);
    return this;
  }

   /**
   * The type of marker, e.g. SNP
   * @return types
  **/
  @Schema(description = "The type of marker, e.g. SNP")
  public List<String> getTypes() {
    return types;
  }

  public void setTypes(List<String> types) {
    this.types = types;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarkersSearchRequest markersSearchRequest = (MarkersSearchRequest) o;
    return Objects.equals(this.includeSynonyms, markersSearchRequest.includeSynonyms) &&
        Objects.equals(this.markerDbIds, markersSearchRequest.markerDbIds) &&
        Objects.equals(this.markerNames, markersSearchRequest.markerNames) &&
        Objects.equals(this.matchMethod, markersSearchRequest.matchMethod) &&
        Objects.equals(this.name, markersSearchRequest.name) &&
        Objects.equals(this.page, markersSearchRequest.page) &&
        Objects.equals(this.pageSize, markersSearchRequest.pageSize) &&
        Objects.equals(this.type, markersSearchRequest.type) &&
        Objects.equals(this.types, markersSearchRequest.types);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includeSynonyms, markerDbIds, markerNames, matchMethod, name, page, pageSize, type, types);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarkersSearchRequest {\n");
    
    sb.append("    includeSynonyms: ").append(toIndentedString(includeSynonyms)).append("\n");
    sb.append("    markerDbIds: ").append(toIndentedString(markerDbIds)).append("\n");
    sb.append("    markerNames: ").append(toIndentedString(markerNames)).append("\n");
    sb.append("    matchMethod: ").append(toIndentedString(matchMethod)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * BrAPI-Germplasm
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.client.v2.modules.germplasm;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.brapi.client.v2.ApiCallback;
import org.brapi.client.v2.ApiClient;
import org.brapi.client.v2.ApiResponse;
import org.brapi.client.v2.Configuration;
import org.brapi.client.v2.model.exceptions.ApiException;
import org.brapi.client.v2.model.queryParams.germplasm.GermplasmQueryParams;
import org.brapi.v2.model.germ.BrAPIBreedingMethodListResponse;
import org.brapi.v2.model.germ.BrAPIBreedingMethodSingleResponse;
import org.brapi.v2.model.germ.BrAPIGermplasmListResponse;
import org.brapi.v2.model.germ.BrAPIGermplasmMCPDResponse;
import org.brapi.v2.model.germ.BrAPIGermplasmNewRequest;
import org.brapi.v2.model.germ.BrAPIGermplasmPedigreeResponse;
import org.brapi.v2.model.germ.BrAPIGermplasmProgenyResponse;
import org.brapi.v2.model.germ.BrAPIGermplasmSearchRequest;
import org.brapi.v2.model.germ.BrAPIGermplasmSingleResponse;

import com.google.gson.reflect.TypeToken;

import okhttp3.Call;

public class GermplasmApi {
    private ApiClient apiClient;

    public GermplasmApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GermplasmApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for breedingmethodsBreedingMethodDbIdGet
     * @param breedingMethodDbId Internal database identifier for a breeding method (required)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call breedingmethodsBreedingMethodDbIdGetCall(String breedingMethodDbId) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/breedingmethods/{breedingMethodDbId}"
            .replaceAll("\\{" + "breedingMethodDbId" + "\\}", apiClient.escapeString(breedingMethodDbId.toString()));

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Get the details of a specific Breeding Method
     * Get the details of a specific Breeding Method used to produce Germplasm
     * @param breedingMethodDbId Internal database identifier for a breeding method (required)

     * @return ApiResponse&lt;BreedingMethodSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIBreedingMethodSingleResponse> breedingmethodsBreedingMethodDbIdGet(String breedingMethodDbId) throws ApiException {
        Call call = breedingmethodsBreedingMethodDbIdGetCall(breedingMethodDbId);
        Type localVarReturnType = new TypeToken<BrAPIBreedingMethodSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the details of a specific Breeding Method (asynchronously)
     * Get the details of a specific Breeding Method used to produce Germplasm
     * @param breedingMethodDbId Internal database identifier for a breeding method (required)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call breedingmethodsBreedingMethodDbIdGetAsync(String breedingMethodDbId, final ApiCallback<BrAPIBreedingMethodSingleResponse> callback) throws ApiException {
        Call call = breedingmethodsBreedingMethodDbIdGetCall(breedingMethodDbId);
        Type localVarReturnType = new TypeToken<BrAPIBreedingMethodSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for breedingmethodsGet
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call breedingmethodsGetCall(Integer page, Integer pageSize) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/breedingmethods";

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();
        if (page != null)
            apiClient.prepQueryParameter(localVarQueryParams, "page", page);
        if (pageSize != null)
            apiClient.prepQueryParameter(localVarQueryParams, "pageSize", pageSize);

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Get the Breeding Methods
     * Get the list of germplasm breeding methods available in a system.
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)

     * @return ApiResponse&lt;BreedingMethodListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIBreedingMethodListResponse> breedingmethodsGet(Integer page, Integer pageSize) throws ApiException {
        Call call = breedingmethodsGetCall(page, pageSize);
        Type localVarReturnType = new TypeToken<BrAPIBreedingMethodListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Breeding Methods (asynchronously)
     * Get the list of germplasm breeding methods available in a system.
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call breedingmethodsGetAsync(Integer page, Integer pageSize, final ApiCallback<BrAPIBreedingMethodListResponse> callback) throws ApiException {
        Call call = breedingmethodsGetCall(page, pageSize);
        Type localVarReturnType = new TypeToken<BrAPIBreedingMethodListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for germplasmGermplasmDbIdGet
     * @param germplasmDbId The internal id of the germplasm (required)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call germplasmGermplasmDbIdGetCall(String germplasmDbId) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/germplasm/{germplasmDbId}"
            .replaceAll("\\{" + "germplasmDbId" + "\\}", apiClient.escapeString(germplasmDbId.toString()));

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Get the details of a specific Germplasm
     * Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].
     * @param germplasmDbId The internal id of the germplasm (required)

     * @return ApiResponse&lt;GermplasmSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIGermplasmSingleResponse> germplasmGermplasmDbIdGet(String germplasmDbId) throws ApiException {
        Call call = germplasmGermplasmDbIdGetCall(germplasmDbId);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the details of a specific Germplasm (asynchronously)
     * Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].
     * @param germplasmDbId The internal id of the germplasm (required)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call germplasmGermplasmDbIdGetAsync(String germplasmDbId, final ApiCallback<BrAPIGermplasmSingleResponse> callback) throws ApiException {
        Call call = germplasmGermplasmDbIdGetCall(germplasmDbId);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for germplasmGermplasmDbIdMcpdGet
     * @param germplasmDbId the internal id of the germplasm (required)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call germplasmGermplasmDbIdMcpdGetCall(String germplasmDbId) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/germplasm/{germplasmDbId}/mcpd"
            .replaceAll("\\{" + "germplasmDbId" + "\\}", apiClient.escapeString(germplasmDbId.toString()));

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Get the details of a specific Germplasm in MCPD format
     * Get all MCPD details of a germplasm  &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.bioversityInternational.org/fileadmin/user_upload/online_library/publications/pdfs/FAOBIOVERSITY_MULTI-CROP_PASSPORT_DESCRIPTORS_V.2.1_2015_2020.pdf\&quot;&gt; MCPD v2.1 spec can be found here &lt;/a&gt;  Implementation Notes  - When the MCPD spec identifies a field which can have multiple values returned, the JSON response should be an array instead of a semi-colon separated string.
     * @param germplasmDbId the internal id of the germplasm (required)

     * @return ApiResponse&lt;GermplasmMCPDResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIGermplasmMCPDResponse> germplasmGermplasmDbIdMcpdGet(String germplasmDbId) throws ApiException {
        Call call = germplasmGermplasmDbIdMcpdGetCall(germplasmDbId);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmMCPDResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the details of a specific Germplasm in MCPD format (asynchronously)
     * Get all MCPD details of a germplasm  &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.bioversityInternational.org/fileadmin/user_upload/online_library/publications/pdfs/FAOBIOVERSITY_MULTI-CROP_PASSPORT_DESCRIPTORS_V.2.1_2015_2020.pdf\&quot;&gt; MCPD v2.1 spec can be found here &lt;/a&gt;  Implementation Notes  - When the MCPD spec identifies a field which can have multiple values returned, the JSON response should be an array instead of a semi-colon separated string.
     * @param germplasmDbId the internal id of the germplasm (required)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call germplasmGermplasmDbIdMcpdGetAsync(String germplasmDbId, final ApiCallback<BrAPIGermplasmMCPDResponse> callback) throws ApiException {
        Call call = germplasmGermplasmDbIdMcpdGetCall(germplasmDbId);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmMCPDResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for germplasmGermplasmDbIdPedigreeGet
     * @param germplasmDbId the internal id of the germplasm (required)
     * @param notation text representation of the pedigree (optional)
     * @param includeSiblings include array of siblings in response (optional)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call germplasmGermplasmDbIdPedigreeGetCall(String germplasmDbId, String notation, Boolean includeSiblings) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/germplasm/{germplasmDbId}/pedigree"
            .replaceAll("\\{" + "germplasmDbId" + "\\}", apiClient.escapeString(germplasmDbId.toString()));

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();
        if (notation != null)
            apiClient.prepQueryParameter(localVarQueryParams, "notation", notation);
        if (includeSiblings != null)
            apiClient.prepQueryParameter(localVarQueryParams, "includeSiblings", includeSiblings);

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Get the pedigree details of a specific Germplasm
     * Get the parentage information of a specific Germplasm
     * @param germplasmDbId the internal id of the germplasm (required)
     * @param notation text representation of the pedigree (optional)
     * @param includeSiblings include array of siblings in response (optional)

     * @return ApiResponse&lt;GermplasmPedigreeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIGermplasmPedigreeResponse> germplasmGermplasmDbIdPedigreeGet(String germplasmDbId, String notation, Boolean includeSiblings) throws ApiException {
        Call call = germplasmGermplasmDbIdPedigreeGetCall(germplasmDbId, notation, includeSiblings);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmPedigreeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the pedigree details of a specific Germplasm (asynchronously)
     * Get the parentage information of a specific Germplasm
     * @param germplasmDbId the internal id of the germplasm (required)
     * @param notation text representation of the pedigree (optional)
     * @param includeSiblings include array of siblings in response (optional)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call germplasmGermplasmDbIdPedigreeGetAsync(String germplasmDbId, String notation, Boolean includeSiblings, final ApiCallback<BrAPIGermplasmPedigreeResponse> callback) throws ApiException {
        Call call = germplasmGermplasmDbIdPedigreeGetCall(germplasmDbId, notation, includeSiblings);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmPedigreeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for germplasmGermplasmDbIdProgenyGet
     * @param germplasmDbId the internal id of the germplasm (required)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call germplasmGermplasmDbIdProgenyGetCall(String germplasmDbId) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/germplasm/{germplasmDbId}/progeny"
            .replaceAll("\\{" + "germplasmDbId" + "\\}", apiClient.escapeString(germplasmDbId.toString()));

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Get the progeny details of a specific Germplasm
     * Get the germplasmDbIds for all the Progeny of a particular germplasm.  Implementation Notes  - Regarding the &#x27;&#x27;parentType&#x27;&#x27; field in the progeny object. Given a germplasm A having a progeny B and C, &#x27;&#x27;parentType&#x27;&#x27; for progeny B refers to the &#x27;&#x27;parentType&#x27;&#x27; of A toward B.
     * @param germplasmDbId the internal id of the germplasm (required)

     * @return ApiResponse&lt;GermplasmProgenyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIGermplasmProgenyResponse> germplasmGermplasmDbIdProgenyGet(String germplasmDbId) throws ApiException {
        Call call = germplasmGermplasmDbIdProgenyGetCall(germplasmDbId);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmProgenyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the progeny details of a specific Germplasm (asynchronously)
     * Get the germplasmDbIds for all the Progeny of a particular germplasm.  Implementation Notes  - Regarding the &#x27;&#x27;parentType&#x27;&#x27; field in the progeny object. Given a germplasm A having a progeny B and C, &#x27;&#x27;parentType&#x27;&#x27; for progeny B refers to the &#x27;&#x27;parentType&#x27;&#x27; of A toward B.
     * @param germplasmDbId the internal id of the germplasm (required)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call germplasmGermplasmDbIdProgenyGetAsync(String germplasmDbId, final ApiCallback<BrAPIGermplasmProgenyResponse> callback) throws ApiException {
        Call call = germplasmGermplasmDbIdProgenyGetCall(germplasmDbId);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmProgenyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for germplasmGermplasmDbIdPut
     * @param germplasmDbId The internal id of the germplasm (required)
     * @param body  (optional)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call germplasmGermplasmDbIdPutCall(String germplasmDbId, BrAPIGermplasmNewRequest body) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/germplasm/{germplasmDbId}"
            .replaceAll("\\{" + "germplasmDbId" + "\\}", apiClient.escapeString(germplasmDbId.toString()));

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Update the details of an existing Germplasm
     * Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].
     * @param germplasmDbId The internal id of the germplasm (required)
     * @param body  (optional)

     * @return ApiResponse&lt;GermplasmSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIGermplasmSingleResponse> germplasmGermplasmDbIdPut(String germplasmDbId, BrAPIGermplasmNewRequest body) throws ApiException {
        Call call = germplasmGermplasmDbIdPutCall(germplasmDbId, body);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the details of an existing Germplasm (asynchronously)
     * Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].
     * @param germplasmDbId The internal id of the germplasm (required)
     * @param body  (optional)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call germplasmGermplasmDbIdPutAsync(String germplasmDbId, BrAPIGermplasmNewRequest body, final ApiCallback<BrAPIGermplasmSingleResponse> callback) throws ApiException {
        Call call = germplasmGermplasmDbIdPutCall(germplasmDbId, body);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for germplasmGet
     * @param queryParams
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call germplasmGetCall(GermplasmQueryParams queryParams) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/germplasm";

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();
        if (queryParams.germplasmPUI() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "germplasmPUI", queryParams.germplasmPUI());
        if (queryParams.germplasmDbId() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "germplasmDbId", queryParams.germplasmDbId());
        if (queryParams.germplasmName() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "germplasmName", queryParams.germplasmName());
        if (queryParams.commonCropName() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "commonCropName", queryParams.commonCropName());
        if (queryParams.accessionNumber() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "accessionNumber", queryParams.accessionNumber());
        if (queryParams.collection() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "collection", queryParams.collection());
        if (queryParams.genus() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "genus", queryParams.genus());
        if (queryParams.species() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "species", queryParams.species());
        if (queryParams.studyDbId() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "studyDbId", queryParams.studyDbId());
        if (queryParams.synonym() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "synonym", queryParams.synonym());
        if (queryParams.parentDbId() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "parentDbId", queryParams.parentDbId());
        if (queryParams.progenyDbId() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "progenyDbId", queryParams.progenyDbId());
        if (queryParams.externalReferenceID() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "externalReferenceID", queryParams.externalReferenceID());
        if (queryParams.externalReferenceSource() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "externalReferenceSource", queryParams.externalReferenceSource());
        if (queryParams.page() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "page", queryParams.page());
        if (queryParams.pageSize() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "pageSize", queryParams.pageSize());

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Get a filtered list of Germplasm
     * Addresses these needs  - General germplasm search mechanism that accepts POST for complex queries   - Possibility to search germplasm by more parameters than those allowed by the existing germplasm search   - Possibility to get MCPD details by PUID rather than dbId
     * @param queryParams
     * @return ApiResponse&lt;GermplasmListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIGermplasmListResponse> germplasmGet(GermplasmQueryParams queryParams) throws ApiException {
        Call call = germplasmGetCall(queryParams);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a filtered list of Germplasm (asynchronously)
     * Addresses these needs  - General germplasm search mechanism that accepts POST for complex queries   - Possibility to search germplasm by more parameters than those allowed by the existing germplasm search   - Possibility to get MCPD details by PUID rather than dbId
     * @param queryParams
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call germplasmGetAsync(GermplasmQueryParams queryParams, final ApiCallback<BrAPIGermplasmListResponse> callback) throws ApiException {
        Call call = germplasmGetCall(queryParams);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for germplasmPost
     * @param body  (optional)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call germplasmPostCall(List<BrAPIGermplasmNewRequest> body) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/germplasm";

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Create new Germplasm entities on this server
     * Create new Germplasm entities on this server
     * @param body  (optional)

     * @return ApiResponse&lt;GermplasmListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIGermplasmListResponse> germplasmPost(List<BrAPIGermplasmNewRequest> body) throws ApiException {
        Call call = germplasmPostCall(body);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new Germplasm entities on this server (asynchronously)
     * Create new Germplasm entities on this server
     * @param body  (optional)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call germplasmPostAsync(List<BrAPIGermplasmNewRequest> body, final ApiCallback<BrAPIGermplasmListResponse> callback) throws ApiException {
        Call call = germplasmPostCall(body);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchGermplasmPost
     * @param body  (optional)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call searchGermplasmPostCall(BrAPIGermplasmSearchRequest body) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/search/germplasm";

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Submit a search request for Germplasm
     * Search for a set of germplasm based on some criteria  Addresses these needs   - General germplasm search mechanism that accepts POST for complex queries   - Possibility to search germplasm by more parameters than those allowed by the existing germplasm search   - Possibility to get MCPD details by PUID rather than dbId  See Search Services for additional implementation details.
     * @param body  (optional)

     * @return ApiResponse&lt;GermplasmListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIGermplasmListResponse> searchGermplasmPost(BrAPIGermplasmSearchRequest body) throws ApiException {
        Call call = searchGermplasmPostCall(body);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submit a search request for Germplasm (asynchronously)
     * Search for a set of germplasm based on some criteria  Addresses these needs   - General germplasm search mechanism that accepts POST for complex queries   - Possibility to search germplasm by more parameters than those allowed by the existing germplasm search   - Possibility to get MCPD details by PUID rather than dbId  See Search Services for additional implementation details.
     * @param body  (optional)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call searchGermplasmPostAsync(BrAPIGermplasmSearchRequest body, final ApiCallback<BrAPIGermplasmListResponse> callback) throws ApiException {
        Call call = searchGermplasmPostCall(body);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchGermplasmSearchResultsDbIdGet
     * @param searchResultsDbId Unique identifier which references the search results (required)
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call searchGermplasmSearchResultsDbIdGetCall(String searchResultsDbId, Integer page, Integer pageSize) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/search/germplasm/{searchResultsDbId}"
            .replaceAll("\\{" + "searchResultsDbId" + "\\}", apiClient.escapeString(searchResultsDbId.toString()));

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();
        if (page != null)
            apiClient.prepQueryParameter(localVarQueryParams, "page", page);
        if (pageSize != null)
            apiClient.prepQueryParameter(localVarQueryParams, "pageSize", pageSize);

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Get the results of a Germplasm search request
     * See Search Services for additional implementation details.  Addresses these needs:   1. General germplasm search mechanism that accepts POST for complex queries   2. possibility to search germplasm by more parameters than those allowed by the existing germplasm search   3. possibility to get MCPD details by PUID rather than dbId
     * @param searchResultsDbId Unique identifier which references the search results (required)
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)

     * @return ApiResponse&lt;GermplasmListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIGermplasmListResponse> searchGermplasmSearchResultsDbIdGet(String searchResultsDbId, Integer page, Integer pageSize) throws ApiException {
        Call call = searchGermplasmSearchResultsDbIdGetCall(searchResultsDbId, page, pageSize);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the results of a Germplasm search request (asynchronously)
     * See Search Services for additional implementation details.  Addresses these needs:   1. General germplasm search mechanism that accepts POST for complex queries   2. possibility to search germplasm by more parameters than those allowed by the existing germplasm search   3. possibility to get MCPD details by PUID rather than dbId
     * @param searchResultsDbId Unique identifier which references the search results (required)
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call searchGermplasmSearchResultsDbIdGetAsync(String searchResultsDbId, Integer page, Integer pageSize, final ApiCallback<BrAPIGermplasmListResponse> callback) throws ApiException {
        Call call = searchGermplasmSearchResultsDbIdGetCall(searchResultsDbId, page, pageSize);
        Type localVarReturnType = new TypeToken<BrAPIGermplasmListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

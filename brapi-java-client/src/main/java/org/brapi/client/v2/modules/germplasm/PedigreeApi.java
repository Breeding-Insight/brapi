/*
 * BrAPI-Pedigree
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Pedigree</h2> <div class=\"brapi-section-description\">The BrAPI Pedigree module contains entities related to pedigree management. This includes Pedigree, Pedigree Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Pedigree\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Pedigree\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapipedigree.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.client.v2.modules.germplasm;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.apache.commons.lang3.tuple.Pair;
import org.brapi.client.v2.ApiCallback;
import org.brapi.client.v2.BrAPIClient;
import org.brapi.client.v2.ApiResponse;
import org.brapi.client.v2.Configuration;
import org.brapi.client.v2.model.exceptions.ApiException;
import org.brapi.client.v2.model.queryParams.germplasm.PedigreeQueryParams;
import org.brapi.v2.model.BrAPIAcceptedSearchResponse;
import org.brapi.v2.model.germ.response.BrAPIPedigreeListResponse;
import org.brapi.v2.model.germ.BrAPIPedigreeNode;
import org.brapi.v2.model.germ.request.BrAPIPedigreeSearchRequest;

import com.google.gson.reflect.TypeToken;

import okhttp3.Call;

public class PedigreeApi {
    private BrAPIClient apiClient;

    public PedigreeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PedigreeApi(BrAPIClient apiClient) {
        this.apiClient = apiClient;
    }

    public BrAPIClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(BrAPIClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for pedigreePedigreeDbIdPut
     * @param pedigreeDbId The internal id of the pedigree (required)
     * @param body  (optional)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call pedigreePutCall(Map<String, BrAPIPedigreeNode> body) throws ApiException {
        if(body == null) {
            throw new IllegalArgumentException("body cannot be null"); 
        }
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pedigree";

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Update the details of an existing Pedigree
     * Pedigree Details by pedigreeDbId was merged with Pedigree Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].
     * @param pedigreeDbId The internal id of the pedigree (required)
     * @param body  (optional)

     * @return ApiResponse&lt;PedigreeSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIPedigreeListResponse> pedigreePut(Map<String, BrAPIPedigreeNode> body) throws ApiException {
        Call call = pedigreePutCall(body);
        Type localVarReturnType = new TypeToken<BrAPIPedigreeListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the details of an existing Pedigree (asynchronously)
     * Pedigree Details by pedigreeDbId was merged with Pedigree Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].
     * @param pedigreeDbId The internal id of the pedigree (required)
     * @param body  (optional)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call pedigreePutAsync(Map<String, BrAPIPedigreeNode> body, final ApiCallback<BrAPIPedigreeListResponse> callback) throws ApiException {
        Call call = pedigreePutCall(body);
        Type localVarReturnType = new TypeToken<BrAPIPedigreeListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pedigreeGet
     * @param queryParams
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call pedigreeGetCall(PedigreeQueryParams queryParams) throws ApiException {
        if(queryParams == null) {
            throw new IllegalArgumentException("queryParams cannot be null"); 
        }
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pedigree";

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();
        if (queryParams.accessionNumber() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "accessionNumber", queryParams.accessionNumber());
        if (queryParams.collection() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "collection", queryParams.collection());
        if (queryParams.familyCode() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "familyCode", queryParams.familyCode());
        if (queryParams.binomialName() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "binomialName", queryParams.binomialName());
        if (queryParams.genus() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "genus", queryParams.genus());
        if (queryParams.species() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "species", queryParams.species());
        if (queryParams.synonym() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "synonym", queryParams.synonym());
        if (queryParams.includeParents() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "includeParents", queryParams.includeParents());
        if (queryParams.includeSiblings() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "includeSiblings", queryParams.includeSiblings());
        if (queryParams.includeProgeny() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "includeProgeny", queryParams.includeProgeny());
        if (queryParams.includeFullTree() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "includeFullTree", queryParams.includeFullTree());
        if (queryParams.pedigreeDepth() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "pedigreeDepth", queryParams.pedigreeDepth());
        if (queryParams.progenyDepth() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "progenyDepth", queryParams.progenyDepth());
        if (queryParams.commonCropName() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "commonCropName", queryParams.commonCropName());
        if (queryParams.programDbId() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "programDbId", queryParams.programDbId());
        if (queryParams.trialDbId() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "trialDbId", queryParams.trialDbId());
        if (queryParams.studyDbId() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "studyDbId", queryParams.studyDbId());
        if (queryParams.germplasmDbId() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "germplasmDbId", queryParams.germplasmDbId());
        if (queryParams.germplasmName() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "germplasmName", queryParams.germplasmName());        
        if (queryParams.germplasmPUI() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "germplasmPUI", queryParams.germplasmPUI());
        if (queryParams.externalReferenceId() != null) {
            apiClient.prepQueryParameter(localVarQueryParams, "externalReferenceId", queryParams.externalReferenceId());
            apiClient.prepQueryParameter(localVarQueryParams, "externalReferenceID", queryParams.externalReferenceId());
        }
        if (queryParams.externalReferenceSource() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "externalReferenceSource", queryParams.externalReferenceSource());
        if (queryParams.page() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "page", queryParams.page());
        if (queryParams.pageSize() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "pageSize", queryParams.pageSize());

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Get a filtered list of Pedigree
     * Addresses these needs  - General pedigree search mechanism that accepts POST for complex queries   - Possibility to search pedigree by more parameters than those allowed by the existing pedigree search   - Possibility to get MCPD details by PUID rather than dbId
     * @param queryParams
     * @return ApiResponse&lt;PedigreeListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIPedigreeListResponse> pedigreeGet(PedigreeQueryParams queryParams) throws ApiException {
        Call call = pedigreeGetCall(queryParams);
        Type localVarReturnType = new TypeToken<BrAPIPedigreeListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a filtered list of Pedigree (asynchronously)
     * Addresses these needs  - General pedigree search mechanism that accepts POST for complex queries   - Possibility to search pedigree by more parameters than those allowed by the existing pedigree search   - Possibility to get MCPD details by PUID rather than dbId
     * @param queryParams
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call pedigreeGetAsync(PedigreeQueryParams queryParams, final ApiCallback<BrAPIPedigreeListResponse> callback) throws ApiException {
        Call call = pedigreeGetCall(queryParams);
        Type localVarReturnType = new TypeToken<BrAPIPedigreeListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pedigreePost
     * @param body  (optional)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call pedigreePostCall(List<BrAPIPedigreeNode> body) throws ApiException {
        if(body == null) {
            throw new IllegalArgumentException("body cannot be null"); 
        }
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pedigree";

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Create new Pedigree entities on this server
     * Create new Pedigree entities on this server
     * @param body  (optional)

     * @return ApiResponse&lt;PedigreeListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIPedigreeListResponse> pedigreePost(List<BrAPIPedigreeNode> body) throws ApiException {
        Call call = pedigreePostCall(body);
        Type localVarReturnType = new TypeToken<BrAPIPedigreeListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new Pedigree entities on this server (asynchronously)
     * Create new Pedigree entities on this server
     * @param body  (optional)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call pedigreePostAsync(List<BrAPIPedigreeNode> body, final ApiCallback<BrAPIPedigreeListResponse> callback) throws ApiException {
        Call call = pedigreePostCall(body);
        Type localVarReturnType = new TypeToken<BrAPIPedigreeListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchPedigreePost
     * @param body  (optional)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call searchPedigreePostCall(BrAPIPedigreeSearchRequest body) throws ApiException {
        if(body == null) {
            throw new IllegalArgumentException("body cannot be null"); 
        }
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/search/pedigree";

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Submit a search request for Pedigree
     * Search for a set of pedigree based on some criteria  Addresses these needs   - General pedigree search mechanism that accepts POST for complex queries   - Possibility to search pedigree by more parameters than those allowed by the existing pedigree search   - Possibility to get MCPD details by PUID rather than dbId  See Search Services for additional implementation details.
     * @param body  (optional)

     * @return ApiResponse&lt;PedigreeListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Pair<Optional<BrAPIPedigreeListResponse>, Optional<BrAPIAcceptedSearchResponse>>> searchPedigreePost(BrAPIPedigreeSearchRequest body) throws ApiException {
        Call call = searchPedigreePostCall(body);
        Type localVarReturnType = new TypeToken<BrAPIPedigreeListResponse>(){}.getType();
        return apiClient.executeSearch(call, localVarReturnType);
    }

    /**
     * Submit a search request for Pedigree (asynchronously)
     * Search for a set of pedigree based on some criteria  Addresses these needs   - General pedigree search mechanism that accepts POST for complex queries   - Possibility to search pedigree by more parameters than those allowed by the existing pedigree search   - Possibility to get MCPD details by PUID rather than dbId  See Search Services for additional implementation details.
     * @param body  (optional)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call searchPedigreePostAsync(BrAPIPedigreeSearchRequest body, final ApiCallback<BrAPIPedigreeListResponse> callback) throws ApiException {
        Call call = searchPedigreePostCall(body);
        Type localVarReturnType = new TypeToken<BrAPIPedigreeListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchPedigreeSearchResultsDbIdGet
     * @param searchResultsDbId Unique identifier which references the search results (required)
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call searchPedigreeSearchResultsDbIdGetCall(String searchResultsDbId, Integer page, Integer pageSize) throws ApiException {
        if(searchResultsDbId == null) {
            throw new IllegalArgumentException("searchResultsDbId cannot be null"); 
        }
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/search/pedigree/{searchResultsDbId}"
            .replaceAll("\\{" + "searchResultsDbId" + "\\}", apiClient.escapeString(searchResultsDbId));

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();
        if (page != null)
            apiClient.prepQueryParameter(localVarQueryParams, "page", page);
        if (pageSize != null)
            apiClient.prepQueryParameter(localVarQueryParams, "pageSize", pageSize);

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Get the results of a Pedigree search request
     * See Search Services for additional implementation details.  Addresses these needs:   1. General pedigree search mechanism that accepts POST for complex queries   2. possibility to search pedigree by more parameters than those allowed by the existing pedigree search   3. possibility to get MCPD details by PUID rather than dbId
     * @param searchResultsDbId Unique identifier which references the search results (required)
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)

     * @return ApiResponse&lt;PedigreeListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Pair<Optional<BrAPIPedigreeListResponse>, Optional<BrAPIAcceptedSearchResponse>>> searchPedigreeSearchResultsDbIdGet(String searchResultsDbId, Integer page, Integer pageSize) throws ApiException {
        Call call = searchPedigreeSearchResultsDbIdGetCall(searchResultsDbId, page, pageSize);
        Type localVarReturnType = new TypeToken<BrAPIPedigreeListResponse>(){}.getType();
        return apiClient.executeSearch(call, localVarReturnType);
    }

    /**
     * Get the results of a Pedigree search request (asynchronously)
     * See Search Services for additional implementation details.  Addresses these needs:   1. General pedigree search mechanism that accepts POST for complex queries   2. possibility to search pedigree by more parameters than those allowed by the existing pedigree search   3. possibility to get MCPD details by PUID rather than dbId
     * @param searchResultsDbId Unique identifier which references the search results (required)
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call searchPedigreeSearchResultsDbIdGetAsync(String searchResultsDbId, Integer page, Integer pageSize, final ApiCallback<BrAPIPedigreeListResponse> callback) throws ApiException {
        Call call = searchPedigreeSearchResultsDbIdGetCall(searchResultsDbId, page, pageSize);
        Type localVarReturnType = new TypeToken<BrAPIPedigreeListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

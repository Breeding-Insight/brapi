/*
 * BrAPI-Core
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.client.v2;

import com.google.gson.*;
import com.google.gson.reflect.TypeToken;
import okhttp3.*;
import okhttp3.internal.http.HttpMethod;
import okio.BufferedSink;
import okio.Okio;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

import javax.net.ssl.*;

import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.brapi.client.v2.auth.Authentication;
import org.brapi.client.v2.auth.OAuth;
import org.brapi.client.v2.model.exceptions.ApiException;
import org.brapi.v2.model.BrAPIAcceptedSearchResponse;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Type;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.text.DateFormat;
import java.util.*;
import java.util.Map.Entry;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class BrAPIClient {

	private String basePath;
	private final boolean debugging = false;
	private final Map<String, String> defaultHeaderMap = new HashMap<String, String>();
	private String tempFolderPath = null;

	private Map<String, Authentication> authentications;

	private DateFormat dateFormat;
	private static final int DEFAULT_TIMEOUT=10000;

	private InputStream sslCaCert;
	private boolean verifyingSsl;
	private KeyManager[] keyManagers;

	private OkHttpClient httpClient;
	private JSON json;

	public BrAPIClient() {
		setBasePath("");
		init(DEFAULT_TIMEOUT);
	}

	public BrAPIClient(String basePath) {
		setBasePath(basePath);
		init(DEFAULT_TIMEOUT);
	}

	public BrAPIClient(String basePath, int timeout) {
		setBasePath(basePath);
		init(timeout);
	}
	
	private void init(int timeout) {
		httpClient = new OkHttpClient.Builder()
				.connectTimeout(timeout, TimeUnit.MILLISECONDS)
				.readTimeout(timeout, TimeUnit.MILLISECONDS)
				.writeTimeout(timeout, TimeUnit.MILLISECONDS)
				.build();
		verifyingSsl = true;
		json = new JSON();

		// Set default User-Agent.
		setUserAgent("brapi-java-client/2.0");
		// Setup authentications (key: authentication name, value: authentication).
		authentications = new HashMap<String, Authentication>();
		authentications.put("AuthorizationToken", new OAuth());
		// Prevent the authentications from being modified.
		authentications = Collections.unmodifiableMap(authentications);
	}

	/**
	 * Get base path
	 *
	 * @return Base path
	 */
	public String getBasePath() {
		return basePath;
	}

	/**
	 * Set base path
	 *
	 * @param basePath Base path of the URL (e.g
	 *                 https://test-server.brapi.org/brapi/v2
	 * @return An instance of BrAPIClient
	 */
	public BrAPIClient setBasePath(String basePath) {

		if(basePath.endsWith("/")) {
			basePath = basePath.substring(0, basePath.length()-1);
		}

		if(!basePath.endsWith("/brapi/v2")) {
			basePath += "/brapi/v2";
		} else if(basePath.endsWith("/brapi")) {
			basePath += "/v2";
		}

		this.basePath = basePath;

		return this;
	}

	/**
	 * Get HTTP client
	 *
	 * @return An instance of OkHttpClient
	 */
	public OkHttpClient getHttpClient() {
		return httpClient;
	}

	/**
	 * Set HTTP client
	 *
	 * @param httpClient An instance of OkHttpClient
	 * @return Api Client
	 */
	public BrAPIClient setHttpClient(OkHttpClient httpClient) {
		this.httpClient = httpClient;
		return this;
	}

	/**
	 * Get JSON
	 *
	 * @return JSON object
	 */
	public JSON getJSON() {
		return json;
	}

	/**
	 * Set JSON
	 *
	 * @param json JSON object
	 * @return Api client
	 */
	public BrAPIClient setJSON(JSON json) {
		this.json = json;
		return this;
	}

	/**
	 * True if isVerifyingSsl flag is on
	 *
	 * @return True if isVerifySsl flag is on
	 */
	public boolean isVerifyingSsl() {
		return verifyingSsl;
	}

	/**
	 * Configure whether to verify certificate and hostname when making https
	 * requests. Default to true. NOTE: Do NOT set to false in production code,
	 * otherwise you would face multiple types of cryptographic attacks.
	 *
	 * @param verifyingSsl True to verify TLS/SSL connection
	 * @return ApiClient
	 */
	public BrAPIClient setVerifyingSsl(boolean verifyingSsl) {
		this.verifyingSsl = verifyingSsl;
		applySslSettings();
		return this;
	}

	/**
	 * Get SSL CA cert.
	 *
	 * @return Input stream to the SSL CA cert
	 */
	public InputStream getSslCaCert() {
		return sslCaCert;
	}

	/**
	 * Configure the CA certificate to be trusted when making https requests. Use
	 * null to reset to default.
	 *
	 * @param sslCaCert input stream for SSL CA cert
	 * @return ApiClient
	 */
	public BrAPIClient setSslCaCert(InputStream sslCaCert) {
		this.sslCaCert = sslCaCert;
		applySslSettings();
		return this;
	}

	public KeyManager[] getKeyManagers() {
		return keyManagers;
	}

	/**
	 * Configure client keys to use for authorization in an SSL session. Use null to
	 * reset to default.
	 *
	 * @param managers The KeyManagers to use
	 * @return ApiClient
	 */
	public BrAPIClient setKeyManagers(KeyManager[] managers) {
		this.keyManagers = managers;
		applySslSettings();
		return this;
	}

	public DateFormat getDateFormat() {
		return dateFormat;
	}

	public BrAPIClient setDateFormat(DateFormat dateFormat) {
		this.json.setDateFormat(dateFormat);
		return this;
	}

	public BrAPIClient setSqlDateFormat(DateFormat dateFormat) {
		this.json.setSqlDateFormat(dateFormat);
		return this;
	}

	public BrAPIClient setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
		this.json.setOffsetDateTimeFormat(dateFormat);
		return this;
	}

	public BrAPIClient setLocalDateFormat(DateTimeFormatter dateFormat) {
		this.json.setLocalDateFormat(dateFormat);
		return this;
	}

	public BrAPIClient setLenientOnJson(boolean lenientOnJson) {
		this.json.setLenientOnJson(lenientOnJson);
		return this;
	}

	/**
	 * Get authentications (key: authentication name, value: authentication).
	 *
	 * @return Map of authentication objects
	 */
	public Map<String, Authentication> getAuthentications() {
		return authentications;
	}

	/**
	 * Get authentication for the given name.
	 *
	 * @param authName The authentication name
	 * @return The authentication, null if not found
	 */
	public Authentication getAuthentication(String authName) {
		return authentications.get(authName);
	}
	
    /**
     * Executes a user defined function to fetch an auth token from the BrAPI service, and store it in the {@link BrAPIClient}
     * @param authHandler User defined function to retrieve an auth token
     * @return true if auth succeeded, false otherwise
     * @throws ApiException
     */
    public boolean authenticate(Function<Void, String> authHandler) throws ApiException {
        Optional<String> authToken = Optional.ofNullable(authHandler.apply(null));
        if(authToken.isPresent()) {
        	((OAuth) getAuthentication("AuthorizationToken")).setAccessToken(authToken.get());
            return true;
        } else {
            return false;
        }
    }

	/**
	 * Set the User-Agent header's value (by adding to the default header map).
	 *
	 * @param userAgent HTTP request's user agent
	 * @return ApiClient
	 */
	public BrAPIClient setUserAgent(String userAgent) {
		addDefaultHeader("User-Agent", userAgent);
		return this;
	}

	/**
	 * Add a default header.
	 *
	 * @param key   The header's key
	 * @param value The header's value
	 * @return ApiClient
	 */
	public BrAPIClient addDefaultHeader(String key, String value) {
		defaultHeaderMap.put(key, value);
		return this;
	}

	/**
	 * Check that whether debugging is enabled for this API client.
	 *
	 * @return True if debugging is enabled, false otherwise.
	 */
	public boolean isDebugging() {
		return debugging;
	}


	/**
	 * The path of temporary folder used to store downloaded files from endpoints
	 * with file response. The default value is <code>null</code>, i.e. using the
	 * system's default tempopary folder.
	 *
	 * @see <a href=
	 *      "https://docs.oracle.com/javase/7/docs/api/java/io/File.html#createTempFile">createTempFile</a>
	 * @return Temporary folder path
	 */
	public String getTempFolderPath() {
		return tempFolderPath;
	}

	/**
	 * Set the temporary folder path (for downloading files)
	 *
	 * @param tempFolderPath Temporary folder path
	 * @return ApiClient
	 */
	public BrAPIClient setTempFolderPath(String tempFolderPath) {
		this.tempFolderPath = tempFolderPath;
		return this;
	}

	/**
	 * Get connection timeout (in milliseconds).
	 *
	 * @return Timeout in milliseconds
	 */
	public int getConnectTimeout() {
		return httpClient.connectTimeoutMillis();
	}

	/**
	 * Sets the connect timeout (in milliseconds). A value of 0 means no timeout,
	 * otherwise values must be between 1 and
	 *
	 * @param connectionTimeout connection timeout in milliseconds
	 * @return Api client
	 */
	public BrAPIClient setConnectTimeout(int connectionTimeout) {
//        httpClient.setConnectTimeout(connectionTimeout, TimeUnit.MILLISECONDS);
		return this;
	}

	/**
	 * Get read timeout (in milliseconds).
	 *
	 * @return Timeout in milliseconds
	 */
	public int getReadTimeout() {
		return httpClient.readTimeoutMillis();
	}

	/**
	 * Sets the read timeout (in milliseconds). A value of 0 means no timeout,
	 * otherwise values must be between 1 and {@link Integer#MAX_VALUE}.
	 *
	 * @param readTimeout read timeout in milliseconds
	 * @return Api client
	 */
	public BrAPIClient setReadTimeout(int readTimeout) {
//        httpClient.setReadTimeout(readTimeout, TimeUnit.MILLISECONDS);
		return this;
	}

	/**
	 * Get write timeout (in milliseconds).
	 *
	 * @return Timeout in milliseconds
	 */
	public int getWriteTimeout() {
		return httpClient.writeTimeoutMillis();
	}

	/**
	 * Sets the write timeout (in milliseconds). A value of 0 means no timeout,
	 * otherwise values must be between 1 and {@link Integer#MAX_VALUE}.
	 *
	 * @param writeTimeout connection timeout in milliseconds
	 * @return Api client
	 */
	public BrAPIClient setWriteTimeout(int writeTimeout) {
//        httpClient.setWriteTimeout(writeTimeout, TimeUnit.MILLISECONDS);
		return this;
	}

	/**
	 * Format the given parameter object into string.
	 *
	 * @param param Parameter
	 * @return String representation of the parameter
	 */
	public String parameterToString(Object param) {
		if (param == null) {
			return "";
		} else if (param instanceof Date || param instanceof OffsetDateTime || param instanceof LocalDate) {
			// Serialize to json string and remove the " enclosing characters
			String jsonStr = json.serialize(param);
			return jsonStr.substring(1, jsonStr.length() - 1);
		} else if (param instanceof Collection) {
			StringBuilder b = new StringBuilder();
			for (Object o : (Collection) param) {
				if (b.length() > 0) {
					b.append(",");
				}
				b.append(o);
			}
			return b.toString();
		} else {
			return String.valueOf(param);
		}
	}

	/**
	 * Formats the specified query parameter to a list containing a single
	 * {@code Pair} object.
	 *
	 * Note that {@code value} must not be a collection.
	 *
	 * @param name  The name of the parameter.
	 * @param value The value of the parameter.
	 * @return A list containing a single {@code Pair} object.
	 */
	public void prepQueryParameter(Map<String, String> params, String name, Object value) {
		// preconditions
		if (name == null || name.isEmpty() || value == null || value instanceof Collection)
			return;

		params.put(name, parameterToString(value));
	}

	/**
	 * Formats the specified collection query parameters to a list of {@code Pair}
	 * objects.
	 *
	 * Note that the values of each of the returned Pair objects are
	 * percent-encoded.
	 *
	 * @param collectionFormat The collection format of the parameter.
	 * @param name             The name of the parameter.
	 * @param value            The value of the parameter.
	 * @return A list of {@code Pair} objects.
	 */
	public List<Pair<String, String>> parameterToPairs(String collectionFormat, String name, Collection value) {
		List<Pair<String, String>> params = new ArrayList<>();

		// preconditions
		if (name == null || name.isEmpty() || value == null || value.isEmpty()) {
			return params;
		}

		// create the params based on the collection format
		if ("multi".equals(collectionFormat)) {
			for (Object item : value) {
				params.add(new ImmutablePair<>(name, escapeString(parameterToString(item))));
			}
			return params;
		}

		// collectionFormat is assumed to be "csv" by default
		String delimiter = ",";

		// escape all delimiters except commas, which are URI reserved
		// characters
		if ("ssv".equals(collectionFormat)) {
			delimiter = escapeString(" ");
		} else if ("tsv".equals(collectionFormat)) {
			delimiter = escapeString("\t");
		} else if ("pipes".equals(collectionFormat)) {
			delimiter = escapeString("|");
		}

		StringBuilder sb = new StringBuilder();
		for (Object item : value) {
			sb.append(delimiter);
			sb.append(escapeString(parameterToString(item)));
		}

		params.add(new ImmutablePair<>(name, sb.substring(delimiter.length())));

		return params;
	}

	/**
	 * Sanitize filename by removing path. e.g. ../../sun.gif becomes sun.gif
	 *
	 * @param filename The filename to be sanitized
	 * @return The sanitized filename
	 */
	public String sanitizeFilename(String filename) {
		return filename.replaceAll(".*[/\\\\]", "");
	}

	/**
	 * Check if the given MIME is a JSON MIME. JSON MIME examples: application/json
	 * application/json; charset=UTF8 APPLICATION/JSON application/vnd.company+json
	 * "* / *" is also default to JSON
	 * 
	 * @param mime MIME (Multipurpose Internet Mail Extensions)
	 * @return True if the given MIME is JSON, false otherwise.
	 */
	public boolean isJsonMime(String mime) {
		String jsonMime = "(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$";
		return mime != null && (mime.matches(jsonMime) || mime.equals("*/*"));
	}

	/**
	 * Select the Accept header's value from the given accepts array: if JSON exists
	 * in the given array, use it; otherwise use all of them (joining into a string)
	 *
	 * @param accepts The accepts array to select from
	 * @return The Accept header to use. If the given array is empty, null will be
	 *         returned (not to set the Accept header explicitly).
	 */
	public String selectHeaderAccept(String[] accepts) {
		if (accepts.length == 0) {
			return null;
		}
		for (String accept : accepts) {
			if (isJsonMime(accept)) {
				return accept;
			}
		}
		return String.join(",", accepts);
	}

	/**
	 * Select the Content-Type header's value from the given array: if JSON exists
	 * in the given array, use it; otherwise use the first one of the array.
	 *
	 * @param contentTypes The Content-Type array to select from
	 * @return The Content-Type header to use. If the given array is empty, or
	 *         matches "any", JSON will be used.
	 */
	public String selectHeaderContentType(String[] contentTypes) {
		if (contentTypes.length == 0 || contentTypes[0].equals("*/*")) {
			return "application/json";
		}
		for (String contentType : contentTypes) {
			if (isJsonMime(contentType)) {
				return contentType;
			}
		}
		return contentTypes[0];
	}

	/**
	 * Escape the given string to be used as URL query value.
	 *
	 * @param str String to be escaped
	 * @return Escaped string
	 */
	public String escapeString(String str) {
		try {
			return URLEncoder.encode(str, "utf8").replaceAll("\\+", "%20");
		} catch (UnsupportedEncodingException e) {
			return str;
		}
	}

	/**
	 * Deserialize response body to Java object, according to the return type and
	 * the Content-Type response header.
	 *
	 * @param <T>        Type
	 * @param response   HTTP response
	 * @param returnType The type of the Java object
	 * @return The deserialized Java object
	 * @throws ApiException If fail to deserialize response body, i.e. cannot read
	 *                      response body or the Content-Type of the response is not
	 *                      supported.
	 */
	@SuppressWarnings("unchecked")
	public <T> T deserialize(Response response, Type returnType) throws ApiException {
		if (response == null || returnType == null) {
			return null;
		}

		if ("byte[]".equals(returnType.toString())) {
			// Handle binary response (byte array).
			try {
				return (T) response.body().bytes();
			} catch (IOException e) {
				throw new ApiException(e);
			}
		} else if (returnType.equals(File.class)) {
			// Handle file downloading.
			return (T) downloadFileFromResponse(response);
		}

		String respBody;
		try {
			if (response.body() != null)
				respBody = response.body().string();
			else
				respBody = null;
		} catch (IOException e) {
			throw new ApiException(e);
		}

		if (respBody == null || "".equals(respBody)) {
			return null;
		}

		String contentType = response.headers().get("Content-Type");
		if (contentType == null) {
			// ensuring a default content type
			contentType = "application/json";
		}
		if (isJsonMime(contentType)) {
			return json.deserialize(respBody, returnType);
		} else if (returnType.equals(String.class)) {
			// Expecting string, return the raw response body.
			return (T) respBody;
		} else {
			throw new ApiException("Content type \"" + contentType + "\" is not supported for type: " + returnType,
					response.code(), response.headers().toMultimap(), respBody);
		}
	}

	/**
	 * Serialize the given Java object into request body according to the object's
	 * class and the request Content-Type.
	 *
	 * @param obj         The Java object
	 * @param contentType The request Content-Type
	 * @return The serialized request body
	 * @throws ApiException If fail to serialize the given object
	 */
	public RequestBody serialize(Object obj, String contentType) throws ApiException {
		if (obj instanceof byte[]) {
			// Binary (byte array) body parameter support.
			return RequestBody.create(MediaType.parse(contentType), (byte[]) obj);
		} else if (obj instanceof File) {
			// File body parameter support.
			return RequestBody.create(MediaType.parse(contentType), (File) obj);
		} else if (isJsonMime(contentType)) {
			String content;
			if (obj != null) {
				content = json.serialize(obj);
			} else {
				content = null;
			}
			return RequestBody.create(MediaType.parse(contentType), content);
		} else {
			throw new ApiException("Content type \"" + contentType + "\" is not supported");
		}
	}

	/**
	 * Download file from the given response.
	 *
	 * @param response An instance of the Response object
	 * @throws ApiException If fail to read file content from response and write to
	 *                      disk
	 * @return Downloaded file
	 */
	public File downloadFileFromResponse(Response response) throws ApiException {
		try {
			File file = prepareDownloadFile(response);
			BufferedSink sink = Okio.buffer(Okio.sink(file));
			sink.writeAll(response.body().source());
			sink.close();
			return file;
		} catch (IOException e) {
			throw new ApiException(e);
		}
	}

	/**
	 * Prepare file for download
	 *
	 * @param response An instance of the Response object
	 * @throws IOException If fail to prepare file for download
	 * @return Prepared file for the download
	 */
	public File prepareDownloadFile(Response response) throws IOException {
		String filename = null;
		String contentDisposition = response.header("Content-Disposition");
		if (contentDisposition != null && !"".equals(contentDisposition)) {
			// Get filename from the Content-Disposition header.
			Pattern pattern = Pattern.compile("filename=['\"]?([^'\"\\s]+)['\"]?");
			Matcher matcher = pattern.matcher(contentDisposition);
			if (matcher.find()) {
				filename = sanitizeFilename(matcher.group(1));
			}
		}

		String prefix = null;
		String suffix = null;
		if (filename == null) {
			prefix = "download-";
			suffix = "";
		} else {
			int pos = filename.lastIndexOf(".");
			if (pos == -1) {
				prefix = filename + "-";
			} else {
				prefix = filename.substring(0, pos) + "-";
				suffix = filename.substring(pos);
			}
			// File.createTempFile requires the prefix to be at least three characters long
			if (prefix.length() < 3)
				prefix = "download-";
		}

		if (tempFolderPath == null)
			return File.createTempFile(prefix, suffix);
		else
			return File.createTempFile(prefix, suffix, new File(tempFolderPath));
	}

	/**
	 * {@link #execute(Call, Type)}
	 *
	 * @param <T>  Type
	 * @param call An instance of the Call object
	 * @throws ApiException If fail to execute the call
	 * @return ApiResponse&lt;T&gt;
	 */
	public <T> ApiResponse<T> execute(Call call) throws ApiException {
		return execute(call, null);
	}

	/**
	 * Execute HTTP call and deserialize the HTTP response body into the given
	 * return type.
	 *
	 * @param returnType The return type used to deserialize HTTP response body
	 * @param <T>        The return type corresponding to (same with) returnType
	 * @param call       Call
	 * @return ApiResponse object containing response status, headers and data,
	 *         which is a Java object deserialized from response body and would be
	 *         null when returnType is null.
	 * @throws ApiException If fail to execute the call
	 */
	public <T> ApiResponse<T> execute(Call call, Type returnType) throws ApiException {
		try {
			Response response = call.execute();
			T data = handleResponse(response, returnType);
			return new ApiResponse<T>(response.code(), response.headers().toMultimap(), data);
		} catch (IOException e) {
			throw new ApiException(e);
		}
	}

	/**
	 * Execute HTTP call and deserialize the HTTP response body into the given
	 * return type.
	 *
	 * @param returnType The return type used to deserialize HTTP response body
	 * @param <T>        The return type corresponding to (same with) returnType
	 * @param call       Call
	 * @return ApiResponse object containing response status, headers and data,
	 *         which is a Java object deserialized from response body and would be
	 *         null when returnType is null.
	 * @throws ApiException If fail to execute the call
	 */
	public <T> ApiResponse<Pair<Optional<T>, Optional<BrAPIAcceptedSearchResponse>>> executeSearch(Call call, Type returnType) throws ApiException {
		// Do a normal call
		Type jsonReturnType = new TypeToken<JsonObject>(){}.getType();
		ApiResponse<JsonObject> searchResponse = execute(call, jsonReturnType);

		// Check our response to construct the Pair
		Pair<Optional<T>, Optional<BrAPIAcceptedSearchResponse>> result;
		if (searchResponse.getBody() != null) {
			JsonObject searchBody = searchResponse.getBody();
			JsonObject searchResult = searchBody.getAsJsonObject("result");
			try {
				if (searchResult != null && searchResult.get("searchResultsDbId") != null) {
					// Parse into a BrAPI Accepted Search Response
					BrAPIAcceptedSearchResponse searchResultObject = json.getGson().fromJson(searchBody, BrAPIAcceptedSearchResponse.class);
					result = new ImmutablePair<>(Optional.empty(), Optional.of(searchResultObject));
				} else {
					// Parse into the actual response object
					T listResponse = json.getGson().fromJson(searchBody, returnType);
					result = new ImmutablePair<>(Optional.of(listResponse), Optional.empty());
				}
			} catch (JsonSyntaxException e){
				throw new ApiException(e);
			}

		} else {
			throw new ApiException("Search body was not returned:" );
		}

		return new ApiResponse<>(searchResponse.getStatusCode(), searchResponse.getHeaders(), result);
	}

	/**
	 * {@link #executeAsync(Call, Type, ApiCallback)}
	 *
	 * @param <T>      Type
	 * @param call     An instance of the Call object
	 * @param callback ApiCallback&lt;T&gt;
	 */
	public <T> void executeAsync(Call call, ApiCallback<T> callback) {
		executeAsync(call, null, callback);
	}

	/**
	 * Execute HTTP call asynchronously.
	 *
	 * @see #execute(Call, Type)
	 * @param <T>        Type
	 * @param call       The callback to be executed when the API call finishes
	 * @param returnType Return type
	 * @param callback   ApiCallback
	 */
	@SuppressWarnings("unchecked")
	public <T> void executeAsync(Call call, final Type returnType, final ApiCallback<T> callback) {
		call.enqueue(new Callback() {
			@Override
			public void onFailure(Call request, IOException e) {
				callback.onFailure(new ApiException(e), 0, null);
			}

			@Override
			public void onResponse(Call request, Response response) throws IOException {
				T result;
				try {
					result = handleResponse(response, returnType);
				} catch (ApiException e) {
					callback.onFailure(e, response.code(), response.headers().toMultimap());
					return;
				}catch (Exception e) {
					callback.onFailure(new ApiException(e), response.code(), response.headers().toMultimap());
					return;
				}
				callback.onSuccess(result, response.code(), response.headers().toMultimap());
			}
		});
	}

	/**
	 * Handle the given response, return the deserialized object when the response
	 * is successful.
	 *
	 * @param <T>        Type
	 * @param response   Response
	 * @param returnType Return type
	 * @throws ApiException If the response has a unsuccessful status code or fail
	 *                      to deserialize the response body
	 * @return Type
	 */
	public <T> T handleResponse(Response response, Type returnType) throws ApiException, IOException {
		if (response.isSuccessful()) {
			if (returnType == null || response.code() == 204) {
				// returning null if the returnType is not defined,
				// or the status code is 204 (No Content)
				if (response.body() != null) {
					response.body().close();
				}
				return null;
			} else {
				return deserialize(response, returnType);
			}
		} else {
			String respBody = null;
			if (response.body() != null) {
				try {
					respBody = response.body().string();
				} catch (IOException e) {
					throw new ApiException(response.message(), e, response.code(), response.headers().toMultimap());
				}
			}
			throw new ApiException(response.message(), response.code(), response.headers().toMultimap(), respBody);
		}
	}

	/**
	 * Build HTTP call with the given options.
	 *
	 * @param path                    The sub-path of the HTTP URL
	 * @param method                  The request method, one of "GET", "HEAD",
	 *                                "OPTIONS", "POST", "PUT", "PATCH" and "DELETE"
	 * @param queryParams             The query parameters
	 * @param collectionQueryParams   The collection query parameters
	 * @param body                    The request body object
	 * @param headerParams            The header parameters
	 * @param formParams              The form parameters
	 * @param authNames               The authentications to apply
	 * @return The HTTP call
	 * @throws ApiException If fail to serialize the request body object
	 */
	public Call buildCall(String path, String method, Map<String, String> queryParams, Map<String, String> collectionQueryParams,
			Object body, Map<String, String> headerParams, Map<String, Object> formParams, String[] authNames) throws ApiException {
		Request request = buildRequest(path, method, queryParams, collectionQueryParams, body, headerParams, formParams,
				authNames);

		return httpClient.newCall(request);
	}

	/**
	 * Build an HTTP request with the given options.
	 *
	 * @param path                    The sub-path of the HTTP URL
	 * @param method                  The request method, one of "GET", "HEAD",
	 *                                "OPTIONS", "POST", "PUT", "PATCH" and "DELETE"
	 * @param queryParams             The query parameters
	 * @param collectionQueryParams   The collection query parameters
	 * @param body                    The request body object
	 * @param headerParams            The header parameters
	 * @param formParams              The form parameters
	 * @param authNames               The authentications to apply
	 * @return The HTTP request
	 * @throws ApiException If fail to serialize the request body object
	 */
	public Request buildRequest(String path, String method, Map<String, String> queryParams, Map<String, String> collectionQueryParams,
			Object body, Map<String, String> headerParams, Map<String, Object> formParams, String[] authNames) throws ApiException {
		updateParamsForAuth(authNames, queryParams, headerParams);

		final String url = buildUrl(path, queryParams, collectionQueryParams);
		final Request.Builder reqBuilder = new Request.Builder().url(url);
		processHeaderParams(headerParams, reqBuilder);

		String contentType = headerParams.get("Content-Type");
		// ensuring a default content type
		if (contentType == null) {
			contentType = "application/json";
		}

		RequestBody reqBody;
		if (!HttpMethod.permitsRequestBody(method)) {
			reqBody = null;
		} else if ("application/x-www-form-urlencoded".equals(contentType)) {
//            reqBody = buildRequestBodyFormEncoding(formParams);
			reqBody = null;
		} else if ("multipart/form-data".equals(contentType)) {
//            reqBody = buildRequestBodyMultipart(formParams);
			reqBody = null;
		} else if (body == null) {
			if ("DELETE".equals(method)) {
				// allow calling DELETE without sending a request body
				reqBody = null;
			} else {
				// use an empty request body (for POST, PUT and PATCH)
				reqBody = RequestBody.create(MediaType.parse(contentType), "");
			}
		} else {
			reqBody = serialize(body, contentType);
		}

		Request request = reqBuilder.method(method, reqBody).build();

		return request;
	}

	/**
	 * Build full URL by concatenating base path, the given sub path and query
	 * parameters.
	 *
	 * @param path                  The sub path
	 * @param queryParams           The query parameters
	 * @param collectionQueryParams The collection query parameters
	 * @return The full URL
	 */
	public String buildUrl(String path, Map<String, String> queryParams, Map<String, String> collectionQueryParams) {
		final StringBuilder url = new StringBuilder();
		url.append(basePath).append(path);

		if (queryParams != null && !queryParams.isEmpty()) {
			// support (constant) query string in `path`, e.g. "/posts?draft=1"
			String prefix = path.contains("?") ? "&" : "?";
			for (Entry<String, String> param : queryParams.entrySet()) {
				if (param.getValue() != null) {
					if (prefix != null) {
						url.append(prefix);
						prefix = null;
					} else {
						url.append("&");
					}
					String value = parameterToString(param.getValue());
					url.append(escapeString(param.getKey())).append("=").append(escapeString(value));
				}
			}
		}

		if (collectionQueryParams != null && !collectionQueryParams.isEmpty()) {
			String prefix = url.toString().contains("?") ? "&" : "?";
			for (Entry<String, String> param  : collectionQueryParams.entrySet()) {
				if (param.getValue() != null) {
					if (prefix != null) {
						url.append(prefix);
						prefix = null;
					} else {
						url.append("&");
					}
					String value = parameterToString(param.getValue());
					// collection query parameter value already escaped as part of parameterToPairs
					url.append(escapeString(param.getKey())).append("=").append(value);
				}
			}
		}

		return url.toString();
	}

	/**
	 * Set header parameters to the request builder, including default headers.
	 *
	 * @param headerParams Header parameters in the ofrm of Map
	 * @param reqBuilder   Reqeust.Builder
	 */
	public void processHeaderParams(Map<String, String> headerParams, Request.Builder reqBuilder) {
		for (Entry<String, String> param : headerParams.entrySet()) {
			reqBuilder.header(param.getKey(), parameterToString(param.getValue()));
		}
		for (Entry<String, String> header : defaultHeaderMap.entrySet()) {
			if (!headerParams.containsKey(header.getKey())) {
				reqBuilder.header(header.getKey(), parameterToString(header.getValue()));
			}
		}
	}

	/**
	 * Update query and header parameters based on authentication settings.
	 *
	 * @param authNames    The authentications to apply
	 * @param queryParams  List of query parameters
	 * @param headerParams Map of header parameters
	 */
	public void updateParamsForAuth(String[] authNames, Map<String, String> queryParams, Map<String, String> headerParams) {
		for (String authName : authNames) {
			Authentication auth = authentications.get(authName);
			if (auth == null)
				throw new RuntimeException("Authentication undefined: " + authName);
			auth.applyToParams(queryParams, headerParams);
		}
	}

	/**
	 * Guess Content-Type header from the given file (defaults to
	 * "application/octet-stream").
	 *
	 * @param file The given file
	 * @return The guessed Content-Type
	 */
	public String guessContentTypeFromFile(File file) {
		String contentType = URLConnection.guessContentTypeFromName(file.getName());
		if (contentType == null) {
			return "application/octet-stream";
		} else {
			return contentType;
		}
	}

	/**
	 * Apply SSL related settings to httpClient according to the current values of
	 * verifyingSsl and sslCaCert.
	 */
	private void applySslSettings() {
		try {
			TrustManager[] trustManagers = null;
			HostnameVerifier hostnameVerifier = null;
			if (!verifyingSsl) {
				TrustManager trustAll = new X509TrustManager() {
					@Override
					public void checkClientTrusted(X509Certificate[] chain, String authType)
							throws CertificateException {
					}

					@Override
					public void checkServerTrusted(X509Certificate[] chain, String authType)
							throws CertificateException {
					}

					@Override
					public X509Certificate[] getAcceptedIssuers() {
						return null;
					}
				};
				SSLContext sslContext = SSLContext.getInstance("TLS");
				trustManagers = new TrustManager[] { trustAll };
				hostnameVerifier = new HostnameVerifier() {
					@Override
					public boolean verify(String hostname, SSLSession session) {
						return true;
					}
				};
			} else if (sslCaCert != null) {
				char[] password = null; // Any password will work.
				CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
				Collection<? extends Certificate> certificates = certificateFactory.generateCertificates(sslCaCert);
				if (certificates.isEmpty()) {
					throw new IllegalArgumentException("expected non-empty set of trusted certificates");
				}
				KeyStore caKeyStore = newEmptyKeyStore(password);
				int index = 0;
				for (Certificate certificate : certificates) {
					String certificateAlias = "ca" + index++;
					caKeyStore.setCertificateEntry(certificateAlias, certificate);
				}
				TrustManagerFactory trustManagerFactory = TrustManagerFactory
						.getInstance(TrustManagerFactory.getDefaultAlgorithm());
				trustManagerFactory.init(caKeyStore);
				trustManagers = trustManagerFactory.getTrustManagers();
			}

			if (keyManagers != null || trustManagers != null) {
				SSLContext sslContext = SSLContext.getInstance("TLS");
				sslContext.init(keyManagers, trustManagers, new SecureRandom());
//                httpClient.setSslSocketFactory(sslContext.getSocketFactory());
			} else {
//                httpClient.setSslSocketFactory(null);
			}
//            httpClient.setHostnameVerifier(hostnameVerifier);
		} catch (GeneralSecurityException e) {
			throw new RuntimeException(e);
		}
	}

	private KeyStore newEmptyKeyStore(char[] password) throws GeneralSecurityException {
		try {
			KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
			keyStore.load(null, password);
			return keyStore;
		} catch (IOException e) {
			throw new AssertionError(e);
		}
	}
}

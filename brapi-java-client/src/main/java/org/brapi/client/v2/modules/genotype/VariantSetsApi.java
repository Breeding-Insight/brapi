/*
 * BrAPI-Genotyping
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.client.v2.modules.genotype;

import com.google.gson.reflect.TypeToken;

import okhttp3.Call;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;

import org.brapi.client.v2.ApiCallback;
import org.brapi.client.v2.BrAPIClient;
import org.brapi.client.v2.ApiResponse;
import org.brapi.client.v2.Configuration;
import org.brapi.client.v2.model.exceptions.ApiException;
import org.brapi.client.v2.model.queryParams.genotype.GenotypeQueryParams;
import org.brapi.client.v2.model.queryParams.genotype.VariantSetQueryParams;
import org.brapi.v2.model.geno.response.BrAPICallSetsListResponse;
import org.brapi.v2.model.geno.response.BrAPICallsListResponse;
import org.brapi.v2.model.geno.response.BrAPIVariantSetResponse;
import org.brapi.v2.model.geno.request.BrAPIVariantSetsExtractRequest;
import org.brapi.v2.model.geno.response.BrAPIVariantSetsListResponse;
import org.brapi.v2.model.geno.request.BrAPIVariantSetsSearchRequest;
import org.brapi.v2.model.geno.response.BrAPIVariantsListResponse;

public class VariantSetsApi {
    private BrAPIClient apiClient;

    public VariantSetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VariantSetsApi(BrAPIClient apiClient) {
        this.apiClient = apiClient;
    }

    public BrAPIClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(BrAPIClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for searchVariantsetsPost
     * @param body Study Search request (optional)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call searchVariantsetsPostCall(BrAPIVariantSetsSearchRequest body) throws ApiException {
        if(body == null) {
            throw new IllegalArgumentException("body cannot be null"); 
        }
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/search/variantsets";

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Gets a list of &#x60;VariantSet&#x60; matching the search criteria.
     * Gets a list of &#x60;VariantSet&#x60; matching the search criteria.
     * @param body Study Search request (optional)

     * @return ApiResponse&lt;VariantSetsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIVariantSetsListResponse> searchVariantsetsPost(BrAPIVariantSetsSearchRequest body) throws ApiException {
        Call call = searchVariantsetsPostCall(body);
        Type localVarReturnType = new TypeToken<BrAPIVariantSetsListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of &#x60;VariantSet&#x60; matching the search criteria. (asynchronously)
     * Gets a list of &#x60;VariantSet&#x60; matching the search criteria.
     * @param body Study Search request (optional)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call searchVariantsetsPostAsync(BrAPIVariantSetsSearchRequest body, final ApiCallback<BrAPIVariantSetsListResponse> callback) throws ApiException {
        Call call = searchVariantsetsPostCall(body);
        Type localVarReturnType = new TypeToken<BrAPIVariantSetsListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchVariantsetsSearchResultsDbIdGet
     * @param searchResultsDbId Unique identifier which references the search results (required)
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call searchVariantsetsSearchResultsDbIdGetCall(String searchResultsDbId, Integer page, Integer pageSize) throws ApiException {
        if(searchResultsDbId == null) {
            throw new IllegalArgumentException("searchResultsDbId cannot be null"); 
        }
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/search/variantsets/{searchResultsDbId}"
            .replaceAll("\\{" + "searchResultsDbId" + "\\}", apiClient.escapeString(searchResultsDbId.toString()));

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();
        if (page != null)
            apiClient.prepQueryParameter(localVarQueryParams, "page", page);
        if (pageSize != null)
            apiClient.prepQueryParameter(localVarQueryParams, "pageSize", pageSize);

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Gets a list of &#x60;VariantSet&#x60; matching the search criteria.
     * Gets a list of &#x60;VariantSet&#x60; matching the search criteria.
     * @param searchResultsDbId Unique identifier which references the search results (required)
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)

     * @return ApiResponse&lt;VariantSetsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIVariantSetsListResponse> searchVariantsetsSearchResultsDbIdGet(String searchResultsDbId, Integer page, Integer pageSize) throws ApiException {
        Call call = searchVariantsetsSearchResultsDbIdGetCall(searchResultsDbId, page, pageSize);
        Type localVarReturnType = new TypeToken<BrAPIVariantSetsListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of &#x60;VariantSet&#x60; matching the search criteria. (asynchronously)
     * Gets a list of &#x60;VariantSet&#x60; matching the search criteria.
     * @param searchResultsDbId Unique identifier which references the search results (required)
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call searchVariantsetsSearchResultsDbIdGetAsync(String searchResultsDbId, Integer page, Integer pageSize, final ApiCallback<BrAPIVariantSetsListResponse> callback) throws ApiException {
        Call call = searchVariantsetsSearchResultsDbIdGetCall(searchResultsDbId, page, pageSize);
        Type localVarReturnType = new TypeToken<BrAPIVariantSetsListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for variantsetsExtractPost
     * @param body Study Search request (optional)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call variantsetsExtractPostCall(BrAPIVariantSetsExtractRequest body) throws ApiException {
        if(body == null) {
            throw new IllegalArgumentException("body cannot be null"); 
        }
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/variantsets/extract";

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Create new &#x60;VariantSet&#x60; based on search results
     * Will perform a search for &#x60;Calls&#x60; which match the search criteria in &#x60;variantSetsExtractRequest&#x60;. The results of the search will be used to create a new &#x60;VariantSet&#x60; on the server. The new &#x60;VariantSet&#x60; will be returned.
     * @param body Study Search request (optional)

     * @return ApiResponse&lt;VariantSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIVariantSetResponse> variantsetsExtractPost(BrAPIVariantSetsExtractRequest body) throws ApiException {
        Call call = variantsetsExtractPostCall(body);
        Type localVarReturnType = new TypeToken<BrAPIVariantSetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new &#x60;VariantSet&#x60; based on search results (asynchronously)
     * Will perform a search for &#x60;Calls&#x60; which match the search criteria in &#x60;variantSetsExtractRequest&#x60;. The results of the search will be used to create a new &#x60;VariantSet&#x60; on the server. The new &#x60;VariantSet&#x60; will be returned.
     * @param body Study Search request (optional)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call variantsetsExtractPostAsync(BrAPIVariantSetsExtractRequest body, final ApiCallback<BrAPIVariantSetResponse> callback) throws ApiException {
        Call call = variantsetsExtractPostCall(body);
        Type localVarReturnType = new TypeToken<BrAPIVariantSetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for variantsetsGet
     * @param queryParams
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call variantsetsGetCall(VariantSetQueryParams queryParams) throws ApiException {
        if(queryParams == null) {
            throw new IllegalArgumentException("queryParams cannot be null"); 
        }
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/variantsets";

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();
        if (queryParams.variantSetDbId() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "variantSetDbId", queryParams.variantSetDbId());
        if (queryParams.variantDbId() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "variantDbId", queryParams.variantDbId());
        if (queryParams.callSetDbId() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "callSetDbId", queryParams.callSetDbId());
        if (queryParams.studyDbId() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "studyDbId", queryParams.studyDbId());
        if (queryParams.studyName() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "studyName", queryParams.studyName());
        if (queryParams.page() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "page", queryParams.page());
        if (queryParams.pageSize() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "pageSize", queryParams.pageSize());

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Gets a filtered list of &#x60;VariantSets&#x60;.
     * Will return a filtered list of &#x60;VariantSet&#x60;.
     * @param queryParams
     * @return ApiResponse&lt;VariantSetsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIVariantSetsListResponse> variantsetsGet(VariantSetQueryParams queryParams) throws ApiException {
        Call call = variantsetsGetCall(queryParams);
        Type localVarReturnType = new TypeToken<BrAPIVariantSetsListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a filtered list of &#x60;VariantSets&#x60;. (asynchronously)
     * Will return a filtered list of &#x60;VariantSet&#x60;.
     * @param queryParams
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call variantsetsGetAsync(VariantSetQueryParams queryParams, final ApiCallback<BrAPIVariantSetsListResponse> callback) throws ApiException {
        Call call = variantsetsGetCall(queryParams);
        Type localVarReturnType = new TypeToken<BrAPIVariantSetsListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for variantsetsVariantSetDbIdCallsGet
     * @param variantSetDbId The ID of the &#x60;VariantSet&#x60; to be retrieved. (required)
     * @param queryParams
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call variantsetsVariantSetDbIdCallsGetCall(String variantSetDbId, GenotypeQueryParams queryParams) throws ApiException {
        if(variantSetDbId == null) {
            throw new IllegalArgumentException("variantSetDbId cannot be null"); 
        }
        if(queryParams == null) {
            throw new IllegalArgumentException("queryParams cannot be null"); 
        }
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/variantsets/{variantSetDbId}/calls"
            .replaceAll("\\{" + "variantSetDbId" + "\\}", apiClient.escapeString(variantSetDbId.toString()));

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();
        if (queryParams.expandHomozygotes() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "expandHomozygotes", queryParams.expandHomozygotes());
        if (queryParams.unknownString() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "unknownString", queryParams.unknownString());
        if (queryParams.sepPhased() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "sepPhased", queryParams.sepPhased());
        if (queryParams.sepUnphased() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "sepUnphased", queryParams.sepUnphased());
        if (queryParams.pageToken() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "pageToken", queryParams.pageToken());
        if (queryParams.pageSize() != null)
            apiClient.prepQueryParameter(localVarQueryParams, "pageSize", queryParams.pageSize());

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Gets a list of &#x60;Calls&#x60; associated with a &#x60;VariantSet&#x60;.
     * Gets a list of &#x60;Calls&#x60; associated with a &#x60;VariantSet&#x60;.  ** THIS ENDPOINT USES TOKEN BASED PAGING **
     * @param variantSetDbId The ID of the &#x60;VariantSet&#x60; to be retrieved. (required)
     * @param queryParams
     * @return ApiResponse&lt;CallsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPICallsListResponse> variantsetsVariantSetDbIdCallsGet(String variantSetDbId, GenotypeQueryParams queryParams) throws ApiException {
        Call call = variantsetsVariantSetDbIdCallsGetCall(variantSetDbId, queryParams);
        Type localVarReturnType = new TypeToken<BrAPICallsListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of &#x60;Calls&#x60; associated with a &#x60;VariantSet&#x60;. (asynchronously)
     * Gets a list of &#x60;Calls&#x60; associated with a &#x60;VariantSet&#x60;.  ** THIS ENDPOINT USES TOKEN BASED PAGING **
     * @param variantSetDbId The ID of the &#x60;VariantSet&#x60; to be retrieved. (required)
     * @param queryParams
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call variantsetsVariantSetDbIdCallsGetAsync(String variantSetDbId, GenotypeQueryParams queryParams, final ApiCallback<BrAPICallsListResponse> callback) throws ApiException {
        Call call = variantsetsVariantSetDbIdCallsGetCall(variantSetDbId, queryParams);
        Type localVarReturnType = new TypeToken<BrAPICallsListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for variantsetsVariantSetDbIdCallsetsGet
     * @param variantSetDbId The ID of the &#x60;VariantSet&#x60; to be retrieved. (required)
     * @param callSetDbId The ID of the &#x60;CallSet&#x60; to be retrieved. (optional)
     * @param callSetName The human readable name of the &#x60;CallSet&#x60; to be retrieved. (optional)
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call variantsetsVariantSetDbIdCallsetsGetCall(String variantSetDbId, String callSetDbId, String callSetName, Integer page, Integer pageSize) throws ApiException {
        if(variantSetDbId == null) {
            throw new IllegalArgumentException("variantSetDbId cannot be null"); 
        }
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/variantsets/{variantSetDbId}/callsets"
            .replaceAll("\\{" + "variantSetDbId" + "\\}", apiClient.escapeString(variantSetDbId.toString()));

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();
        if (callSetDbId != null)
            apiClient.prepQueryParameter(localVarQueryParams, "callSetDbId", callSetDbId);
        if (callSetName != null)
            apiClient.prepQueryParameter(localVarQueryParams, "callSetName", callSetName);
        if (page != null)
            apiClient.prepQueryParameter(localVarQueryParams, "page", page);
        if (pageSize != null)
            apiClient.prepQueryParameter(localVarQueryParams, "pageSize", pageSize);

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Gets a list of &#x60;CallSets&#x60; associated with a &#x60;VariantSet&#x60;.
     * Gets a list of &#x60;CallSets&#x60; associated with a &#x60;VariantSet&#x60;.
     * @param variantSetDbId The ID of the &#x60;VariantSet&#x60; to be retrieved. (required)
     * @param callSetDbId The ID of the &#x60;CallSet&#x60; to be retrieved. (optional)
     * @param callSetName The human readable name of the &#x60;CallSet&#x60; to be retrieved. (optional)
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)

     * @return ApiResponse&lt;CallSetsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPICallSetsListResponse> variantsetsVariantSetDbIdCallsetsGet(String variantSetDbId, String callSetDbId, String callSetName, Integer page, Integer pageSize) throws ApiException {
        Call call = variantsetsVariantSetDbIdCallsetsGetCall(variantSetDbId, callSetDbId, callSetName, page, pageSize);
        Type localVarReturnType = new TypeToken<BrAPICallSetsListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of &#x60;CallSets&#x60; associated with a &#x60;VariantSet&#x60;. (asynchronously)
     * Gets a list of &#x60;CallSets&#x60; associated with a &#x60;VariantSet&#x60;.
     * @param variantSetDbId The ID of the &#x60;VariantSet&#x60; to be retrieved. (required)
     * @param callSetDbId The ID of the &#x60;CallSet&#x60; to be retrieved. (optional)
     * @param callSetName The human readable name of the &#x60;CallSet&#x60; to be retrieved. (optional)
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call variantsetsVariantSetDbIdCallsetsGetAsync(String variantSetDbId, String callSetDbId, String callSetName, Integer page, Integer pageSize, final ApiCallback<BrAPICallSetsListResponse> callback) throws ApiException {
        Call call = variantsetsVariantSetDbIdCallsetsGetCall(variantSetDbId, callSetDbId, callSetName, page, pageSize);
        Type localVarReturnType = new TypeToken<BrAPICallSetsListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for variantsetsVariantSetDbIdGet
     * @param variantSetDbId The ID of the &#x60;Variant&#x60; to be retrieved. (required)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call variantsetsVariantSetDbIdGetCall(String variantSetDbId) throws ApiException {
        if(variantSetDbId == null) {
            throw new IllegalArgumentException("variantSetDbId cannot be null"); 
        }
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/variantsets/{variantSetDbId}"
            .replaceAll("\\{" + "variantSetDbId" + "\\}", apiClient.escapeString(variantSetDbId.toString()));

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Gets a &#x60;VariantSet&#x60; by ID.
     * This call will return a JSON version of a &#x60;VariantSet&#x60;.
     * @param variantSetDbId The ID of the &#x60;Variant&#x60; to be retrieved. (required)

     * @return ApiResponse&lt;VariantSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIVariantSetResponse> variantsetsVariantSetDbIdGet(String variantSetDbId) throws ApiException {
        Call call = variantsetsVariantSetDbIdGetCall(variantSetDbId);
        Type localVarReturnType = new TypeToken<BrAPIVariantSetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a &#x60;VariantSet&#x60; by ID. (asynchronously)
     * This call will return a JSON version of a &#x60;VariantSet&#x60;.
     * @param variantSetDbId The ID of the &#x60;Variant&#x60; to be retrieved. (required)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call variantsetsVariantSetDbIdGetAsync(String variantSetDbId, final ApiCallback<BrAPIVariantSetResponse> callback) throws ApiException {
        Call call = variantsetsVariantSetDbIdGetCall(variantSetDbId);
        Type localVarReturnType = new TypeToken<BrAPIVariantSetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for variantsetsVariantSetDbIdVariantsGet
     * @param variantSetDbId The ID of the &#x60;VariantSet&#x60; to be retrieved. (required)
     * @param variantDbId The ID of the &#x60;Variant&#x60; to be retrieved. (optional)
     * @param pageToken Used to request a specific page of data to be returned.  Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively.  (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)



     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private Call variantsetsVariantSetDbIdVariantsGetCall(String variantSetDbId, String variantDbId, String pageToken, Integer pageSize) throws ApiException {
        if(variantSetDbId == null) {
            throw new IllegalArgumentException("variantSetDbId cannot be null"); 
        }
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/variantsets/{variantSetDbId}/variants"
            .replaceAll("\\{" + "variantSetDbId" + "\\}", apiClient.escapeString(variantSetDbId.toString()));

        Map<String, String> localVarQueryParams = new HashMap<>();
        Map<String, String> localVarCollectionQueryParams = new HashMap<>();
        if (variantDbId != null)
            apiClient.prepQueryParameter(localVarQueryParams, "variantDbId", variantDbId);
        if (pageToken != null)
            apiClient.prepQueryParameter(localVarQueryParams, "pageToken", pageToken);
        if (pageSize != null)
            apiClient.prepQueryParameter(localVarQueryParams, "pageSize", pageSize);

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthorizationToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames);
    }

    /**
     * Gets a &#x60;Variants&#x60; for a given &#x60;VariantSet&#x60;.
     * This call will return an array of &#x60;Variants&#x60;.  ** THIS ENDPOINT USES TOKEN BASED PAGING **
     * @param variantSetDbId The ID of the &#x60;VariantSet&#x60; to be retrieved. (required)
     * @param variantDbId The ID of the &#x60;Variant&#x60; to be retrieved. (optional)
     * @param pageToken Used to request a specific page of data to be returned.  Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively.  (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)

     * @return ApiResponse&lt;VariantsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrAPIVariantsListResponse> variantsetsVariantSetDbIdVariantsGet(String variantSetDbId, String variantDbId, String pageToken, Integer pageSize) throws ApiException {
        Call call = variantsetsVariantSetDbIdVariantsGetCall(variantSetDbId, variantDbId, pageToken, pageSize);
        Type localVarReturnType = new TypeToken<BrAPIVariantsListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a &#x60;Variants&#x60; for a given &#x60;VariantSet&#x60;. (asynchronously)
     * This call will return an array of &#x60;Variants&#x60;.  ** THIS ENDPOINT USES TOKEN BASED PAGING **
     * @param variantSetDbId The ID of the &#x60;VariantSet&#x60; to be retrieved. (required)
     * @param variantDbId The ID of the &#x60;Variant&#x60; to be retrieved. (optional)
     * @param pageToken Used to request a specific page of data to be returned.  Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively.  (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call variantsetsVariantSetDbIdVariantsGetAsync(String variantSetDbId, String variantDbId, String pageToken, Integer pageSize, final ApiCallback<BrAPIVariantsListResponse> callback) throws ApiException {
        Call call = variantsetsVariantSetDbIdVariantsGetCall(variantSetDbId, variantDbId, pageToken, pageSize);
        Type localVarReturnType = new TypeToken<BrAPIVariantsListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

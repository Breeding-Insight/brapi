/*
 * BrAPI-Core
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.client.v2.modules.core;

import org.apache.commons.lang3.tuple.Pair;
import org.brapi.client.v2.ApiResponse;
import org.brapi.client.v2.BrAPIClientTest;
import org.brapi.client.v2.model.exceptions.ApiException;
import org.brapi.client.v2.model.queryParams.core.StudyQueryParams;
import org.brapi.v2.model.BrAPIAcceptedSearchResponse;
import org.brapi.v2.model.core.BrAPIStudy;
import org.brapi.v2.model.core.request.BrAPIStudySearchRequest;
import org.brapi.v2.model.core.response.BrAPIStudyListResponse;
import org.brapi.v2.model.core.response.BrAPIStudySingleResponse;
import org.brapi.v2.model.core.response.BrAPIStudyTypesResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

/**
 * API tests for StudiesApi
 */
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class StudiesApiTest extends BrAPIClientTest {

	private final StudiesApi api = new StudiesApi(this.apiClient);

	/**
	 * Submit a search request for Studies
	 *
	 * Get list of studies StartDate and endDate should be ISO-8601 format for dates
	 * See Search Services for additional implementation details.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void searchStudiesPostTest() throws ApiException {
		BrAPIStudySearchRequest body = new BrAPIStudySearchRequest().addStudyDbIdsItem("study1")
				.addStudyDbIdsItem("study2");

		ApiResponse<Pair<Optional<BrAPIStudyListResponse>, Optional<BrAPIAcceptedSearchResponse>>> response = api
				.searchStudiesPost(body);

		Optional<BrAPIStudyListResponse> listResponse = response.getBody().getLeft();
		Optional<BrAPIAcceptedSearchResponse> searchIdResponse = response.getBody().getRight();
		// only results are returned
		assertTrue(listResponse.isPresent());
		assertFalse(searchIdResponse.isPresent());

		assertEquals(2, listResponse.get().getResult().getData().size(),
				"unexpected number of pedigree nodes returned");
	}

	/**
	 * Get the results of a Studies search request
	 *
	 * Get list of studies StartDate and endDate should be ISO-8601 format for dates
	 * See Search Services for additional implementation details.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void searchStudiesSearchResultsDbIdGetTest() throws ApiException {
		BrAPIStudySearchRequest body = new BrAPIStudySearchRequest().addStudyDbIdsItem("study1")
				.addStudyDbIdsItem("study2").addStudyDbIdsItem("study1").addStudyDbIdsItem("study2")
				.addStudyDbIdsItem("study1").addStudyDbIdsItem("study2");

		ApiResponse<Pair<Optional<BrAPIStudyListResponse>, Optional<BrAPIAcceptedSearchResponse>>> response = this.api
				.searchStudiesPost(body);
		Optional<BrAPIStudyListResponse> listResponse = response.getBody().getLeft();
		Optional<BrAPIAcceptedSearchResponse> searchIdResponse = response.getBody().getRight();
		// only search ID is returned
		assertFalse(listResponse.isPresent());
		assertTrue(searchIdResponse.isPresent());

		// Get results from search ID
		ApiResponse<Pair<Optional<BrAPIStudyListResponse>, Optional<BrAPIAcceptedSearchResponse>>> searchResponse = this.api
				.searchStudiesSearchResultsDbIdGet(searchIdResponse.get().getResult().getSearchResultsDbId(), 0, 10);
		Optional<BrAPIStudyListResponse> listResponse2 = searchResponse.getBody().getLeft();
		Optional<BrAPIAcceptedSearchResponse> searchIdResponse2 = searchResponse.getBody().getRight();
		// only results are returned
		assertTrue(listResponse2.isPresent());
		assertFalse(searchIdResponse2.isPresent());

		assertEquals(2, listResponse2.get().getResult().getData().size(),
				"unexpected number of pedigree nodes returned");
	}

	/**
	 * Get a filtered list of Studies
	 *
	 * Get list of studies StartDate and endDate should be ISO-8601 format for dates
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void studiesGetTest() throws ApiException {
		String studyDbId = "study1";

		StudyQueryParams queryParams = new StudyQueryParams().studyDbId(studyDbId);
		ApiResponse<BrAPIStudyListResponse> response = api.studiesGet(queryParams);

		assertEquals(1, response.getBody().getResult().getData().size());
		assertEquals(studyDbId, response.getBody().getResult().getData().get(0).getStudyDbId());
	}

	/**
	 * Create new Studies.
	 *
	 * Create new studies Implementation Notes StartDate and endDate should be
	 * ISO-8601 format for dates &#x60;studDbId&#x60; is generated by the server.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void studiesPostTest() throws ApiException {
		BrAPIStudy study = new BrAPIStudy().studyName("Study Name");
		List<BrAPIStudy> body = Arrays.asList(study);

		ApiResponse<BrAPIStudyListResponse> response = api.studiesPost(body);

		assertEquals(1, response.getBody().getResult().getData().size());
		assertEquals(study.getStudyName(), response.getBody().getResult().getData().get(0).getStudyName());
		assertNotNull(response.getBody().getResult().getData().get(0).getStudyDbId());

	}

	/**
	 * Get the details for a specific Study
	 *
	 * Retrieve the information of the study required for field data collection An
	 * additionalInfo field was added to provide a controlled vocabulary for less
	 * common data fields.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void studiesStudyDbIdGetTest() throws ApiException {
		String studyDbId = "study1";

		ApiResponse<BrAPIStudySingleResponse> response = api.studiesStudyDbIdGet(studyDbId);

		assertEquals(studyDbId, response.getBody().getResult().getStudyDbId());
	}

	/**
	 * Update an existing Study
	 *
	 * Update an existing Study with new data
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void studiesStudyDbIdPutTest() throws ApiException {
		String studyDbId = "study1";
		BrAPIStudy body = new BrAPIStudy().studyDbId(studyDbId).studyName("New Name");

		ApiResponse<BrAPIStudySingleResponse> response = api.studiesStudyDbIdPut(studyDbId, body);

		assertEquals(body.getStudyName(), response.getBody().getResult().getStudyName());
		assertEquals(studyDbId, response.getBody().getResult().getStudyDbId());
	}

	/**
	 * Get the Study Types
	 *
	 * Call to retrieve the list of study types.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void studytypesGetTest() throws ApiException {
		Integer page = null;
		Integer pageSize = null;

		ApiResponse<BrAPIStudyTypesResponse> response = api.studytypesGet(page, pageSize);
		
		assertNotEquals(0, response.getBody().getResult().getData().size());
	}
}

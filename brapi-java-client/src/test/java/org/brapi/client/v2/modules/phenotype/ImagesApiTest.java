/*
 * BrAPI-Phenotyping
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Images, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.client.v2.modules.phenotype;

import org.apache.commons.lang3.tuple.Pair;
import org.brapi.client.v2.ApiResponse;
import org.brapi.client.v2.BrAPIClientTest;
import org.brapi.client.v2.model.exceptions.ApiException;
import org.brapi.client.v2.model.queryParams.phenotype.ImageQueryParams;
import org.brapi.v2.model.BrAPIAcceptedSearchResponse;
import org.brapi.v2.model.pheno.BrAPIImage;
import org.brapi.v2.model.pheno.response.BrAPIImageListResponse;
import org.brapi.v2.model.pheno.request.BrAPIImageSearchRequest;
import org.brapi.v2.model.pheno.response.BrAPIImageSingleResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

/**
 * API tests for ImagesApi
 */
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ImagesApiTest extends BrAPIClientTest {

	private ImagesApi api = new ImagesApi(this.apiClient);

	/**
	 * Get the image meta data summaries
	 *
	 * Get filtered set of image meta data Implementation Notes -
	 * &#x27;&#x27;imageURL&#x27;&#x27; should be a complete URL describing the
	 * location of the image. There is no BrAPI call for retrieving the image
	 * content, so it could be on a different path, or a different host. -
	 * &#x27;&#x27;descriptiveOntologyTerm&#x27;&#x27; can be thought of as Tags for
	 * the image. These could be simple descriptive words, or ontology references,
	 * or full ontology URI&#x27;&#x27;s.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void imagesGetTest() throws ApiException {
		String imageDbId = "image1";

		ImageQueryParams queryParams = new ImageQueryParams().imageDbId(imageDbId);
		ApiResponse<BrAPIImageListResponse> response = api.imagesGet(queryParams);

		assertEquals(1, response.getBody().getResult().getData().size());
		assertEquals(imageDbId, response.getBody().getResult().getData().get(0).getImageDbId());
	}

	/**
	 * Get the an image meta data summary
	 *
	 * Get one image meta data object Implementation Notes -
	 * &#x27;&#x27;imageURL&#x27;&#x27; should be a complete URL describing the
	 * location of the image. There is no BrAPI call for retrieving the image
	 * content, so it could be on a different path, or a different host. -
	 * &#x27;&#x27;descriptiveOntologyTerm&#x27;&#x27; can be thought of as Tags for
	 * the image. These could be simple descriptive words, or ontology references,
	 * or full ontology URI&#x27;&#x27;s.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void imagesImageDbIdGetTest() throws ApiException {
		String imageDbId = "image1";

		ApiResponse<BrAPIImageSingleResponse> response = api.imagesImageDbIdGet(imageDbId);

		assertEquals(imageDbId, response.getBody().getResult().getImageDbId());

	}

	/**
	 * Update an image with the image file content
	 *
	 * Update an image with the image file content Implementation Notes - This call
	 * should be paired with &#x27;PUT /images/{imageDbId}&#x27; for full capability
	 * - A server may choose to modify the image meta data object based on the
	 * actually image which has been uploaded. - Image data may be stored in a
	 * database or file system. Servers should generate and provide the
	 * \&quot;imageURL\&quot; for retrieving the image, wherever it happens to live.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void imagesImageDbIdImagecontentPutTest() throws ApiException {
		String imageDbId = "image1";
		Object body = new byte[10];

		ApiResponse<BrAPIImageSingleResponse> response = api.imagesImageDbIdImagecontentPut(imageDbId, body);

		assertEquals(imageDbId, response.getBody().getResult().getImageDbId());
	}

	/**
	 * Update an image meta data
	 *
	 * Update an image meta data object Implementation Notes - This call should be
	 * paired with &#x27;PUT /images/{imageDbId}/imagecontent&#x27; for full
	 * capability - A server may choose to modify the image meta data object based
	 * on the actually image which has been uploaded. - Image data may be stored in
	 * a database or file system. Servers should generate and provide the
	 * \&quot;imageURL\&quot; as an absolute path for retrieving the image, wherever
	 * it happens to live. - &#x27;descriptiveOntologyTerm&#x27; can be thought of
	 * as Tags for the image. These could be simple descriptive words, or ontology
	 * references, or full ontology URI&#x27;s. - The &#x27;/images&#x27; calls
	 * support a GeoJSON object structure for describing their location. The BrAPI
	 * spec for GeoJSON only supports two of the possible geometries: Points and
	 * Polygons. - With most images, the Point geometry should be used, and it
	 * should indicate the longitude and latitude of the camera. - For top down
	 * images (ie from drones, cranes, etc), the Point geometry may be used to
	 * indicate the longitude and latitude of the centroid of the image content, and
	 * the Polygon geometry may be used to indicate the border of the image content.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void imagesImageDbIdPutTest() throws ApiException {
		String imageDbId = "image1";
		BrAPIImage body = new BrAPIImage().imageDbId(imageDbId).imageName("New Name");

		ApiResponse<BrAPIImageSingleResponse> response = api.imagesImageDbIdPut(imageDbId, body);

		assertEquals(imageDbId, response.getBody().getResult().getImageDbId());
		assertEquals(body.getImageName(), response.getBody().getResult().getImageName());
	}

	/**
	 * Create new image meta data objects
	 *
	 * Create new image meta data objects Implementation Notes -
	 * &#x27;&#x27;imageURL&#x27;&#x27; should be a complete URL describing the
	 * location of the image. There is no BrAPI call for retrieving the image
	 * content, so it could be on a different path, or a different host. -
	 * &#x27;&#x27;descriptiveOntologyTerm&#x27;&#x27; can be thought of as Tags for
	 * the image. These could be simple descriptive words, or ontology references,
	 * or full ontology URI&#x27;&#x27;s. - The &#x27;/images&#x27; calls support a
	 * GeoJSON object structure for describing their location. The BrAPI spec for
	 * GeoJSON only supports two of the possible geometries: Points and Polygons. -
	 * With most images, the Point geometry should be used, and it should indicate
	 * the longitude and latitude of the camera. - For top down images (ie from
	 * drones, cranes, etc), the Point geometry may be used to indicate the
	 * longitude and latitude of the centroid of the image content, and the Polygon
	 * geometry may be used to indicate the border of the image content. &#x27;
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void imagesPostTest() throws ApiException {
		BrAPIImage img = new BrAPIImage().imageName("New Name");
		List<BrAPIImage> body = Arrays.asList(img);

		ApiResponse<BrAPIImageListResponse> response = api.imagesPost(body);

		assertEquals(1, response.getBody().getResult().getData().size());
		assertNotNull(response.getBody().getResult().getData().get(0).getImageDbId());
		assertEquals(img.getImageName(), response.getBody().getResult().getData().get(0).getImageName());
	}

	/**
	 * Submit a search request for Images
	 *
	 * Get filtered set of image meta data Implementation Notes -
	 * &#x27;&#x27;imageURL&#x27;&#x27; should be a complete URL describing the
	 * location of the image. There is no BrAPI call for retrieving the image
	 * content, so it could be on a different path, or a different host. -
	 * &#x27;descriptiveOntologyTerm&#x27; can be thought of as Tags for the image.
	 * These could be simple descriptive words, or ontology references, or full
	 * ontology URI&#x27;s. See Search Services for additional implementation
	 * details.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void searchImagesPostTest() throws ApiException {
		BrAPIImageSearchRequest body = new BrAPIImageSearchRequest().addImageDbIdsItem("image1")
				.addImageDbIdsItem("image2");

		ApiResponse<Pair<Optional<BrAPIImageListResponse>, Optional<BrAPIAcceptedSearchResponse>>> response = api
				.searchImagesPost(body);

		Optional<BrAPIImageListResponse> listResponse = response.getBody().getLeft();
		Optional<BrAPIAcceptedSearchResponse> searchIdResponse = response.getBody().getRight();
		// only results are returned
		assertTrue(listResponse.isPresent());
		assertFalse(searchIdResponse.isPresent());

		assertEquals(2, listResponse.get().getResult().getData().size(),
				"unexpected number of element returned");
	}

	/**
	 * Get the results of an Images search request
	 *
	 * Get filtered set of image meta data Implementation Notes -
	 * &#x27;&#x27;imageURL&#x27;&#x27; should be a complete URL describing the
	 * location of the image. There is no BrAPI call for retrieving the image
	 * content, so it could be on a different path, or a different host. -
	 * &#x27;&#x27;descriptiveOntologyTerm&#x27;&#x27; can be thought of as Tags for
	 * the image. These could be simple descriptive words, or ontology references,
	 * or full ontology URI&#x27;&#x27;s.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void searchImagesSearchResultsDbIdGetTest() throws ApiException {
		BrAPIImageSearchRequest baseRequest = new BrAPIImageSearchRequest().addImageDbIdsItem("image1")
				.addImageDbIdsItem("image2").addImageDbIdsItem("image1").addImageDbIdsItem("image2")
				.addImageDbIdsItem("image1").addImageDbIdsItem("image2");

		ApiResponse<Pair<Optional<BrAPIImageListResponse>, Optional<BrAPIAcceptedSearchResponse>>> response = this.api
				.searchImagesPost(baseRequest);
		Optional<BrAPIImageListResponse> listResponse = response.getBody().getLeft();
		Optional<BrAPIAcceptedSearchResponse> searchIdResponse = response.getBody().getRight();
		// only search ID is returned
		assertFalse(listResponse.isPresent());
		assertTrue(searchIdResponse.isPresent());

		// Get results from search ID
		ApiResponse<Pair<Optional<BrAPIImageListResponse>, Optional<BrAPIAcceptedSearchResponse>>> searchResponse = this.api
				.searchImagesSearchResultsDbIdGet(searchIdResponse.get().getResult().getSearchResultsDbId(), 0, 10);
		Optional<BrAPIImageListResponse> listResponse2 = searchResponse.getBody().getLeft();
		Optional<BrAPIAcceptedSearchResponse> searchIdResponse2 = searchResponse.getBody().getRight();
		// only results are returned
		assertTrue(listResponse2.isPresent());
		assertFalse(searchIdResponse2.isPresent());

		assertEquals(2, listResponse2.get().getResult().getData().size(),
				"unexpected number of elements returned");
	}
}

/*
 * BrAPI-Germplasm
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.client.v2.modules.germplasm;

import org.brapi.client.v2.ApiResponse;
import org.brapi.client.v2.BrAPIClientTest;
import org.brapi.client.v2.model.exceptions.ApiException;
import org.brapi.client.v2.model.queryParams.germplasm.SeedLotQueryParams;
import org.brapi.client.v2.model.queryParams.germplasm.SeedLotTransactionQueryParams;
import org.brapi.v2.model.germ.BrAPISeedLot;
import org.brapi.v2.model.germ.BrAPISeedLotTransaction;
import org.brapi.v2.model.germ.response.BrAPISeedLotListResponse;
import org.brapi.v2.model.germ.response.BrAPISeedLotSingleResponse;
import org.brapi.v2.model.germ.response.BrAPISeedLotTransactionListResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import static org.junit.Assert.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

/**
 * API tests for SeedLotsApi
 */
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class SeedLotsApiTest extends BrAPIClientTest {

	private final SeedLotsApi api = new SeedLotsApi(this.apiClient);

	/**
	 * Get a filtered list of Seed Lot descriptions
	 *
	 * Get a filtered list of Seed Lot descriptions available in a system.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void seedlotsGetTest() throws ApiException {
		String seedLotDbId = "seed_lot1";

		SeedLotQueryParams queryParams = new SeedLotQueryParams().seedLotDbId(seedLotDbId);
		ApiResponse<BrAPISeedLotListResponse> response = api.seedlotsGet(queryParams);

		assertEquals(1, response.getBody().getResult().getData().size());
		assertEquals(seedLotDbId, response.getBody().getResult().getData().get(0).getSeedLotDbId());
	}

	/**
	 * Add new Seed Lot descriptions to a server
	 *
	 * Add new Seed Lot descriptions to a server
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void seedlotsPostTest() throws ApiException {
		BrAPISeedLot seedLot = new BrAPISeedLot().seedLotName("New Name");
		List<BrAPISeedLot> body = Arrays.asList(seedLot);

		ApiResponse<BrAPISeedLotListResponse> response = api.seedlotsPost(body);

		assertEquals(1, response.getBody().getResult().getData().size());
		assertEquals(seedLot.getSeedLotName(), response.getBody().getResult().getData().get(0).getSeedLotName());
		assertNotNull(response.getBody().getResult().getData().get(0).getSeedLotDbId());

	}

	/**
	 * Get a specific Seed Lot
	 *
	 * Get a specific Seed Lot by seedLotDbId
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void seedlotsSeedLotDbIdGetTest() throws ApiException {
		String seedLotDbId = "seed_lot1";

		ApiResponse<BrAPISeedLotSingleResponse> response = api.seedlotsSeedLotDbIdGet(seedLotDbId);

		assertEquals(seedLotDbId, response.getBody().getResult().getSeedLotDbId());
	}

	/**
	 * Update an existing Seed Lot
	 *
	 * Update an existing Seed Lot
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void seedlotsSeedLotDbIdPutTest() throws ApiException {
		String seedLotDbId = "seed_lot1";
		BrAPISeedLot seedLot = new BrAPISeedLot().seedLotName("New Name").seedLotDbId(seedLotDbId);

		ApiResponse<BrAPISeedLotSingleResponse> response = api.seedlotsSeedLotDbIdPut(seedLotDbId, seedLot);

		assertEquals(seedLot.getSeedLotDbId(), response.getBody().getResult().getSeedLotDbId());
		assertEquals(seedLot.getSeedLotName(), response.getBody().getResult().getSeedLotName());
	}

	/**
	 * Get all Transactions related to a specific Seed Lot
	 *
	 * Get all Transactions related to a specific Seed Lot
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void seedlotsSeedLotDbIdTransactionsGetTest() throws ApiException {
		String seedLotDbId = "seed_lot1";
		String transactionDbId = "seed_lot_transaction2";
		String transactionDirection = null;
		Integer page = null;
		Integer pageSize = null;

		ApiResponse<BrAPISeedLotTransactionListResponse> response = api.seedlotsSeedLotDbIdTransactionsGet(seedLotDbId,
				transactionDbId, transactionDirection, page, pageSize);

		assertEquals(1, response.getBody().getResult().getData().size());
	}

	/**
	 * Get a filtered list of Seed Lot Transactions
	 *
	 * Get a filtered list of Seed Lot Transactions
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void seedlotsTransactionsGetTest() throws ApiException {
		String transactionDbId = "seed_lot_transaction1";

		SeedLotTransactionQueryParams queryParams = new SeedLotTransactionQueryParams()
				.transactionDbId(transactionDbId);
		ApiResponse<BrAPISeedLotTransactionListResponse> response = api.seedlotsTransactionsGet(queryParams);

		assertEquals(1, response.getBody().getResult().getData().size());
		assertEquals(transactionDbId, response.getBody().getResult().getData().get(0).getTransactionDbId());
	}

	/**
	 * Add new Seed Lot Transaction to be recorded
	 *
	 * Add new Seed Lot Transaction to be recorded
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void seedlotsTransactionsPostTest() throws ApiException {
		BrAPISeedLotTransaction transaction = new BrAPISeedLotTransaction().fromSeedLotDbId("seed_lot1")
				.toSeedLotDbId("seed_lot2").amount(new BigDecimal(20)).transactionDescription("test").units("seeds");
		List<BrAPISeedLotTransaction> body = Arrays.asList(transaction);

		ApiResponse<BrAPISeedLotTransactionListResponse> response = api.seedlotsTransactionsPost(body);

		assertEquals(1, response.getBody().getResult().getData().size());
		assertNotNull(response.getBody().getResult().getData().get(0).getTransactionDbId());
		assertEquals(transaction.getFromSeedLotDbId(),
				response.getBody().getResult().getData().get(0).getFromSeedLotDbId());
		assertEquals(transaction.getToSeedLotDbId(),
				response.getBody().getResult().getData().get(0).getToSeedLotDbId());
		assertEquals(transaction.getAmount(), response.getBody().getResult().getData().get(0).getAmount());
		assertEquals(transaction.getTransactionDescription(),
				response.getBody().getResult().getData().get(0).getTransactionDescription());
		assertEquals(transaction.getUnits(), response.getBody().getResult().getData().get(0).getUnits());

	}
}

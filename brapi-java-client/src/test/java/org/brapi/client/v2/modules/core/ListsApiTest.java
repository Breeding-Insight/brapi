/*
 * BrAPI-Core
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.client.v2.modules.core;

import org.apache.commons.lang3.tuple.Pair;
import org.brapi.client.v2.ApiResponse;
import org.brapi.client.v2.BrAPIClientTest;
import org.brapi.client.v2.model.exceptions.ApiException;
import org.brapi.client.v2.model.queryParams.core.ListQueryParams;
import org.brapi.v2.model.BrAPIAcceptedSearchResponse;
import org.brapi.v2.model.core.request.BrAPIListNewRequest;
import org.brapi.v2.model.core.request.BrAPIListSearchRequest;
import org.brapi.v2.model.core.response.BrAPIListResponse;
import org.brapi.v2.model.core.response.BrAPIListsListResponse;
import org.brapi.v2.model.core.response.BrAPIListsSingleResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

/**
 * API tests for ListsApi
 */
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ListsApiTest extends BrAPIClientTest {

	private final ListsApi api = new ListsApi(this.apiClient);

	@Test
	public void listsGetTest() throws ApiException {
		String listDbId = "list1";
		ListQueryParams queryParams = new ListQueryParams()
				.listDbId(listDbId);
		ApiResponse<BrAPIListsListResponse> response = api.listsGet(queryParams);

		assertEquals(1, response.getBody().getResult().getData().size());
		assertEquals(listDbId, response.getBody().getResult().getData().get(0).getListDbId());
	}

	@Test
	public void listsPostTest() throws ApiException {
		BrAPIListNewRequest list = new BrAPIListNewRequest();
		list.listName("new list name");
		List<BrAPIListNewRequest> body = Arrays.asList(list);

		ApiResponse<BrAPIListsListResponse> response = api.listsPost(body);

		assertEquals(1, response.getBody().getResult().getData().size());
		assertEquals(list.getListName(), response.getBody().getResult().getData().get(0).getListName());
		assertNotNull(response.getBody().getResult().getData().get(0).getListDbId());
	}

	@Test
	public void listsListDbIdGetTest() throws ApiException {
		String listDbId = "list1";

		ApiResponse<BrAPIListsSingleResponse> response = api.listsListDbIdGet(listDbId);

		assertEquals(listDbId, response.getBody().getResult().getListDbId());
	}

	@Test
	public void listsListDbIdItemsPostTest() throws ApiException {
		String listDbId = "list1";
		List<String> body = Arrays.asList("one", "two", "three");

		ApiResponse<BrAPIListResponse> response = api.listsListDbIdItemsPost(listDbId, body);
		
		// 3 add here, plus 3 from loaded SQL, expecting 6 items total
		assertEquals(6, response.getBody().getResult().getData().size());
		assertEquals(6, response.getBody().getResult().getListSize());
	}

	@Test
	public void listsListDbIdPutTest() throws ApiException {
		String listDbId = "list1";
		BrAPIListNewRequest body = new BrAPIListNewRequest();
		body.setListName("JUnit test");

		ApiResponse<BrAPIListsSingleResponse> response = api.listsListDbIdPut(listDbId, body);

		assertEquals(listDbId, response.getBody().getResult().getListDbId());
		assertEquals(body.getListName(), response.getBody().getResult().getListName());
	}

	@Test
	public void searchListsPostTest() throws ApiException {
		BrAPIListSearchRequest baseRequest = new BrAPIListSearchRequest()
				.addListDbIdsItem("list1")
				.addListDbIdsItem("list2");

		ApiResponse<Pair<Optional<BrAPIListsListResponse>, Optional<BrAPIAcceptedSearchResponse>>> response = this.api
				.searchListsPost(baseRequest);
		Optional<BrAPIListsListResponse> listResponse = response.getBody().getLeft();
		Optional<BrAPIAcceptedSearchResponse> searchIdResponse = response.getBody().getRight();
		// only results are returned
		assertTrue(listResponse.isPresent());
		assertFalse(searchIdResponse.isPresent());

		assertEquals(2, listResponse.get().getResult().getData().size(),
				"unexpected number of pedigree nodes returned");
	}

	@Test
	public void searchListsSearchResultsDbIdGetTest() throws ApiException {
		BrAPIListSearchRequest baseRequest = new BrAPIListSearchRequest().addListDbIdsItem("list1")
				.addListDbIdsItem("list1").addListDbIdsItem("list1").addListDbIdsItem("list2")
				.addListDbIdsItem("list2");

		ApiResponse<Pair<Optional<BrAPIListsListResponse>, Optional<BrAPIAcceptedSearchResponse>>> response = this.api
				.searchListsPost(baseRequest);
		Optional<BrAPIListsListResponse> listResponse = response.getBody().getLeft();
		Optional<BrAPIAcceptedSearchResponse> searchIdResponse = response.getBody().getRight();
		// only search ID is returned
		assertFalse(listResponse.isPresent());
		assertTrue(searchIdResponse.isPresent());

		// Get results from search ID
		ApiResponse<Pair<Optional<BrAPIListsListResponse>, Optional<BrAPIAcceptedSearchResponse>>> searchResponse = this.api
				.searchListsSearchResultsDbIdGet(searchIdResponse.get().getResult().getSearchResultsDbId(), 0, 10);
		Optional<BrAPIListsListResponse> listResponse2 = searchResponse.getBody().getLeft();
		Optional<BrAPIAcceptedSearchResponse> searchIdResponse2 = searchResponse.getBody().getRight();
		// only results are returned
		assertTrue(listResponse2.isPresent());
		assertFalse(searchIdResponse2.isPresent());

		assertEquals(2, listResponse2.get().getResult().getData().size(),
				"unexpected number of pedigree nodes returned");
	}
}

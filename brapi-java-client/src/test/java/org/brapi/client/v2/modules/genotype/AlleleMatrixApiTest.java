/*
 * BrAPI-Genotyping
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.client.v2.modules.genotype;

import org.apache.commons.lang3.tuple.Pair;
import org.brapi.client.v2.ApiResponse;
import org.brapi.client.v2.BrAPIClientTest;
import org.brapi.client.v2.model.exceptions.ApiException;
import org.brapi.client.v2.model.queryParams.genotype.AlleleMatrixQueryParams;
import org.brapi.v2.model.BrAPIAcceptedSearchResponse;
import org.brapi.v2.model.geno.request.BrAPIAlleleMatrixSearchRequest;
import org.brapi.v2.model.geno.response.BrAPIAlleleMatrixResponse;
import org.junit.jupiter.api.Test;

import java.util.Optional;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertThrows;

/**
 * API tests for AlleleMatrixApi
 */
public class AlleleMatrixApiTest extends BrAPIClientTest {

    private final AlleleMatrixApi api = new AlleleMatrixApi(this.apiClient);

    /**
     * Use this endpoint to retrieve a two dimensional matrix of genotype data
     *
     * Use this endpoint to retrieve a two dimensional matrix of genotype data. The response structure is based on the VCF file format,  but the search and filter parameters give the ability to slice and merge data sets. This allows the user to return the subset of data they are interested in,  without having to download the entire genotype file. &lt;br/&gt;Each row of data (outer array) corresponds to a variant definition, and each column (inner array) corresponds to a callSet.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void allelematrixGetTest() throws Exception {
        Integer dimensionVariantPage = null;
        Integer dimensionVariantPageSize = null;
        Integer dimensionCallSetPage = null;
        Integer dimensionCallSetPageSize = null;
        Boolean preview = null;
        String dataMatrixNames = null;
        String dataMatrixAbbreviations = null;
        String positionRange = null;
        String germplasmDbId = null;
        String germplasmName = null;
        String germplasmPUI = null;
        String callSetDbId = null;
        String variantDbId = null;
        String variantSetDbId = null;
        Boolean expandHomozygotes = null;
        String unknownString = null;
        String sepPhased = null;
        String sepUnphased = null;

        AlleleMatrixQueryParams queryParams = new AlleleMatrixQueryParams();
        ApiResponse<BrAPIAlleleMatrixResponse> response = api.allelematrixGet(queryParams);

        // TODO: test validations
    }
    /**
     * Submit a search request for a Allele Matrix
     *
     * Use this endpoint to retrieve a two dimensional matrix of genotype data. The response structure is based on the VCF format, but the search and filter parameters give the ability to slice and merge data sets. This allows the user to return the subset of data they are interested in, without having to download the entire genotype file. &lt;br/&gt;Each row of data (outer array) corresponds to a variant definition, and each column (inner array) corresponds to a callSet.  &lt;br/&gt;Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. If a server needs more time to process the request, it might respond with a &#x60;searchResultsDbId&#x60;. Use the corresponding &#x60;GET /search/allelematrix/{searchResultsDbId}&#x60; to retrieve the results of the search.  &lt;br/&gt;Review the &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\&quot;&gt;Search Services documentation&lt;/a&gt; for additional implementation details.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchAllelematrixPostTest() throws Exception {
        BrAPIAlleleMatrixSearchRequest body = null;

        ApiException exception = assertThrows(ApiException.class, () -> {
            ApiResponse<Pair<Optional<BrAPIAlleleMatrixResponse>, Optional<BrAPIAcceptedSearchResponse>>> response = api.searchAllelematrixPost(body);
        });

        // TODO: test validations
    }
    /**
     * Get the results of a Allele Matrix search request
     *
     * Use this endpoint to retrieve a two dimensional matrix of genotype data. The response structure is based on the VCF format, but the search and filter parameters give the ability to slice and merge data sets. This allows the user to return the subset of data they are interested in, without having to download the entire genotype file. &lt;br/&gt;Each row of data (outer array) corresponds to a variant definition, and each column (inner array) corresponds to a callSet.  &lt;br/&gt;Clients should submit a search request using the corresponding &#x60;POST /search/allelematrix&#x60; endpoint. Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. If a server needs more time to process the request, it might respond with a &#x60;searchResultsDbId&#x60;. Use this endpoint to retrieve the results of the search.  &lt;br/&gt;Review the &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\&quot;&gt;Search Services documentation&lt;/a&gt; for additional implementation details.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchAllelematrixSearchResultsDbIdGetTest() throws Exception {
        String searchResultsDbId = UUID.randomUUID().toString();

        ApiException exception = assertThrows(ApiException.class, () -> {
            ApiResponse<BrAPIAlleleMatrixResponse> response = api.searchAllelematrixSearchResultsDbIdGet(searchResultsDbId);
        });
        // TODO: test validations
    }
}

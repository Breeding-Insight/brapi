/*
 * BrAPI-Germplasm
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/RESTfulness\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Response_Structure\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Dates_and_Times\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Location_Coordinates\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Error_Handling\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Search_Services\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.client.v21.modules.germplasm;

import com.google.gson.reflect.TypeToken;
import org.brapi.client.v21.*;
import org.brapi.client.v21.model.queryParams.germplasm.GermplasmQueryParams;
import org.brapi.model.v21.germplasm.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GermplasmApi {
    private ApiClient apiClient;

    public GermplasmApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GermplasmApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for breedingmethodsBreedingMethodDbIdGet
     *
     * @param breedingMethodDbId      Internal database identifier for a breeding method (required)
     * @param authorization           HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call breedingmethodsBreedingMethodDbIdGetCall(String breedingMethodDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/breedingmethods/{breedingMethodDbId}"
                .replaceAll("\\{" + "breedingMethodDbId" + "}", apiClient.escapeString(breedingMethodDbId));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();
        if (authorization != null)
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"AuthorizationToken"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call breedingmethodsBreedingMethodDbIdGetValidateBeforeCall(String breedingMethodDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'breedingMethodDbId' is set
        if (breedingMethodDbId == null) {
            throw new ApiException("Missing the required parameter 'breedingMethodDbId' when calling breedingmethodsBreedingMethodDbIdGet(Async)");
        }

        return breedingmethodsBreedingMethodDbIdGetCall(breedingMethodDbId, authorization, progressListener, progressRequestListener);


    }

    /**
     * Get the details of a specific Breeding Method
     * Get the details of a specific Breeding Method used to produce Germplasm
     *
     * @param breedingMethodDbId Internal database identifier for a breeding method (required)
     * @param authorization      HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return BreedingMethodSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BreedingMethodSingleResponse breedingmethodsBreedingMethodDbIdGet(String breedingMethodDbId, String authorization) throws ApiException {
        ApiResponse<BreedingMethodSingleResponse> resp = breedingmethodsBreedingMethodDbIdGetWithHttpInfo(breedingMethodDbId, authorization);
        return resp.getData();
    }

    /**
     * Get the details of a specific Breeding Method
     * Get the details of a specific Breeding Method used to produce Germplasm
     *
     * @param breedingMethodDbId Internal database identifier for a breeding method (required)
     * @param authorization      HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;BreedingMethodSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BreedingMethodSingleResponse> breedingmethodsBreedingMethodDbIdGetWithHttpInfo(String breedingMethodDbId, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = breedingmethodsBreedingMethodDbIdGetValidateBeforeCall(breedingMethodDbId, authorization, null, null);
        Type localVarReturnType = new TypeToken<BreedingMethodSingleResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the details of a specific Breeding Method (asynchronously)
     * Get the details of a specific Breeding Method used to produce Germplasm
     *
     * @param breedingMethodDbId Internal database identifier for a breeding method (required)
     * @param authorization      HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback           The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call breedingmethodsBreedingMethodDbIdGetAsync(String breedingMethodDbId, String authorization, final ApiCallback<BreedingMethodSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = breedingmethodsBreedingMethodDbIdGetValidateBeforeCall(breedingMethodDbId, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BreedingMethodSingleResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for breedingmethodsGet
     *
     * @param page                    Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize                The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization           HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call breedingmethodsGetCall(Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/breedingmethods";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        if (page != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<>();
        if (authorization != null)
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"AuthorizationToken"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call breedingmethodsGetValidateBeforeCall(Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        return breedingmethodsGetCall(page, pageSize, authorization, progressListener, progressRequestListener);


    }

    /**
     * Get the Breeding Methods
     * Get the list of germplasm breeding methods available in a system.
     *
     * @param page          Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize      The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return BreedingMethodListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BreedingMethodListResponse breedingmethodsGet(Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<BreedingMethodListResponse> resp = breedingmethodsGetWithHttpInfo(page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the Breeding Methods
     * Get the list of germplasm breeding methods available in a system.
     *
     * @param page          Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize      The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;BreedingMethodListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BreedingMethodListResponse> breedingmethodsGetWithHttpInfo(Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = breedingmethodsGetValidateBeforeCall(page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<BreedingMethodListResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Breeding Methods (asynchronously)
     * Get the list of germplasm breeding methods available in a system.
     *
     * @param page          Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize      The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call breedingmethodsGetAsync(Integer page, Integer pageSize, String authorization, final ApiCallback<BreedingMethodListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = breedingmethodsGetValidateBeforeCall(page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BreedingMethodListResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for germplasmGermplasmDbIdGet
     *
     * @param germplasmDbId           The internal id of the germplasm (required)
     * @param authorization           HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call germplasmGermplasmDbIdGetCall(String germplasmDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/germplasm/{germplasmDbId}"
                .replaceAll("\\{" + "germplasmDbId" + "}", apiClient.escapeString(germplasmDbId));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();
        if (authorization != null)
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"AuthorizationToken"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call germplasmGermplasmDbIdGetValidateBeforeCall(String germplasmDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'germplasmDbId' is set
        if (germplasmDbId == null) {
            throw new ApiException("Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdGet(Async)");
        }

        return germplasmGermplasmDbIdGetCall(germplasmDbId, authorization, progressListener, progressRequestListener);


    }

    /**
     * Get the details of a specific Germplasm
     * Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].
     *
     * @param germplasmDbId The internal id of the germplasm (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GermplasmSingleResponse germplasmGermplasmDbIdGet(String germplasmDbId, String authorization) throws ApiException {
        ApiResponse<GermplasmSingleResponse> resp = germplasmGermplasmDbIdGetWithHttpInfo(germplasmDbId, authorization);
        return resp.getData();
    }

    /**
     * Get the details of a specific Germplasm
     * Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].
     *
     * @param germplasmDbId The internal id of the germplasm (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;GermplasmSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GermplasmSingleResponse> germplasmGermplasmDbIdGetWithHttpInfo(String germplasmDbId, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = germplasmGermplasmDbIdGetValidateBeforeCall(germplasmDbId, authorization, null, null);
        Type localVarReturnType = new TypeToken<GermplasmSingleResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the details of a specific Germplasm (asynchronously)
     * Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].
     *
     * @param germplasmDbId The internal id of the germplasm (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call germplasmGermplasmDbIdGetAsync(String germplasmDbId, String authorization, final ApiCallback<GermplasmSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = germplasmGermplasmDbIdGetValidateBeforeCall(germplasmDbId, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GermplasmSingleResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for germplasmGermplasmDbIdMcpdGet
     *
     * @param germplasmDbId           the internal id of the germplasm (required)
     * @param authorization           HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call germplasmGermplasmDbIdMcpdGetCall(String germplasmDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/germplasm/{germplasmDbId}/mcpd"
                .replaceAll("\\{" + "germplasmDbId" + "}", apiClient.escapeString(germplasmDbId));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();
        if (authorization != null)
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"AuthorizationToken"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call germplasmGermplasmDbIdMcpdGetValidateBeforeCall(String germplasmDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'germplasmDbId' is set
        if (germplasmDbId == null) {
            throw new ApiException("Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdMcpdGet(Async)");
        }

        return germplasmGermplasmDbIdMcpdGetCall(germplasmDbId, authorization, progressListener, progressRequestListener);


    }

    /**
     * Get the details of a specific Germplasm in MCPD format
     * Get all MCPD details of a germplasm  &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.bioversityInternational.org/fileadmin/user_upload/online_library/publications/pdfs/FAOBIOVERSITY_MULTI-CROP_PASSPORT_DESCRIPTORS_V.2.1_2015_2020.pdf\&quot;&gt; MCPD v2.1 spec can be found here &lt;/a&gt;  Implementation Notes  - When the MCPD spec identifies a field which can have multiple values returned, the JSON response should be an array instead of a semi-colon separated string.
     *
     * @param germplasmDbId the internal id of the germplasm (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmMCPDResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GermplasmMCPDResponse germplasmGermplasmDbIdMcpdGet(String germplasmDbId, String authorization) throws ApiException {
        ApiResponse<GermplasmMCPDResponse> resp = germplasmGermplasmDbIdMcpdGetWithHttpInfo(germplasmDbId, authorization);
        return resp.getData();
    }

    /**
     * Get the details of a specific Germplasm in MCPD format
     * Get all MCPD details of a germplasm  &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.bioversityInternational.org/fileadmin/user_upload/online_library/publications/pdfs/FAOBIOVERSITY_MULTI-CROP_PASSPORT_DESCRIPTORS_V.2.1_2015_2020.pdf\&quot;&gt; MCPD v2.1 spec can be found here &lt;/a&gt;  Implementation Notes  - When the MCPD spec identifies a field which can have multiple values returned, the JSON response should be an array instead of a semi-colon separated string.
     *
     * @param germplasmDbId the internal id of the germplasm (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;GermplasmMCPDResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GermplasmMCPDResponse> germplasmGermplasmDbIdMcpdGetWithHttpInfo(String germplasmDbId, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = germplasmGermplasmDbIdMcpdGetValidateBeforeCall(germplasmDbId, authorization, null, null);
        Type localVarReturnType = new TypeToken<GermplasmMCPDResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the details of a specific Germplasm in MCPD format (asynchronously)
     * Get all MCPD details of a germplasm  &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.bioversityInternational.org/fileadmin/user_upload/online_library/publications/pdfs/FAOBIOVERSITY_MULTI-CROP_PASSPORT_DESCRIPTORS_V.2.1_2015_2020.pdf\&quot;&gt; MCPD v2.1 spec can be found here &lt;/a&gt;  Implementation Notes  - When the MCPD spec identifies a field which can have multiple values returned, the JSON response should be an array instead of a semi-colon separated string.
     *
     * @param germplasmDbId the internal id of the germplasm (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call germplasmGermplasmDbIdMcpdGetAsync(String germplasmDbId, String authorization, final ApiCallback<GermplasmMCPDResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = germplasmGermplasmDbIdMcpdGetValidateBeforeCall(germplasmDbId, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GermplasmMCPDResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for germplasmGermplasmDbIdPedigreeGet
     *
     * @param germplasmDbId           the internal id of the germplasm (required)
     * @param notation                text representation of the pedigree (optional)
     * @param includeSiblings         include array of siblings in response (optional)
     * @param authorization           HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call germplasmGermplasmDbIdPedigreeGetCall(String germplasmDbId, String notation, Boolean includeSiblings, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/germplasm/{germplasmDbId}/pedigree"
                .replaceAll("\\{" + "germplasmDbId" + "}", apiClient.escapeString(germplasmDbId));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        if (notation != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("notation", notation));
        if (includeSiblings != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("includeSiblings", includeSiblings));

        Map<String, String> localVarHeaderParams = new HashMap<>();
        if (authorization != null)
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"AuthorizationToken"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call germplasmGermplasmDbIdPedigreeGetValidateBeforeCall(String germplasmDbId, String notation, Boolean includeSiblings, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'germplasmDbId' is set
        if (germplasmDbId == null) {
            throw new ApiException("Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdPedigreeGet(Async)");
        }

        return germplasmGermplasmDbIdPedigreeGetCall(germplasmDbId, notation, includeSiblings, authorization, progressListener, progressRequestListener);


    }

    /**
     * **Deprecated in v2.1** Please use &#x60;GET /pedigree?germplasmDbId&#x3D;{germplasmDbId}&#x60;. Github issue number #481  &lt;br/&gt; Get the pedigree details of a specific Germplasm
     * **Deprecated in v2.1** Please use &#x60;GET /pedigree?germplasmDbId&#x3D;{germplasmDbId}&#x60;. Github issue number #481  &lt;br/&gt; Get the parentage information of a specific Germplasm
     *
     * @param germplasmDbId   the internal id of the germplasm (required)
     * @param notation        text representation of the pedigree (optional)
     * @param includeSiblings include array of siblings in response (optional)
     * @param authorization   HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmPedigreeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GermplasmPedigreeResponse germplasmGermplasmDbIdPedigreeGet(String germplasmDbId, String notation, Boolean includeSiblings, String authorization) throws ApiException {
        ApiResponse<GermplasmPedigreeResponse> resp = germplasmGermplasmDbIdPedigreeGetWithHttpInfo(germplasmDbId, notation, includeSiblings, authorization);
        return resp.getData();
    }

    /**
     * **Deprecated in v2.1** Please use &#x60;GET /pedigree?germplasmDbId&#x3D;{germplasmDbId}&#x60;. Github issue number #481  &lt;br/&gt; Get the pedigree details of a specific Germplasm
     * **Deprecated in v2.1** Please use &#x60;GET /pedigree?germplasmDbId&#x3D;{germplasmDbId}&#x60;. Github issue number #481  &lt;br/&gt; Get the parentage information of a specific Germplasm
     *
     * @param germplasmDbId   the internal id of the germplasm (required)
     * @param notation        text representation of the pedigree (optional)
     * @param includeSiblings include array of siblings in response (optional)
     * @param authorization   HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;GermplasmPedigreeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GermplasmPedigreeResponse> germplasmGermplasmDbIdPedigreeGetWithHttpInfo(String germplasmDbId, String notation, Boolean includeSiblings, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = germplasmGermplasmDbIdPedigreeGetValidateBeforeCall(germplasmDbId, notation, includeSiblings, authorization, null, null);
        Type localVarReturnType = new TypeToken<GermplasmPedigreeResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * **Deprecated in v2.1** Please use &#x60;GET /pedigree?germplasmDbId&#x3D;{germplasmDbId}&#x60;. Github issue number #481  &lt;br/&gt; Get the pedigree details of a specific Germplasm (asynchronously)
     * **Deprecated in v2.1** Please use &#x60;GET /pedigree?germplasmDbId&#x3D;{germplasmDbId}&#x60;. Github issue number #481  &lt;br/&gt; Get the parentage information of a specific Germplasm
     *
     * @param germplasmDbId   the internal id of the germplasm (required)
     * @param notation        text representation of the pedigree (optional)
     * @param includeSiblings include array of siblings in response (optional)
     * @param authorization   HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback        The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call germplasmGermplasmDbIdPedigreeGetAsync(String germplasmDbId, String notation, Boolean includeSiblings, String authorization, final ApiCallback<GermplasmPedigreeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = germplasmGermplasmDbIdPedigreeGetValidateBeforeCall(germplasmDbId, notation, includeSiblings, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GermplasmPedigreeResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for germplasmGermplasmDbIdProgenyGet
     *
     * @param germplasmDbId           the internal id of the germplasm (required)
     * @param authorization           HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call germplasmGermplasmDbIdProgenyGetCall(String germplasmDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/germplasm/{germplasmDbId}/progeny"
                .replaceAll("\\{" + "germplasmDbId" + "}", apiClient.escapeString(germplasmDbId));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();
        if (authorization != null)
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"AuthorizationToken"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call germplasmGermplasmDbIdProgenyGetValidateBeforeCall(String germplasmDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'germplasmDbId' is set
        if (germplasmDbId == null) {
            throw new ApiException("Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdProgenyGet(Async)");
        }

        return germplasmGermplasmDbIdProgenyGetCall(germplasmDbId, authorization, progressListener, progressRequestListener);


    }

    /**
     * **Deprecated in v2.1** Please use &#x60;GET /pedigree?germplasmDbId&#x3D;{germplasmDbId}&#x60;. Github issue number #481  &lt;br/&gt; Get the progeny details of a specific Germplasm
     * **Deprecated in v2.1** Please use &#x60;GET /pedigree?germplasmDbId&#x3D;{germplasmDbId}&#x60;. Github issue number #481  &lt;br/&gt; Get the germplasmDbIds for all the Progeny of a particular germplasm. &lt;br/&gt; Implementation Notes &lt;br/&gt; - Regarding the &#x27;&#x27;parentType&#x27;&#x27; field in the progeny object. Given a germplasm A having a progeny B and C, &#x27;&#x27;parentType&#x27;&#x27; for progeny B refers to the &#x27;&#x27;parentType&#x27;&#x27; of A toward B.
     *
     * @param germplasmDbId the internal id of the germplasm (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmProgenyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GermplasmProgenyResponse germplasmGermplasmDbIdProgenyGet(String germplasmDbId, String authorization) throws ApiException {
        ApiResponse<GermplasmProgenyResponse> resp = germplasmGermplasmDbIdProgenyGetWithHttpInfo(germplasmDbId, authorization);
        return resp.getData();
    }

    /**
     * **Deprecated in v2.1** Please use &#x60;GET /pedigree?germplasmDbId&#x3D;{germplasmDbId}&#x60;. Github issue number #481  &lt;br/&gt; Get the progeny details of a specific Germplasm
     * **Deprecated in v2.1** Please use &#x60;GET /pedigree?germplasmDbId&#x3D;{germplasmDbId}&#x60;. Github issue number #481  &lt;br/&gt; Get the germplasmDbIds for all the Progeny of a particular germplasm. &lt;br/&gt; Implementation Notes &lt;br/&gt; - Regarding the &#x27;&#x27;parentType&#x27;&#x27; field in the progeny object. Given a germplasm A having a progeny B and C, &#x27;&#x27;parentType&#x27;&#x27; for progeny B refers to the &#x27;&#x27;parentType&#x27;&#x27; of A toward B.
     *
     * @param germplasmDbId the internal id of the germplasm (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;GermplasmProgenyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GermplasmProgenyResponse> germplasmGermplasmDbIdProgenyGetWithHttpInfo(String germplasmDbId, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = germplasmGermplasmDbIdProgenyGetValidateBeforeCall(germplasmDbId, authorization, null, null);
        Type localVarReturnType = new TypeToken<GermplasmProgenyResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * **Deprecated in v2.1** Please use &#x60;GET /pedigree?germplasmDbId&#x3D;{germplasmDbId}&#x60;. Github issue number #481  &lt;br/&gt; Get the progeny details of a specific Germplasm (asynchronously)
     * **Deprecated in v2.1** Please use &#x60;GET /pedigree?germplasmDbId&#x3D;{germplasmDbId}&#x60;. Github issue number #481  &lt;br/&gt; Get the germplasmDbIds for all the Progeny of a particular germplasm. &lt;br/&gt; Implementation Notes &lt;br/&gt; - Regarding the &#x27;&#x27;parentType&#x27;&#x27; field in the progeny object. Given a germplasm A having a progeny B and C, &#x27;&#x27;parentType&#x27;&#x27; for progeny B refers to the &#x27;&#x27;parentType&#x27;&#x27; of A toward B.
     *
     * @param germplasmDbId the internal id of the germplasm (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call germplasmGermplasmDbIdProgenyGetAsync(String germplasmDbId, String authorization, final ApiCallback<GermplasmProgenyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = germplasmGermplasmDbIdProgenyGetValidateBeforeCall(germplasmDbId, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GermplasmProgenyResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for germplasmGermplasmDbIdPut
     *
     * @param germplasmDbId           The internal id of the germplasm (required)
     * @param body                    (optional)
     * @param authorization           HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call germplasmGermplasmDbIdPutCall(String germplasmDbId, GermplasmNewRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // create path and map variables
        String localVarPath = "/germplasm/{germplasmDbId}"
                .replaceAll("\\{" + "germplasmDbId" + "}", apiClient.escapeString(germplasmDbId));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();
        if (authorization != null)
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"AuthorizationToken"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, body, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call germplasmGermplasmDbIdPutValidateBeforeCall(String germplasmDbId, GermplasmNewRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'germplasmDbId' is set
        if (germplasmDbId == null) {
            throw new ApiException("Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdPut(Async)");
        }

        return germplasmGermplasmDbIdPutCall(germplasmDbId, body, authorization, progressListener, progressRequestListener);


    }

    /**
     * Update the details of an existing Germplasm
     * Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].
     *
     * @param germplasmDbId The internal id of the germplasm (required)
     * @param body          (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GermplasmSingleResponse germplasmGermplasmDbIdPut(String germplasmDbId, GermplasmNewRequest body, String authorization) throws ApiException {
        ApiResponse<GermplasmSingleResponse> resp = germplasmGermplasmDbIdPutWithHttpInfo(germplasmDbId, body, authorization);
        return resp.getData();
    }

    /**
     * Update the details of an existing Germplasm
     * Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].
     *
     * @param germplasmDbId The internal id of the germplasm (required)
     * @param body          (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;GermplasmSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GermplasmSingleResponse> germplasmGermplasmDbIdPutWithHttpInfo(String germplasmDbId, GermplasmNewRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = germplasmGermplasmDbIdPutValidateBeforeCall(germplasmDbId, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<GermplasmSingleResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the details of an existing Germplasm (asynchronously)
     * Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].
     *
     * @param germplasmDbId The internal id of the germplasm (required)
     * @param body          (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call germplasmGermplasmDbIdPutAsync(String germplasmDbId, GermplasmNewRequest body, String authorization, final ApiCallback<GermplasmSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = germplasmGermplasmDbIdPutValidateBeforeCall(germplasmDbId, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GermplasmSingleResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for germplasmGet
     *
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call germplasmGetCall(GermplasmQueryParams queryParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/germplasm";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();

        queryParams.buildQueryParams(apiClient, localVarQueryParams, localVarHeaderParams);

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"AuthorizationToken"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call germplasmGetValidateBeforeCall(GermplasmQueryParams queryParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        return germplasmGetCall(queryParams, progressListener, progressRequestListener);


    }

    /**
     * Get a filtered list of Germplasm
     * Addresses these needs  - General germplasm search mechanism that accepts POST for complex queries   - Possibility to search germplasm by more parameters than those allowed by the existing germplasm search   - Possibility to get MCPD details by PUID rather than dbId
     *
     * @return GermplasmListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GermplasmListResponse germplasmGet(GermplasmQueryParams queryParams) throws ApiException {
        ApiResponse<GermplasmListResponse> resp = germplasmGetWithHttpInfo(queryParams);
        return resp.getData();
    }

    /**
     * Get a filtered list of Germplasm
     * Addresses these needs  - General germplasm search mechanism that accepts POST for complex queries   - Possibility to search germplasm by more parameters than those allowed by the existing germplasm search   - Possibility to get MCPD details by PUID rather than dbId
     *
     * @return ApiResponse&lt;GermplasmListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GermplasmListResponse> germplasmGetWithHttpInfo(GermplasmQueryParams queryParams) throws ApiException {
        com.squareup.okhttp.Call call = germplasmGetValidateBeforeCall(queryParams, null, null);
        Type localVarReturnType = new TypeToken<GermplasmListResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a filtered list of Germplasm (asynchronously)
     * Addresses these needs  - General germplasm search mechanism that accepts POST for complex queries   - Possibility to search germplasm by more parameters than those allowed by the existing germplasm search   - Possibility to get MCPD details by PUID rather than dbId
     *
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call germplasmGetAsync(GermplasmQueryParams queryParams, final ApiCallback<GermplasmListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = germplasmGetValidateBeforeCall(queryParams, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GermplasmListResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for germplasmPost
     *
     * @param body                    (optional)
     * @param authorization           HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call germplasmPostCall(List<GermplasmNewRequest> body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // create path and map variables
        String localVarPath = "/germplasm";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();
        if (authorization != null)
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"AuthorizationToken"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, body, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call germplasmPostValidateBeforeCall(List<GermplasmNewRequest> body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        return germplasmPostCall(body, authorization, progressListener, progressRequestListener);


    }

    /**
     * Create new Germplasm entities on this server
     * Create new Germplasm entities on this server
     *
     * @param body          (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GermplasmListResponse germplasmPost(List<GermplasmNewRequest> body, String authorization) throws ApiException {
        ApiResponse<GermplasmListResponse> resp = germplasmPostWithHttpInfo(body, authorization);
        return resp.getData();
    }

    /**
     * Create new Germplasm entities on this server
     * Create new Germplasm entities on this server
     *
     * @param body          (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;GermplasmListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GermplasmListResponse> germplasmPostWithHttpInfo(List<GermplasmNewRequest> body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = germplasmPostValidateBeforeCall(body, authorization, null, null);
        Type localVarReturnType = new TypeToken<GermplasmListResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new Germplasm entities on this server (asynchronously)
     * Create new Germplasm entities on this server
     *
     * @param body          (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call germplasmPostAsync(List<GermplasmNewRequest> body, String authorization, final ApiCallback<GermplasmListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = germplasmPostValidateBeforeCall(body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GermplasmListResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for searchGermplasmPost
     *
     * @param body                    (optional)
     * @param authorization           HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchGermplasmPostCall(GermplasmSearchRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // create path and map variables
        String localVarPath = "/search/germplasm";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();
        if (authorization != null)
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"AuthorizationToken"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, body, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call searchGermplasmPostValidateBeforeCall(GermplasmSearchRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        return searchGermplasmPostCall(body, authorization, progressListener, progressRequestListener);


    }

    /**
     * Submit a search request for &#x60;Germplasm&#x60;
     * Submit a search request for &#x60;Germplasm&#x60;&lt;br/&gt; Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately.  If a server needs more time to process the request, it might respond with a &#x60;searchResultsDbId&#x60;.  Use the corresponding &#x60;GET /search/germplasm/{searchResultsDbId}&#x60; to retrieve the results of the search. &lt;br/&gt;  Review the &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\&quot;&gt;Search Services documentation&lt;/a&gt; for additional implementation details.
     *
     * @param body          (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GermplasmListResponse searchGermplasmPost(GermplasmSearchRequest body, String authorization) throws ApiException {
        ApiResponse<GermplasmListResponse> resp = searchGermplasmPostWithHttpInfo(body, authorization);
        return resp.getData();
    }

    /**
     * Submit a search request for &#x60;Germplasm&#x60;
     * Submit a search request for &#x60;Germplasm&#x60;&lt;br/&gt; Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately.  If a server needs more time to process the request, it might respond with a &#x60;searchResultsDbId&#x60;.  Use the corresponding &#x60;GET /search/germplasm/{searchResultsDbId}&#x60; to retrieve the results of the search. &lt;br/&gt;  Review the &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\&quot;&gt;Search Services documentation&lt;/a&gt; for additional implementation details.
     *
     * @param body          (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;GermplasmListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GermplasmListResponse> searchGermplasmPostWithHttpInfo(GermplasmSearchRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = searchGermplasmPostValidateBeforeCall(body, authorization, null, null);
        Type localVarReturnType = new TypeToken<GermplasmListResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submit a search request for &#x60;Germplasm&#x60; (asynchronously)
     * Submit a search request for &#x60;Germplasm&#x60;&lt;br/&gt; Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately.  If a server needs more time to process the request, it might respond with a &#x60;searchResultsDbId&#x60;.  Use the corresponding &#x60;GET /search/germplasm/{searchResultsDbId}&#x60; to retrieve the results of the search. &lt;br/&gt;  Review the &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\&quot;&gt;Search Services documentation&lt;/a&gt; for additional implementation details.
     *
     * @param body          (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchGermplasmPostAsync(GermplasmSearchRequest body, String authorization, final ApiCallback<GermplasmListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = searchGermplasmPostValidateBeforeCall(body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GermplasmListResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for searchGermplasmSearchResultsDbIdGet
     *
     * @param searchResultsDbId       Unique identifier which references the search results (required)
     * @param page                    Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize                The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization           HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchGermplasmSearchResultsDbIdGetCall(String searchResultsDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/germplasm/{searchResultsDbId}"
                .replaceAll("\\{" + "searchResultsDbId" + "}", apiClient.escapeString(searchResultsDbId));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        if (page != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<>();
        if (authorization != null)
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"AuthorizationToken"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call searchGermplasmSearchResultsDbIdGetValidateBeforeCall(String searchResultsDbId, Integer page, Integer pageSize, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'searchResultsDbId' is set
        if (searchResultsDbId == null) {
            throw new ApiException("Missing the required parameter 'searchResultsDbId' when calling searchGermplasmSearchResultsDbIdGet(Async)");
        }

        return searchGermplasmSearchResultsDbIdGetCall(searchResultsDbId, page, pageSize, authorization, progressListener, progressRequestListener);


    }

    /**
     * Get the results of a &#x60;Germplasm&#x60; search request
     * Get the results of a &#x60;Germplasm&#x60; search request &lt;br/&gt; Clients should submit a search request using the corresponding &#x60;POST /search/germplasm&#x60; endpoint. Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately.  If a server needs more time to process the request, it might respond with a &#x60;searchResultsDbId&#x60;.  Use this endpoint to retrieve the results of the search. &lt;br/&gt;  Review the &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\&quot;&gt;Search Services documentation&lt;/a&gt; for additional implementation details.
     *
     * @param searchResultsDbId Unique identifier which references the search results (required)
     * @param page              Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize          The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization     HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GermplasmListResponse searchGermplasmSearchResultsDbIdGet(String searchResultsDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        ApiResponse<GermplasmListResponse> resp = searchGermplasmSearchResultsDbIdGetWithHttpInfo(searchResultsDbId, page, pageSize, authorization);
        return resp.getData();
    }

    /**
     * Get the results of a &#x60;Germplasm&#x60; search request
     * Get the results of a &#x60;Germplasm&#x60; search request &lt;br/&gt; Clients should submit a search request using the corresponding &#x60;POST /search/germplasm&#x60; endpoint. Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately.  If a server needs more time to process the request, it might respond with a &#x60;searchResultsDbId&#x60;.  Use this endpoint to retrieve the results of the search. &lt;br/&gt;  Review the &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\&quot;&gt;Search Services documentation&lt;/a&gt; for additional implementation details.
     *
     * @param searchResultsDbId Unique identifier which references the search results (required)
     * @param page              Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize          The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization     HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;GermplasmListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GermplasmListResponse> searchGermplasmSearchResultsDbIdGetWithHttpInfo(String searchResultsDbId, Integer page, Integer pageSize, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = searchGermplasmSearchResultsDbIdGetValidateBeforeCall(searchResultsDbId, page, pageSize, authorization, null, null);
        Type localVarReturnType = new TypeToken<GermplasmListResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the results of a &#x60;Germplasm&#x60; search request (asynchronously)
     * Get the results of a &#x60;Germplasm&#x60; search request &lt;br/&gt; Clients should submit a search request using the corresponding &#x60;POST /search/germplasm&#x60; endpoint. Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately.  If a server needs more time to process the request, it might respond with a &#x60;searchResultsDbId&#x60;.  Use this endpoint to retrieve the results of the search. &lt;br/&gt;  Review the &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\&quot;&gt;Search Services documentation&lt;/a&gt; for additional implementation details.
     *
     * @param searchResultsDbId Unique identifier which references the search results (required)
     * @param page              Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize          The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization     HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback          The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchGermplasmSearchResultsDbIdGetAsync(String searchResultsDbId, Integer page, Integer pageSize, String authorization, final ApiCallback<GermplasmListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = searchGermplasmSearchResultsDbIdGetValidateBeforeCall(searchResultsDbId, page, pageSize, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GermplasmListResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

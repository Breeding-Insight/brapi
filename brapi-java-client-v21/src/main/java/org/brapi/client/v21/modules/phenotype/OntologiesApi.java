/*
 * BrAPI-Phenotyping
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/RESTfulness\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Response_Structure\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Dates_and_Times\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Location_Coordinates\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Error_Handling\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Search_Services\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.1</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm21.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.brapi.client.v21.modules.phenotype;

import com.google.gson.reflect.TypeToken;
import org.brapi.client.v21.*;
import org.brapi.client.v21.model.queryParams.phenotype.OntologyQueryParams;
import org.brapi.model.v21.phenotype.OntologyListResponse;
import org.brapi.model.v21.phenotype.OntologyNewRequest;
import org.brapi.model.v21.phenotype.OntologySingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OntologiesApi {
    private ApiClient apiClient;

    public OntologiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OntologiesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for ontologiesGet
     *
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ontologiesGetCall(OntologyQueryParams queryParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ontologies";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();

        queryParams.buildQueryParams(apiClient, localVarQueryParams, localVarHeaderParams);

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"AuthorizationToken"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call ontologiesGetValidateBeforeCall(OntologyQueryParams queryParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        return ontologiesGetCall(queryParams, progressListener, progressRequestListener);


    }

    /**
     * Get a filtered list of Ontologies
     * Retrieve a list of ontologies available in the system.  Each Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.
     *
     * @return OntologyListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OntologyListResponse ontologiesGet(OntologyQueryParams queryParams) throws ApiException {
        ApiResponse<OntologyListResponse> resp = ontologiesGetWithHttpInfo(queryParams);
        return resp.getData();
    }

    /**
     * Get a filtered list of Ontologies
     * Retrieve a list of ontologies available in the system.  Each Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.
     *
     * @return ApiResponse&lt;OntologyListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OntologyListResponse> ontologiesGetWithHttpInfo(OntologyQueryParams queryParams) throws ApiException {
        com.squareup.okhttp.Call call = ontologiesGetValidateBeforeCall(queryParams, null, null);
        Type localVarReturnType = new TypeToken<OntologyListResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a filtered list of Ontologies (asynchronously)
     * Retrieve a list of ontologies available in the system.  Each Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.
     *
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ontologiesGetAsync(OntologyQueryParams queryParams, final ApiCallback<OntologyListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = ontologiesGetValidateBeforeCall(queryParams, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OntologyListResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for ontologiesOntologyDbIdGet
     *
     * @param ontologyDbId            The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology   Use &#x60;GET /ontologies&#x60; to find the list of available ontologies on a server. (required)
     * @param authorization           HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ontologiesOntologyDbIdGetCall(String ontologyDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ontologies/{ontologyDbId}"
                .replaceAll("\\{" + "ontologyDbId" + "}", apiClient.escapeString(ontologyDbId));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();
        if (authorization != null)
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"AuthorizationToken"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call ontologiesOntologyDbIdGetValidateBeforeCall(String ontologyDbId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ontologyDbId' is set
        if (ontologyDbId == null) {
            throw new ApiException("Missing the required parameter 'ontologyDbId' when calling ontologiesOntologyDbIdGet(Async)");
        }

        return ontologiesOntologyDbIdGetCall(ontologyDbId, authorization, progressListener, progressRequestListener);


    }

    /**
     * Get a specific Ontology record by its ontologyDbId
     * Use this endpoint to retrieve a specific Ontology record by its ontologyDbId.  Each Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.
     *
     * @param ontologyDbId  The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology   Use &#x60;GET /ontologies&#x60; to find the list of available ontologies on a server. (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return OntologySingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OntologySingleResponse ontologiesOntologyDbIdGet(String ontologyDbId, String authorization) throws ApiException {
        ApiResponse<OntologySingleResponse> resp = ontologiesOntologyDbIdGetWithHttpInfo(ontologyDbId, authorization);
        return resp.getData();
    }

    /**
     * Get a specific Ontology record by its ontologyDbId
     * Use this endpoint to retrieve a specific Ontology record by its ontologyDbId.  Each Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.
     *
     * @param ontologyDbId  The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology   Use &#x60;GET /ontologies&#x60; to find the list of available ontologies on a server. (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;OntologySingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OntologySingleResponse> ontologiesOntologyDbIdGetWithHttpInfo(String ontologyDbId, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = ontologiesOntologyDbIdGetValidateBeforeCall(ontologyDbId, authorization, null, null);
        Type localVarReturnType = new TypeToken<OntologySingleResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific Ontology record by its ontologyDbId (asynchronously)
     * Use this endpoint to retrieve a specific Ontology record by its ontologyDbId.  Each Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.
     *
     * @param ontologyDbId  The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology   Use &#x60;GET /ontologies&#x60; to find the list of available ontologies on a server. (required)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ontologiesOntologyDbIdGetAsync(String ontologyDbId, String authorization, final ApiCallback<OntologySingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = ontologiesOntologyDbIdGetValidateBeforeCall(ontologyDbId, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OntologySingleResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for ontologiesOntologyDbIdPut
     *
     * @param ontologyDbId            The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology   Use &#x60;GET /ontologies&#x60; to find the list of available ontologies on a server. (required)
     * @param body                    (optional)
     * @param authorization           HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ontologiesOntologyDbIdPutCall(String ontologyDbId, OntologyNewRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // create path and map variables
        String localVarPath = "/ontologies/{ontologyDbId}"
                .replaceAll("\\{" + "ontologyDbId" + "}", apiClient.escapeString(ontologyDbId));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();
        if (authorization != null)
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"AuthorizationToken"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, body, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call ontologiesOntologyDbIdPutValidateBeforeCall(String ontologyDbId, OntologyNewRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ontologyDbId' is set
        if (ontologyDbId == null) {
            throw new ApiException("Missing the required parameter 'ontologyDbId' when calling ontologiesOntologyDbIdPut(Async)");
        }

        return ontologiesOntologyDbIdPutCall(ontologyDbId, body, authorization, progressListener, progressRequestListener);


    }

    /**
     * Update a specific Ontology record
     * Use this endpoint to update a specific Ontology record.  Each Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.
     *
     * @param ontologyDbId  The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology   Use &#x60;GET /ontologies&#x60; to find the list of available ontologies on a server. (required)
     * @param body          (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return OntologySingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OntologySingleResponse ontologiesOntologyDbIdPut(String ontologyDbId, OntologyNewRequest body, String authorization) throws ApiException {
        ApiResponse<OntologySingleResponse> resp = ontologiesOntologyDbIdPutWithHttpInfo(ontologyDbId, body, authorization);
        return resp.getData();
    }

    /**
     * Update a specific Ontology record
     * Use this endpoint to update a specific Ontology record.  Each Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.
     *
     * @param ontologyDbId  The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology   Use &#x60;GET /ontologies&#x60; to find the list of available ontologies on a server. (required)
     * @param body          (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;OntologySingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OntologySingleResponse> ontologiesOntologyDbIdPutWithHttpInfo(String ontologyDbId, OntologyNewRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = ontologiesOntologyDbIdPutValidateBeforeCall(ontologyDbId, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<OntologySingleResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a specific Ontology record (asynchronously)
     * Use this endpoint to update a specific Ontology record.  Each Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.
     *
     * @param ontologyDbId  The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology   Use &#x60;GET /ontologies&#x60; to find the list of available ontologies on a server. (required)
     * @param body          (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ontologiesOntologyDbIdPutAsync(String ontologyDbId, OntologyNewRequest body, String authorization, final ApiCallback<OntologySingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = ontologiesOntologyDbIdPutValidateBeforeCall(ontologyDbId, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OntologySingleResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for ontologiesPost
     *
     * @param body                    (optional)
     * @param authorization           HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ontologiesPostCall(List<OntologyNewRequest> body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // create path and map variables
        String localVarPath = "/ontologies";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();

        Map<String, String> localVarHeaderParams = new HashMap<>();
        if (authorization != null)
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[]{"AuthorizationToken"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, body, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call ontologiesPostValidateBeforeCall(List<OntologyNewRequest> body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        return ontologiesPostCall(body, authorization, progressListener, progressRequestListener);


    }

    /**
     * Create a new Ontology record in the database
     * Use this endpoint to create a new Ontology record in the database Each Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.
     *
     * @param body          (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return OntologyListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OntologyListResponse ontologiesPost(List<OntologyNewRequest> body, String authorization) throws ApiException {
        ApiResponse<OntologyListResponse> resp = ontologiesPostWithHttpInfo(body, authorization);
        return resp.getData();
    }

    /**
     * Create a new Ontology record in the database
     * Use this endpoint to create a new Ontology record in the database Each Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.
     *
     * @param body          (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return ApiResponse&lt;OntologyListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OntologyListResponse> ontologiesPostWithHttpInfo(List<OntologyNewRequest> body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = ontologiesPostValidateBeforeCall(body, authorization, null, null);
        Type localVarReturnType = new TypeToken<OntologyListResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new Ontology record in the database (asynchronously)
     * Use this endpoint to create a new Ontology record in the database Each Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.
     *
     * @param body          (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @param callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ontologiesPostAsync(List<OntologyNewRequest> body, String authorization, final ApiCallback<OntologyListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;

            progressRequestListener = callback::onUploadProgress;
        }

        com.squareup.okhttp.Call call = ontologiesPostValidateBeforeCall(body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OntologyListResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
